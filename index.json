[{"content":"Introduction to Funval # ","date":"24 enero 2023","permalink":"/platform/","section":"","summary":"Introduction to Funval # ","title":""},{"content":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.\nPara esto podemos usar la sentencia if y el operador condicional ?, también llamado operador de “signo de interrogación”.\nLa sentencia \u0026ldquo;if\u0026rdquo; # La sentencia if(...) evalúa la condición en los paréntesis, y si el resultado es true ejecuta un bloque de código.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En que año fué publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) alert( \u0026#39;¡Estás en lo cierto!\u0026#39; ); Aquí la condición es una simple igualdad (year == 2015), pero podría ser mucho mas complejo.\nSi quisiéramos ejecutar más de una sentencia, debemos encerrar nuestro bloque de código entre llaves:\nif (year == 2015) { alert( \u0026#34;¡Es Correcto!\u0026#34; ); alert( \u0026#34;¡Eres muy inteligente!\u0026#34; ); } Recomendamos siempre encerrar nuestro bloque de código entre llaves {} siempre que se utilice la sentencia if, inclusive si solo se va a ejecutar una sola sentencia en este caso. Hacer eso mejora la legibilidad.\nConversión Booleana # La sentencia if (…) evalúa la expresión dentro de sus paréntesis y convierte el resultado en booleano.\nEl número 0, un string vacío \u0026quot;\u0026quot;, null, undefined, y NaN se convierte en false. Por esto son llamados valores \u0026ldquo;falso\u0026rdquo;. El resto de los valores se convierten en true, entonces los llamaremos valores \u0026ldquo;verdadero\u0026rdquo;. Entonces, el código bajo esta condición nunca se ejecutaría:\nif (0) { // 0 es falso ... } \u0026hellip;y dentro de esta condición siempre se ejecutará:\nif (1) { // 1 es verdadero ... } La cláusula \u0026ldquo;else\u0026rdquo; # La sentencia if quizás contenga un bloque \u0026ldquo;else\u0026rdquo; opcional. Este se ejecutará cuando la condición sea falsa.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;¡Lo adivinaste, correcto!\u0026#39; ); } else { alert( \u0026#39;¿Cómo puedes estar tan equivocado?\u0026#39; ); // cualquier valor excepto 2015 } Muchas condiciones: \u0026ldquo;else if\u0026rdquo; # Algunas veces, queremos probar variantes de una condición. La clausula else if nos permite hacer esto.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Muy poco...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Muy Tarde\u0026#39; ); } else { alert( \u0026#39;¡Exactamente!\u0026#39; ); } En el código de arriba, JavaScript primero revisa si year \u0026lt; 2015. Si esto es falso, continúa a la siguiente condición year \u0026gt; 2015. Si esta también es falsa, mostrará la última alert.\nPodría haber más bloques else if. Y el último else es opcional.\nEjemplos de Condicionales # En el siguiente video encontrarás mas informción de condicionales e incluso podrás ver el uso de switch, una tipo de condicion que no estaremos usando en el curso pero que es importante que conozcas.\nBucles # Usualmente necesitamos repetir acciones.\nPor ejemplo, mostrar los elementos de una lista uno tras otro o simplemente ejecutar el mismo código para cada número del 1 al 10.\nLos Bucles son una forma de repetir el mismo código varias veces.\nEl bucle \u0026ldquo;while\u0026rdquo; # El bucle while (mientras) tiene la siguiente sintaxis:\nwhile (condition) { // código // llamado \u0026#34;cuerpo del bucle\u0026#34; } Mientras la condición condition sea verdadera, el código del cuerpo del bucle será ejecutado.\nPor ejemplo, el bucle debajo imprime i mientras se cumpla i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // muestra 0, luego 1, luego 2 alert( i ); i++; } Cada ejecución del cuerpo del bucle se llama iteración. El bucle en el ejemplo de arriba realiza 3 iteraciones.\nSi faltara i++ en el ejemplo de arriba, el bucle sería repetido (en teoría) eternamente. En la práctica, el navegador tiene maneras de detener tales bucles desmedidos; y en el JavaScript del lado del servidor, podemos eliminar el proceso.\nCualquier expresión o variable puede usarse como condición del bucle, no solo las comparaciones: El while evaluará y transformará la condición a un booleano.\nPor ejemplo, una manera más corta de escribir while (i != 0) es while (i):\nlet i = 3; while (i) { // cuando i sea 0, la condición se volverá falsa y el bucle se detendrá alert( i ); i--; } El bucle \u0026ldquo;do..while\u0026rdquo; # La comprobación de la condición puede ser movida debajo del cuerpo del bucle usando la sintaxis do..while:\ndo { // cuerpo del bucle } while (condition); El bucle primero ejecuta el cuerpo, luego comprueba la condición, y, mientras sea un valor verdadero, la ejecuta una y otra vez.\nPor ejemplo:\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); Esta sintaxis solo debe ser usada cuando quieres que el cuerpo del bucle sea ejecutado al menos una vez sin importar que la condición sea verdadera. Usualmente, se prefiere la otra forma: while(…) {…}.\nEl bucle \u0026ldquo;for\u0026rdquo; # El bucle for es más complejo, pero también el más usado.\nSe ve así:\nfor (begin; condition; step) { // (comienzo, condición, paso) // ... cuerpo del bucle ... } Aprendamos el significado de cada parte con un ejemplo. El bucle debajo corre alert(i) para i desde 0 hasta (pero no incluyendo) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // muestra 0, luego 1, luego 2 alert(i); } Vamos a examinar la declaración for parte por parte:\nparte comienzo let i = 0 Se ejecuta una vez al comienzo del bucle. condición i \u0026lt; 3 Comprobada antes de cada iteración del bucle. Si es falsa, el bucle finaliza. cuerpo alert(i) Se ejecuta una y otra vez mientras la condición sea verdadera. paso i++ Se ejecuta después del cuerpo en cada iteración. El algoritmo general del bucle funciona de esta forma:\nSe ejecuta comenzar → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → ... Si eres nuevo en bucles, te podría ayudar regresar al ejemplo y reproducir cómo se ejecuta paso por paso en una pedazo de papel.\nEsto es lo que sucede exactamente en nuestro caso:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // se ejecuta comenzar let i = 0 // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // ...finaliza, porque ahora i == 3 Declaración de variable en línea Aquí, la variable \"counter\" `i` es declarada en el bucle. Esto es llamado una declaración de variable \"en línea\". Dichas variables son visibles solo dentro del bucle. for (*!*let*/!* i = 0; i \u0026lt; 3; i++) { alert(i); // 0, 1, 2 } alert(i); // error, no existe dicha variable En vez de definir una variable, podemos usar una que ya exista:\nlet i = 0; for (i = 0; i \u0026lt; 3; i++) { // usa una variable existente alert(i); // 0, 1, 2 } alert(i); // 3, visible, porque fue declarada fuera del bucle Omitiendo partes # Cualquier parte de for puede ser omitida.\nPor ejemplo, podemos quitar comienzo si no necesitamos realizar nada al inicio del bucle.\nComo aquí:\nlet i = 0; // Ya tenemos i declarada y asignada for (; i \u0026lt; 3; i++) { // no hay necesidad de \u0026#34;comenzar\u0026#34; alert( i ); // 0, 1, 2 } También podemos eliminar la parte paso:\nlet i = 0; for (; i \u0026lt; 3;) { alert( i++ ); } Esto hace al bucle idéntico a while (i \u0026lt; 3).\nEn realidad podemos eliminar todo, creando un bucle infinito:\nfor (;;) { // se repite sin limites } Por favor, nota que los dos punto y coma ; del for deben estar presentes. De otra manera, habría un error de sintaxis.\nRompiendo el bucle # Normalmente, se sale de un bucle cuando la condición se vuelve falsa.\nPero podemos forzar una salida en cualquier momento usando la directiva especial break.\nPor ejemplo, el bucle debajo le pide al usuario por una serie de números, \u0026ldquo;rompiéndolo\u0026rdquo; cuando un número no es ingresado:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Ingresa un número\u0026#34;, \u0026#39;\u0026#39;); *!* if (!value) break; // (*) */!* sum += value; } alert( \u0026#39;Suma: \u0026#39; + sum ); La directiva break es activada en la línea (*) si el usuario ingresa una línea vacía o cancela la entrada. Detiene inmediatamente el bucle, pasando el control a la primera línea después de el bucle. En este caso, alert.\nLa combinación \u0026ldquo;bucle infinito + break según sea necesario\u0026rdquo; es ideal en situaciones donde la condición del bucle debe ser comprobada no al inicio o al final de el bucle, sino a la mitad o incluso en varias partes del cuerpo.\nContinuar a la siguiente iteración # La directiva continue es una \u0026ldquo;versión más ligera\u0026rdquo; de break. No detiene el bucle completo. En su lugar, detiene la iteración actual y fuerza al bucle a comenzar una nueva (si la condición lo permite).\nPodemos usarlo si hemos terminado con la iteración actual y nos gustaría movernos a la siguiente.\nEl bucle debajo usa continue para mostrar solo valores impares:\nfor (let i = 0; i \u0026lt; 10; i++) { // si es verdadero, saltar el resto del cuerpo *!*if (i % 2 == 0) continue;*/!* alert(i); // 1, luego 3, 5, 7, 9 } Para los valores pares de i, la directiva continue deja de ejecutar el cuerpo y pasa el control a la siguiente iteración de for (con el siguiente número). Así que el alert solo es llamado para valores impares.\nLa directiva `continue` ayuda a disminuir la anidación Un bucle que muestra valores impares podría verse así: for (let i = 0; i \u0026lt; 10; i++) { if (i % 2) { alert( i ); } } Desde un punto de vista técnico, esto es idéntico al ejemplo de arriba. Claro, podemos simplemente envolver el código en un bloque if en vez de usar continue.\nPero como efecto secundario, esto crearía un nivel más de anidación (la llamada a alert dentro de las llaves). Si el código dentro de if posee varias líneas, eso podría reducir la legibilidad en general. Más sobre bucles # En el siguiente video vamos a ver algunos ejemplos de como aplicar los bucles que hemos mencionado:\n","date":"24 enero 2023","permalink":"/platform/levels/level1_2023/dia3/if_bucles/","section":"Levels","summary":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.","title":"Condicionales y Bucles"},{"content":"","date":"24 enero 2023","permalink":"/platform/levels/","section":"Levels","summary":"","title":"Levels"},{"content":" Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.\n¿Qué es JavaScript? # JavaScript fue creado para “dar vida a las páginas web”.\nLos programas en este lenguaje se llaman scripts. Se pueden escribir directamente en el HTML de una página web y ejecutarse automáticamente a medida que se carga la página.\nLos scripts se proporcionan y ejecutan como texto plano. No necesitan preparación especial o compilación para correr.\nEn este aspecto, JavaScript es muy diferente a otro lenguaje llamado Java.\n¿Por qué se llama JavaScript? Cuando JavaScript fue creado, inicialmente tenía otro nombre: “LiveScript”. Pero Java era muy popular en ese momento, así que se decidió que el posicionamiento de un nuevo lenguaje como un “Hermano menor” de Java ayudaría. Pero a medida que evolucionaba, JavaScript se convirtió en un lenguaje completamente independiente con su propia especificación llamada ECMAScript, y ahora no tiene ninguna relación con Java. Hoy, JavaScript puede ejecutarse no solo en los navegadores, sino también en servidores o incluso en cualquier dispositivo que cuente con un programa especial llamado El motor o intérprete de JavaScript.\nDiferentes motores tienen diferentes “nombres en clave”. Por ejemplo:\nV8 – en Chrome, Opera y Edge. SpiderMonkey – en Firefox. …Existen otros nombres en clave como “Chakra” para IE , “JavaScriptCore”, “Nitro” y “SquirrelFish” para Safari, etc. Es bueno recordar estos términos porque son usados en artículos para desarrolladores en internet. Por ejemplo, si “la característica X es soportada por V8”, entonces probablemente funciona en Chrome, Opera y Edge.\n¿Como trabajan los motores? Los motores son complicados, pero los fundamentos son fáciles. El motor (embebido si es un navegador) lee (“analiza”) el script. Luego convierte (“compila”) el script a lenguaje de máquina. Por último, el código máquina se ejecuta, muy rápido. El motor aplica optimizaciones en cada paso del proceso. Incluso observa como el script compilado se ejecuta, analiza los datos que fluyen a través de él y aplica optimizaciones al código maquina basadas en ese conocimiento. Tipos de datos # Un valor en JavaScript siempre pertenece a un tipo de dato determinado. Por ejemplo, un string o un número.\nHay ocho tipos de datos básicos en JavaScript. En esta semana cubriremos la mayoría en general y posteriormente hablaremos de cada uno de ellos en detalle.\nPodemos almacenar un valor de cualquier tipo dentro de una variable. Por ejemplo, una variable puede contener en un momento un string y luego almacenar un número\n// no hay error let message = \u0026#34;hola\u0026#34;; message = 123456; Los lenguajes de programación que permiten estas cosas, como JavaScript, se denominan “dinámicamente tipados”, lo que significa que allí hay tipos de datos, pero las variables no están vinculadas rígidamente a ninguno de ellos.\nNumber # let n = 123; n = 12.345; El tipo number representa tanto números enteros como de punto flotante.\nHay muchas operaciones para números. Por ejemplo, multiplicación *, división /, suma +, resta -, y demás.\nString # Un string en JavaScript es una cadena de caracteres y debe colocarse entre comillas.\nlet str = \u0026#34;Hola\u0026#34;; let str2 = \u0026#39;Las comillas simples también están bien\u0026#39;; let phrase = `se puede incrustar otro ${str}`; En JavaScript, hay 3 tipos de comillas.\nComillas dobles: \u0026quot;Hola\u0026quot; . Comillas simples: 'Hola' . Backticks (comillas invertidas): `Hola` . Las comillas dobles y simples son comillas “sencillas” (es decir, funcionan igual). No hay diferencia entre ellas en JavaScript.\nLos backticks son comillas de “funcionalidad extendida”. Nos permiten incrustar variables y expresiones en una cadena de caracteres encerrándolas en ${...}, por ejemplo:\nlet name = \u0026#34;John\u0026#34;; // incrustar una variable alert( `Hola, *!*${name}*/!*!` ); // Hola, John! // incrustar una expresión alert( `el resultado es *!*${1 + 2}*/!*` ); // el resultado es 3 La expresión dentro de ${...} se evalúa y el resultado pasa a formar parte de la cadena. Podemos poner cualquier cosa ahí dentro: una variable como name, una expresión aritmética como 1 + 2, o algo más complejo.\nToma en cuenta que esto sólo se puede hacer con los backticks. ¡Las otras comillas no tienen esta capacidad de incrustación!\nalert( \u0026#34;el resultado es ${1 + 2}\u0026#34; ); // el resultado es ${1 + 2} // (las comillas dobles no hacen nada) Boolean (tipo lógico) # El tipo boolean tiene sólo dos valores posibles: true y false.\nEste tipo se utiliza comúnmente para almacenar valores de sí/no: true significa “sí, correcto, verdadero”, y false significa “no, incorrecto, falso”.\nPor ejemplo:\nlet nameFieldChecked = true; // sí, el campo name está marcado let ageFieldChecked = false; // no, el campo age no está marcado Los valores booleanos también son el resultado de comparaciones:\nlet isGreater = 4 \u0026gt; 1; alert( isGreater ); // verdadero (el resultado de la comparación es \u0026#34;sí\u0026#34;) Object y Symbol # El tipo object (objeto) es especial.\nTodos los demás tipos se llaman “primitivos” porque sus valores pueden contener una sola cosa (ya sea una cadena, un número o lo que sea). Por el contrario, los objetos se utilizan para almacenar colecciones de datos y entidades más complejas.\nSiendo así de importantes, los objetos merecen un trato especial. Nos ocuparemos de ellos más adelante después de aprender más sobre los primitivos.\nEl operador typeof # El operador typeof devuelve el tipo de dato del operando. Es útil cuando queremos procesar valores de diferentes tipos de forma diferente o simplemente queremos hacer una comprobación rápida.\nLa llamada a typeof x devuelve un string con el nombre del tipo:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert // \u0026#34;function\u0026#34; (3) Operadores Básicos # Conocemos varios operadores matemáticos porque nos los enseñaron en la escuela. Son cosas como la suma +, multiplicación *, resta -, etcétera.\nTérminos: “unario”, “binario”, “operando” # Antes de continuar, comprendamos la terminología común.\nUn operando – es a lo que se aplican los operadores. Por ejemplo, en la multiplicación de 5 * 2 hay dos operandos: el operando izquierdo es 5 y el operando derecho es 2. A veces, la gente los llama “argumentos” en lugar de “operandos”.\nUn operador es unario si tiene un solo operando. Por ejemplo, la negación unaria - invierte el signo de un número:\nlet x = 1; x = -x; alert( x ); // -1, se aplicó negación unaria Un operador es binario si tiene dos operandos. El mismo negativo también existe en forma binaria:\nlet x = 1, y = 3; alert( y - x ); // 2, binario negativo resta valores Formalmente, estamos hablando de dos operadores distintos: la negación unaria (un operando: revierte el símbolo) y la resta binaria (dos operandos: resta).\nMatemáticas # Están soportadas las siguientes operaciones:\nSuma +, Resta -, Multiplicación *, División /, Resto %, Exponenciación **. Los primeros cuatro son conocidos mientras que % y ** deben ser explicados más ampliamente.\nResto % # El operador resto %, a pesar de su apariencia, no está relacionado con porcentajes.\nEl resultado de a % b es el resto de la división entera de a por b.\nPor ejemplo:\nalert( 5 % 2 ); // 1, es el resto de 5 dividido por 2 alert( 8 % 3 ); // 2, es el resto de 8 dividido por 3 alert( 8 % 4 ); // 0, es el resto de 8 dividido por 4 Exponenciación ** # El operador exponenciación a ** b eleva a a la potencia de b.\nEn matemáticas de la escuela, lo escribimos como ab.\nPor ejemplo:\nalert( 2 ** 2 ); // 2² = 4 alert( 2 ** 3 ); // 2³ = 8 alert( 2 ** 4 ); // 2⁴ = 16 Matemáticamente, la exponenciación está definida para operadores no enteros también.\nPor ejemplo, la raíz cuadrada es el exponente ½:\nalert( 4 ** (1/2) ); // 2 (potencia de 1/2 es lo mismo que raíz cuadrada) alert( 8 ** (1/3) ); // 2 (potencia de 1/3 es lo mismo que raíz cúbica) Concatenación de cadenas con el binario + # Ahora veamos las características de los operadores de JavaScript que van más allá de la aritmética escolar.\nNormalmente el operador + suma números.\nPero si se aplica el + binario a una cadena, los une (concatena):\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; alert(s); // mystring Tenga presente que si uno de los operandos es una cadena, el otro es convertido a una cadena también.\nPor ejemplo:\nalert( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; alert( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; Vieron, no importa si el primer operando es una cadena o el segundo.\nAquí hay un ejemplo algo más complejo:\nalert(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; y no \u0026#34;221\u0026#34; Aquí, los operadores trabajan uno después de otro. El primer + suma dos números entonces devuelve 4, luego el siguiente + le agrega la cadena 1, así que se evalúa como 4 + '1' = 41.\nalert(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34;, no es \u0026#34;14\u0026#34; Aquí el primer operando es una cadena, el compilador trata los otros dos operandos como cadenas también. El 2 es concatenado a '1', entonces es como '1' + 2 = \u0026quot;12\u0026quot; y \u0026quot;12\u0026quot; + 2 = \u0026quot;122\u0026quot;.\nEl binario + es el único operador que soporta cadenas en esa forma. Otros operadores matemáticos trabajan solamente con números y siempre convierten sus operandos a números.\nPor ejemplo, resta y división:\nalert( 2 - \u0026#39;1\u0026#39; ); // 1 alert( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3 Operadores Lógicos # Hay cuatro operadores lógicos en JavaScript: || (O), \u0026amp;\u0026amp; (Y), ! (NO), ?? (Fusión de nulos). Aquí cubrimos los primeros tres, el operador ?? se verá más adelante.\nAunque sean llamados lógicos, pueden ser aplicados a valores de cualquier tipo, no solo booleanos. El resultado también puede ser de cualquier tipo.\nVeamos los detalles.\n|| (OR) # El operador OR se representa con dos símbolos de linea vertical:\nresult = a || b; En la programación clásica, el OR lógico esta pensado para manipular solo valores booleanos. Si cualquiera de sus argumentos es true, retorna true, de lo contrario retorna false.\nEn JavaScript, el operador es un poco más complicado y poderoso. Pero primero, veamos qué pasa con los valores booleanos.\nHay cuatro combinaciones lógicas posibles:\nalert(true || true); // true (verdadero) alert(false || true); // true alert(true || false); // true alert(false || false); // false (falso) Como podemos ver, el resultado es siempre true excepto cuando ambos operandos son false.\nSi un operando no es un booleano, se lo convierte a booleano para la evaluación.\nPor ejemplo, el número 1 es tratado como true, el número 0 como false:\nif (1 || 0) { // Funciona como if( true || false ) alert(\u0026#34;valor verdadero!\u0026#34;); } La mayoría de las veces, OR || es usado en una declaración if para probar si alguna de las condiciones dadas es true.\nPor ejemplo:\nlet hour = 9; *!* if (hour \u0026lt; 10 || hour \u0026gt; 18) { */!* alert( \u0026#39;La oficina esta cerrada.\u0026#39; ); } Podemos pasar mas condiciones:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert(\u0026#34;La oficina esta cerrada.\u0026#34;); // Es fin de semana } \u0026amp;\u0026amp; (AND) # El operador AND es representado con dos ampersands \u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; En la programación clásica, AND retorna true si ambos operandos son valores verdaderos y false en cualquier otro caso.\nalert(true \u0026amp;\u0026amp; true); // true alert(false \u0026amp;\u0026amp; true); // false alert(true \u0026amp;\u0026amp; false); // false alert(false \u0026amp;\u0026amp; false); // false Un ejemplo con if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert(\u0026#34;La hora es 12:30\u0026#34;); } Al igual que con OR, cualquier valor es permitido como operando de AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluado como true \u0026amp;\u0026amp; false alert( \u0026#34;no funcionará porque el resultado es un valor falso\u0026#34; ); } Más operadores en JS # Para seguir aprendiendo de estos operadores, mira el siguiente video donde reforzarás el conocimiento sobre los operadores que acabamos de ver y aprenderás algunos más que son comuness:\n","date":"23 enero 2023","permalink":"/platform/levels/level1_2023/dia2/introjs/","section":"Levels","summary":"Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.","title":"JavaScript"},{"content":"Que es CSS? # Como HTML, CSS (Cascading Style Sheets) u Hojas de estilo en cascada en español, no es realmente un lenguaje de programación, tampoco es un lenguaje de marcado. Es un lenguaje de hojas de estilo, es decir, te permite aplicar estilos de manera selectiva a elementos en documentos HTML. Por ejemplo, para seleccionar todos los elementos de párrafo en una página HTML y volver el texto dentro de ellos de color rojo, has de escribir este CSS:\nCSS nos ayuda a generar un gran cambio en nuestras páginas web y su sintáxis es distintia a HTML.\nSintáxis # El selector nos ayuda a identificar a que elemento(s) se le aplicarán los estilos. El bloque de declaración es donde se escriben los estilos, tener en cuenta que se inicia y culmina con llaves {}. La declaración es donde ajustamos una cosa de el/los elemento(s), se compone por la propiedad que representa lo que vamos a ajustar y el valor que representa como lo vamos a cambiar (Cambiaremos los elementos p, le cambiaremos el color a rojo).\nDonde escribir CSS # Hay 3 lugares o formas de escribir CSS: inline, internal y external (en línea, interno y externo).\nInline # dentro de las etiquetas de apertura HTML podemos añadir el atributo style y como parte de su valor, podemos indicar las declaraciones CSS separadas por ;\nInternal # dentro de la \u0026lt;head\u0026gt; podemos insertar la etiqueta \u0026lt;style\u0026gt; donde podremos ingresar nuestro codigo css. Esto trae la ventaja de usar los selectores a diferencia de los estilos inline, que se aplican a cada elemento.\nExternal # External hace referencia a escribir CSS en un archivo aparte donde solo irá este código. la forma de escribir aquí sigue siendo en bloque sin la necesidad de una etiqueta \u0026lt;style\u0026gt;, aunque necesitamos enlazar el archivo HTML con este, por medio de una etiqueta link dentro del head similar a esta:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./css/main.css\u0026#34;\u0026gt; Selectores CSS # Un selector nos permite asociar una o más declaraciones a uno o más elementos de la página.\nSelectores Básicos # Podemos apuntar a ese elemento usando este selector p, que apunta a todos los elementos que usan la etiqueta p en la página. Una regla CSS simple para lograr lo que queremos es:\nCada etiqueta HTML tiene un selector correspondiente, por ejemplo: div, span, img.\nSi un selector coincide con varios elementos, todos los elementos de la página se verán afectados por el cambio.\nLos elementos HTML tienen 2 atributos que se utilizan con mucha frecuencia en CSS para asociar el estilo a un elemento específico de la página: class y id.\nHay una gran diferencia entre esos dos: dentro de un documento HTML puede repetir el mismo valor class en varios elementos, pero solo puede usar id una vez. Asimismo, usando clases puedes seleccionar un elemento con 2 o más nombres de clase específicos, algo que no es posible usando ids.\nLas clases se identifican mediante el símbolo \u0026lsquo;.\u0026rsquo; , mientras que los identificadores utilizan el símbolo \u0026lsquo;#\u0026rsquo; (numeral, hash tag).\nEjemplo usando una clase:\n\u0026lt;!-- HTML --\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;!--Usamos el atributo class --\u0026gt; /* CSS */ .dog-name { color: yellow; } Ejemplo usando un ID:\n\u0026lt;!-- HTML --\u0026gt; \u0026lt;p id=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;!--Usamos el atributo id --\u0026gt; /* CSS */ #dog-name { color: yellow; } Combinando Selectores # Hasta ahora hemos visto cómo apuntar a un elemento, una clase o una identificación. Introduzcamos selectores más potentes.\nSeleccionar Elemento con clase o ID # Puede apuntar a un elemento específico que tenga una clase o una identificación adjunta.\nEjemplo usando una clase:\n\u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Mauricio\u0026lt;/p\u0026gt; p.dog-name { /* Solo seleccionamos el elemento p que tiene la clase dog-name */ color: yellow; } ¿Por qué querría hacer eso, si la clase o la identificación ya proporciona una forma de apuntar a ese elemento? Puede que tengas que hacer eso para tener más especificidad. Veremos qué significa eso más tarde.\nApuntando a múltiples clases # Puedes apuntar a un elemento con una clase específica usando .class-name, como vio anteriormente. Puedes apuntar a un elemento con 2 (o más) clases combinando los nombres de clase separados por un punto, sin espacios.\nEjemplo:\n\u0026lt;p class=\u0026#34;dog-name roger\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Mauricio\u0026lt;/p\u0026gt; .dog-name.roger { /* Solo seleccionamos el elemento que tiene la clase dog-name y la clase roger */ color: yellow; } Combinando clases e id\u0026rsquo;s # De la misma manera, puede combinar una clase y una identificación.\nEjemplo:\n\u0026lt;p class=\u0026#34;dog-name\u0026#34; id=\u0026#34;roger\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34; id=\u0026#34;mauricio\u0026#34;\u0026gt;Mauricio\u0026lt;/p\u0026gt; .dog-name#roger { /* Seleccionamos el elemento que tiene la clase dog-name y el id roger */ color: yellow; } Especificidad # Lo que acabamos de ver tiene un propósito importante y esto es para que evitemos aplicar estilos a elementos que no deseamos, a medida que nuestra página crezca, comenzaremos a usar estas combinaciones para tener un mejor orden en los estilos que aplicamos. Sin embargo al aplicar estos selectores, la forma en la que se aplica los estilos puede romper el orden en cascada que conocemos por un concepto llamado especificidad.\nPara entender ese concepto mira el siguiente video donde entendemos que es la especificidad y como afecta los estilos que aplicamos a los elementos.\nAquí te dejo una tabla donde podrás ver la especificidad entre elementos y selectores:\nMás Selectores # Hay muchas más formas de combinar los selectores, aquí tienes una lista con más selectores, puedes apoyarte en el traductor de google para entender algunos terminos que vienen en ingles en las siguientes imágenes:\n","date":"23 enero 2023","permalink":"/platform/levels/level1_2023/dia2/estiloscss/","section":"Levels","summary":"Que es CSS?","title":"Estilos base de CSS y Selectores"},{"content":"Estamos trabajando para añadir información en esta seccion 😀\n","date":"19 enero 2023","permalink":"/platform/tags/","section":"Tags","summary":"Estamos trabajando para añadir información en esta seccion 😀","title":"Tags"},{"content":"Estamos trabajando para añadir información en esta seccion 😀\n","date":"19 enero 2023","permalink":"/platform/categories/","section":"Categories","summary":"Estamos trabajando para añadir información en esta seccion 😀","title":"Categories"},{"content":"Organizar HTML # Durante el proceso de inducción aprendiste las bases de HTML, hoy vamos a repasar algunas cosas de este lenguaje.\nAnatomía HTML # Anatomía HTML\nLos elementos HTML que siempre encontrarás luego de \u0026lt;!DOCTYPE html\u0026gt; son:\n\u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;: El elemento \u0026lt;html\u0026gt; envuelve todo el contenido de la página. A veces se le conoce como el elemento raíz. \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;: Es la cabecera de la página y no la verá el cliente. Aquí pondrás información e instrucciones de tu página que sólo deberá interpretar el navegador. \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;: las etiquetas meta sirven para dar diferentes instrucciones al navegador, esta configuración en concreto le dice al navegador que tu página usará la configuración de caracteres UTF-8 que incluye la mayoría de caracteres de todos los lenguajes humanos escritos. Esta etiqueta va dentro de la etiqueta \u0026lt;head\u0026gt;. \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt;: Aquí se establece el título de la página, este aparecerá en la pestaña del navegador. También se utiliza para describir la página. Esta etiqueta va dentro de la etiqueta \u0026lt;head\u0026gt;. \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;: El elemento \u0026lt;body\u0026gt; contiene todo el contenido que quieres mostrar a los usuarios cuando visitan tu página, ya sea texto, imágenes, vídeos, juegos, pistas de audio reproducibles o cualquier otra cosa. index.html # Cuando trabajamos con archivos HTML debemos comenzar teniendo en cuenta el nombre de nuestro archivo. como convención, cuando se crea un sitio web, el archivo principal se llama index.html . Esto es porque los navegadores por defecto, al ingresar en una dirección web, buscan el archivo HTML que tenga este nombre, y será la primera página que se visita.\nLos demás archivos HTML pueden tener otro nombre según sea necesario.\nAsimismo, si tenemos archivos HTML dentro de una carpeta, debemos ponerle de nombre index.html al archivo HTML principal de esa carpeta.\nIndentación # Cuando tenemos nuestros archivos HTML, habrás notado que algunos elementos están más a la derecha que otros:\nEn este ejemplo, los elementos \u0026lt;meta\u0026gt; y \u0026lt;title\u0026gt; se encuentran indentados. Es decir, están separados del margen izquierdo por una tabulación haciendo la lectura más sencilla. Con esto entendemos que los elementos \u0026lt;meta\u0026gt; y \u0026lt;title\u0026gt; son elementos \u0026ldquo;hijo\u0026rdquo; del elemento \u0026lt;head\u0026gt;.\nEsta estructura ayuda a la legibilidad del código y es de uso común en los lenguajes de programación. Te recomendamos seguir esta buena práctica a fin de que tu código sea legible y evitar que se convierta en un caos.\nCSS3: Box Model # Ya que entendemos las cosas básicas de HTML y CSS debemos tener presente lo sigiuente: Cada elemento en el diseño web es una caja rectangular. Este punto es importante para comprender como trabajamos con CSS y lograr el diseño que queremos lgrar. Si bien es cierto podemos posicionar los elementos y darles estilos con CSS, es importante que entendamos como funciona esa caja en sí.\nEl Box model (modelo de caja) explica el tamaño de los elementos en función de algunas propiedades de CSS.\nDesde el interior hacia el exterior, tenemos:\nContent (contenido) padding (relleno) border (borde o frontera) margin (margen) La mejor manera de visualizar el modelo de caja es abrir el navegador DevTools y comprobar cómo se muestra:\nAquí puedes ver cómo Firefox me dice las propiedades de un elemento span que destaqué. Hice clic con el botón derecho en él, presioné Inspeccionar elemento y fui al panel Diseño de DevTools.\nMira, el espacio azul claro es el área de content. Rodeándolo está el padding, luego el border y finalmente el margin. De forma predeterminada, si estableces un ancho (o alto) en el elemento, se aplicará al área de content . Todos los cálculos de padding, border y margin se realizan fuera del valor, por lo que debes tener esto en cuenta cuando realices el cálculo. Se puede cambiar este comportamiento utilizando Box-sizing (puedes buscar más información de esta propiedad aqui).\nEntender este punto, te puede ayudar a realizar diseño con CSS de manera más sencilla, por lo que mira el siguiente video y toma nota entre las diferencias entre cada una de las partes del box model:\nDisplay # Ahora que entiendes un poco mejor lo que es el box model, es importante que sepas que las cajas en CSS pueden comportarse de manera distinta de acuerdo a una propiedad conocida como display. Esta propiedad nos indica la forma en la que el elemento será representado en el navegador y usar alguno de estos display, alterará considerablemente el comportamiento del navegador con el elemento y sus hijos.\nEn esta sección analizaremos los más importantes no cubiertos en otra parte:\nblock inline inline-block none en el siguiente video aprenderás la diferencia entre cada uno de estos y como afectan al modelo de caja:\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/dia1/html/","section":"Levels","summary":"Organizar HTML # Durante el proceso de inducción aprendiste las bases de HTML, hoy vamos a repasar algunas cosas de este lenguaje.","title":"HTML 5 y CSS3"},{"content":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás. Toma apuntes de lo que consideres mas relevante y anota los temas que sean más complicados de entender para que puedas resolver tus dudas posteriormente. Sin mas rodeos, comencemos 😉.\nFundamentos de la Programación # La programación en pocas palabras, es darle datos e instrucciones a una computadora para que procese esos datos siguiendo las instrucciones que le dimos para que nos devuelva un resultado. ¿Y para qué? para resolver problemas de nuestra vida como hacer operaciones matemáticas, sacar estadísticas, automatizar procesos, etcétera.\nPero esos problemas se pueden resolver de diferentes maneras, algunas más rápidas y eficientes y otras no tanto. Pero todas con el fin de encontrar la solución al problema.\n¿Qué es la Programación? # Es un término común que se puede describir según la Real Academia de la Lengua como \u0026ldquo;Acción o efecto de programar\u0026rdquo;. ¿Y programar? se define como Idear y ordenar las acciones necesarias para realizar un proyecto.\nTodo esto en términos generales, no se refiere específicamente a la programación de lenguajes informáticos, pero nos da una idea de lo que es.\nPara ejecutar lo que el usuario desea hacer en su computadora, o bien para resolver un problema específico, este precisa buscar un software que realice o ejecute con exactitud la tarea que se ha planteado o elaborar y desarrollar (escribir) un programa que la realice. El trabajo de elaboración de un programa se denomina “programación”. Pero la programación no es solo el trabajo de escritura del código, sino todo un conjunto de tareas que se deben cumplir, a fin de que el código que se escribió resulte correcto, robusto, y cumpla con el objetivo o los objetivos para los que fue creado.\nLas afirmaciones que se derivan de lo anterior son varias:\nConocer las herramientas, los formalismos y los métodos para transformar un problema en un programa escrito en un lenguaje (que posiblemente no será el lenguaje máquina), y para qué dicho programa pueda ser transformado en un código ejecutable.\nSaber transformar el problema inicial en un algoritmo y luego en un programa.\nLa primera afirmación es genérica y se considera para varias categorías de problemas para resolver. Por su parte, la segunda es específica de un problema determinado que se tiene que resolver, para lo cual existen diversas metodologías específicas de resolución para este tipo de problemas.\nPara los casos de problemas muy generales, en ocasiones existen métodos conocidos que solo se adaptan a un problema en particular. El método es, por lo general, un algoritmo o una técnica de programación.\nDesarrollo Web # Web Developing ¿Y el Desarrollo Web?\nLa aplicación de la programación y la lógica son muchos: Inteligencia Artificial, Administración de base de datos, Desarrollo de videojuegos, Desarrollo de Sistemas operativos, etc.\nEntre todas estas ramas encontramos el Desarrollo Web.\nDesarrollo web es un término que define la creación de sitios web para Internet o una intranet.\nEl Programador Web es un profesional que trabaja con desarrolladores de páginas web, softwares, operadores de sistemas (SysOps) que ejecuta y/o desarrollar las versiones e implementaciones de códigos. El puesto requiere de personas que también posean soft skills o habilidades blandas relevantes que impacten positivamente el control de calidad de las pruebas y los equipos de operaciones; además de fomentar un entorno colaborativo.\nDentro del Desarrollo Web encontramos distintos roles:\nDesarrollador web front-end es el profesional responsable de proyectar y construir la interfaz del usuario en un proyecto web. Es quien cuida de la visualización y la interfaz gráfica.\nDesarrollador web back-end Son los que trabajan con aplicaciones haciendo código que sólo el servidor entenderá.\nDesarrollador web full-stack - Por supuesto que nada impide que un desarrollador trabaje en ambas áreas. Por eso el término full-stack se refiere a que el profesional que trabaja tanto con el back-end como el front-end.\nAquí te vamos a enseñar lo necesario para que tengas las habilidades de un desarrollador Full-Stack así que ¡preparate para aprender creando! 😁.\nComenzaremos con las habilidades de un desarrollador Front-end y seguiremos con el Back-end.\nLas primeras tecnologías que aprenderás son: HTML5, CSS3 y JavaScript. Los dos primeros tienen como objetivo darle estructura, contenido y diseño a una página web, y el último se encarga de la lógica que hay detrás de una página.\nPáginas web estáticas vs Dinámicas # Al empezar en el mundo del desarrollo web, seguro te estarás preguntando ¿Cómo inicio a hacer páginas web? Veamos primero las dos diferencias entre estos productos web.\nPáginas Estáticas # Lo primero, hay páginas estáticas y páginas dinámicas. Las páginas estáticas van a ser todos los productos web o todas las páginas que van a tener pura información para consumir, ya sea texto e imágenes, y que esta información no va a cambiar. Siempre va a ser la misma. Por ejemplo, algún blog post, si te metes algún blog de alguien, siempre vas a poder ver los blogs de esa persona.\nEsta información raramente va a cambiar. Posiblemente van a llegar personas nuevas al equipo o se van a ir personas o van a agregar cierta información distinta de la empresa o de los productos que tienen, pero gran parte de la información se va a quedar ahí de forma estática por mucho tiempo, y si tú generas esta página, posiblemente te vayan a contactar meses después para poderte decir como \u0026ldquo;oye, queremos hacer este cambio, ahora queremos agregar nuevas fotos o una nueva dirección de donde estamos nosotros\u0026rdquo;. O \u0026ldquo;hay 2 miembros nuevos del equipo, creemos que agregue su información y su foto\u0026rdquo;. Pero estas páginas siguen siendo estáticas porque la información perse nunca va a cambiar. Si tú entras, hoy vas a ver lo mismo. Si entras mañana, no va a haber algún tipo de cambio.\nLo más importante es que estas páginas no están conectadas a un servidor o a una base de datos, no necesitas generar interacción con la base de Datos porque no hay algo que generes este cambio del lado del cliente. El cliente desde el navegador no tendrá alguna interacción que le permita cambiar información de la página web, no tendrá algún login, etc.\nEjemplo de página estática # Las Landing page son un buen ejemplo de páginas estáticas. Como en este caso. La información que verán los clientes siempre es la misma y no cambiará a menos que se solicite. No hay opción de hacer login y esto es solo informativo.\nEste tipo de páginas no es menos importante, simplemente tiene un objetivo distinto a una página dinámica y son más sencillas de construir.\nPáginas Dinámicas # Las páginas dinámicas, también conocidas como web Apps, ya dejan de ser páginas y se convierten más en aplicaciones por todas las cosas que vas a poder hacer con estas mismas.\nEstas sí están conectadas a una base de Datos, por lo que el usuario, o sea nosotros a través del navegador, si podemos generar una interacción con la página o con la aplicación. Ahora se tiene que guardar cierta información o estado de lo que estemos haciendo, se esperaría poder tener un login para yo tener mi cuenta y poder guardar información. Se esperaría poder interactuar ya sea con productos si quiero comprar algo, si es que estoy viendo algo de mis seguidores en las redes, o si quiero ver a las personas que sigo.\nEjemplo de página dinámica # En páginas como Twitter, tú si puedes interactuar. Puedes dejarla de esa forma y dentro de unos 15 minutos si actualizas, la información será distinta. Esta página está en comunicación con el servidor para traer los nuevos cambios según el usuario lo solicite. La información que ves allí es específica para ti, y otro usuario podría ver twits distintos.\nRecursos Para comenzar # Antes de continuar, debemos asegurarnos de tener los siguientes programas que formarán parte de este curso:\nVSCode: Este es el editor de código que estaremos utilizando a lo largo del curso, si bien es cierto que existen varios editores y puedes usar el que te sea mas cómodo, te recomendamos este para que todos estemos trabajando en las mismas situaciones y sea más fácil poder interactuar. En caso aun no lo tengas, puedes descargarlo desde el siguiente enlace:\nDownload VS Code\nNavegadores: Es probable que ya cuentes con algunos de estos, sin embargo cuando trabajamos en desarrollo web, es importante contar con diferentes opciones ya que nuestra página web puede comportarse de manera diferente en cada uno de estos por los distintos motores de interpretación que utilizan. Algunos de los navegadores que te recomendamos tener para tus pruebas son:\nBrave Chrome Edge Firefox En cada uno de los anteriores links, tendrás una opción de descarga.\nSi tienes dificultades para instalar alguno de los recursos mencionados, puedes postear tu error o duda en el chat grupal donde podremos ayudarte 😀\nEnlaces # Al terminar la lectura anterior, revisa los siguientes artículos donde encontrarás más información de los temas:\nPáginas Estaticas vs Dinámicas - Open Webinars\n¿Qué es desarrollo web? - Articulo Tekla\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/dia1/intro/","section":"Levels","summary":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás.","title":"Introducción al Desarrollo Web"},{"content":"Introducción al Desarrollo Web # Aqui encontrarás la información que se usará dentro del Nivel 1.\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/","section":"Levels","summary":"Introducción al Desarrollo Web # Aqui encontrarás la información que se usará dentro del Nivel 1.","title":"Nivel 1 - Intro al desarrollo web"},{"content":"Día 5 : Repaso JavaScript y Primer Proyecto # Luego de haber aprendido las bases de HTML, CSS y JavaScript, hoy repasaremos algunos conceptos de JS y realizaremos un pequeño proyecto donde aplicaremos el conocimiento adquirido. El siguiente tutorial creado por el canal de youtube deivchoi, repasarás las bases de JS y crearás una calculadora aplicando las bases de este lenguaje. Sigue con atención las instrucciones y al finalizar, preparate para el día de evaluación repasando los conceptos que consideres necesarios.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_5/","section":"Levels","summary":"Día 5 : Repaso JavaScript y Primer Proyecto # Luego de haber aprendido las bases de HTML, CSS y JavaScript, hoy repasaremos algunos conceptos de JS y realizaremos un pequeño proyecto donde aplicaremos el conocimiento adquirido.","title":"Día 5"},{"content":"Día 4 : Más estilos CSS # Hoy profundizaremos en los estilos de CSS. El siguiente video creado por el canal de youtube Hola Mundo explican de manera clara más estilos que debes tener en cuenta al momento de desarrollar para la web. Antes de ello, te menciono 3 formas comunes de escribir estilos CSS: inline, internal y external.\nInline # Son los estilos CSS que se indican dentro del atributo style de la etiqueta HTML\n\u0026lt;p style=\u0026#34;color: red;\u0026#34;\u0026gt;Hola mundo\u0026lt;/p\u0026gt; Internal # Son los estilos CSS que se colocan dentro de la etiqueta \u0026lt;style\u0026gt; ubicada dentro del head de la estructura HTML.\n\u0026lt;head\u0026gt; ... \u0026lt;style\u0026gt; p { color: red; } \u0026lt;/style\u0026gt; ... \u0026lt;/head\u0026gt; External # La forma de escribir estos estilos es similar a Internal con la diferencia que se escriben dentro de un archivo .css aparte, el cual se une al archivo HTML por medio de la etiqueta \u0026lt;link\u0026gt;, de esta forma, los estilos serán aplicados aunque sean dos archivos distintos.\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;!-- Dentro del atributo `href` indicamos la ruta del archivo CSS--\u0026gt; CSS con Hola Mundo # ","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_4/","section":"Levels","summary":"Día 4 : Más estilos CSS # Hoy profundizaremos en los estilos de CSS.","title":"Día 4"},{"content":"Día 3 : Tipos de Datos y Operadores # En JavaScript trabajamos con distintos valores, cada valor pertenece a un tipo de dato determinado. Por ejemplo, un string o un número. En JavaScript hay ocho tipos de datos básicos. En esta sección aprenderemos sobre algunos de ellos.\nRecuerda que podemos almacenar cualquier tipo de dato en una variable, incluso podemos reasignar el valor de una variable con un tipo de dato distinto:\n// Sin error let number = \u0026#34;3\u0026#34;; // variable que contiene un string number = 6; // cambiamos el valor a un dato tipo number Cadenas de Texto (Strings) # Números # Booleanos # Tipos de Operadores # Hasta este punto, hemos visto los tipos de datos más básicos dentro del lenguaje, conocidos como primitivos. Existen otros tipos de datos llamados compuestos como: Objetos, Arrays, Functions y Classes; los cuales por ahora no cubriremos. Con los tipos de datos primitivos tenemos una base para entender más conceptos de JavaScript.\nCondicionales # Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.\nPara esto podemos usar la sentencia if(...) la cual evalúa la condicion entre los paréntesis, y si el resultado es true ejecuta un bloque de código.\nPor ejemplo:\nif (year == 2015) alert( \u0026#39;¡Estás en lo cierto!\u0026#39; ); Aquí la condición es de igualdad (year == 2015), en caso sea true se ejecutará la alerta, pero podría ser más compleja.\nSi quisiéramos ejecutar más de una sentencia, debemos encerrar nuestro bloque de código entre llaves:\nif (year == 2015) { alert( \u0026#34;¡Es Correcto!\u0026#34; ); alert( \u0026#34;¡Eres muy inteligente!\u0026#34; ); } Se recomienda siempre encerrar nuestro bloque de código en llaves {} siempre que se utilice la sentencia if, inclusive si solo se va a ejecutar una sola sentencia en este caso. Hacer eso mejora la legibilidad.\nPara aprender más de este concepto, mira el siguiente video. Por el momento solo es importante la seccion donde se menciona el uso de la condicional if, else y else if. La sección sobre la condición switch no es necesaria por el momento.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_3/","section":"Levels","summary":"Día 3 : Tipos de Datos y Operadores # En JavaScript trabajamos con distintos valores, cada valor pertenece a un tipo de dato determinado.","title":"Día 3"},{"content":" Temas de la semana 📖 Día 2 : JavaScript # Introducción a JavaScript # JavaScript es actualmente el lenguaje de programación más utilizado dentro del desarrollo web, su popularidad ha crecido a lo largo de los años hasta posicionarlo como uno de los lenguajes mas queridos, en el siguiente video aprenderás un poco más de sus origenes y su utilidad.\nGramática y Caracteristicas del lenguaje # Todo lenguaje de programación cuenta con una forma de escribir en particular, aunque muchos de los lenguajes de programación guardan similitudes, también tienen diferencias que es importante que conozcamos. Así como HTML tiene una forma especial de escribir, JavaScript tambien cuenta con una sintáxis especial y una serie de reglas que aprenderemos antes que empecemos a escribir código de manera apresurada.\nVariables dentro de JavaScript: Var vs Let # Teniendo ya una noción mas clara de lo que es Javascript, hablemos de la unidad de almacenamiento mas comun en este lenguaje, las variables.\nConstantes y otros tipos de datos # En JavaScript tambien existe un tipo de dato similar a las variables llamado constante, en el siguiente video aprenderás de este dato y haremos un primer vistazo a otros tipos de dato más complejos. Respecto a estos ultimos, es importante que conozcas de su existencia, sin embargo para esta parte del proceso no es necesario que aprendas a manejarlos, pero si que entiendas a nivel teorico sus funciones basicas.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/dia_2/","section":"Levels","summary":"Temas de la semana 📖 Día 2 : JavaScript # Introducción a JavaScript # JavaScript es actualmente el lenguaje de programación más utilizado dentro del desarrollo web, su popularidad ha crecido a lo largo de los años hasta posicionarlo como uno de los lenguajes mas queridos, en el siguiente video aprenderás un poco más de sus origenes y su utilidad.","title":"Día 2"},{"content":" Temas de la semana 📖 Día 1 : Introducción a HTML y CSS # Al comenzar tu camino como Web Developer (Desarrollador Web) vas a tener que aprender varias tecnologías. vamos a empezar por la base de la web.\nHTML # HTML (Lenguaje de Marcas de Hipertexto, del inglés HyperText Markup Language) es el componente más básico de la Web. Define el significado y la estructura del contenido web. Además de HTML, generalmente se utilizan otras tecnologías para describir la apariencia/presentación de una página web (CSS) o la funcionalidad/comportamiento (JavaScript).\n\u0026ldquo;Hipertexto\u0026rdquo; hace referencia a los enlaces que conectan páginas web entre sí, ya sea dentro de un único sitio web o entre sitios web. Los enlaces son un aspecto fundamental de la Web. Al subir contenido a Internet y vincularlo a las páginas creadas por otras personas, te conviertes en un participante activo en la «World Wide Web» (Red Informática Mundial).\nHTML ha ido evolucionando a través del tiempo y hoy nos encontramos en la versión 5 (HTML5). Este lenguaje se basa en una estructura de etiquetas, las cuales tienen la siguiente forma:\nEs más facil aprender esto haciendo, así que dejemos por un momento la teoría.\nKhan Academy : HTML\nIngresa al enlace de arriba e intenta completar las lecciónes antes de pasar al siguiente tutorial.\nInstalación de VS code # Antes de continuar con el siguiente apartado, es importante que puedas instalar un programa en tu pc para que escribir código sea mas facil, este es VS code, sigue las instrucciones de este video para que lo instales 😄\nMás etiquetas de HTML # Una vez que realizaste el tutorial de Khan academy, te recomiendo seguir con el tutorial que verás a continuación.\nHTML es la base de las páginas web, tener una idea de lo que representa y como usarlo de manera básica, te ayudará a que en un futuro puedas construir páginas web modernas y prácticas.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/dia_1/","section":"Levels","summary":"Temas de la semana 📖 Día 1 : Introducción a HTML y CSS # Al comenzar tu camino como Web Developer (Desarrollador Web) vas a tener que aprender varias tecnologías.","title":"Día 1"},{"content":"Seccion creada para insertar la información del Nivel inductivo.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/","section":"Levels","summary":"This is an example of summary","title":"Induccion a Nivel 0"},{"content":"Una guia para la vida # Este es un sitio de prueba\nme interesa aprender a usar markdown to create nuevos sitios\n","date":"15 diciembre 2022","permalink":"/platform/contacto/","section":"","summary":"Una guia para la vida # Este es un sitio de prueba","title":"Contacto"},{"content":"Induccion a la Programación # Instrucciones para postular al programa de Desarrollo Web en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollo Web que ofrece la Fundacion FUNVAL. Para lograr esto te explicaré brevemente como funciona el proceso de inducción y el material que usarás.\nAcerca del proceso # Durante el proceso de inducción, estarás estudiando los principios básicos de la programación. Para desarrollar páginas web, se debe escribir en lenguajes especiales para esta labor. Los más usados en el desarrollo web son : HTML5, CSS3 y JavaScript, este ultimo sirve para implementar la lógica de programación dentro de la web, mientras los anteriores sirven tanto para el maquetaado como para el diseño(estilos) respectivamente.\nEste proceso está estructurado para funcionar de la siguiente forma:\n5 días de aprendizaje 3 horas de estudio en cada día (15 horas en total) un sexto día de evaluación Acerca del material # Durante cada día de estudio, tendrás material para que puedas aprender las bases de estos lenguajes, si bien es cierto que tendrás 3 horas cada día, puedes dedicar mas tiempo en caso consideres necesario profundizar o practicar sobre un tema en particular.\nEl material disponible, en su mayoría es de recursos externos (páginas web, videos, blogs, etc.). La progrmación en la actualidad cuenta con una comunidad muy grande, quienes desean que más personas aprendan sobre este mundo, sin embargo hay tanta información que es dificil en ocasiones indagar por nuestra propia cuenta, aquí te daremos el material necesario para que aprendas las bases en el tiempo previsto, el cual ha sido previamente revisado y con el que sabemos, podrás aprender estas tecnologías de manera práctica y sencilla.\nAsimismo te invitamos a tomar nota de lo que vayas aprendiendo para que puedas repasarlo luego de las clase 😄\nAcerca de la evaluación # Luego de aprender lo necesario, necesitamos poner a prueba tu conocimiento para evaluar que cuentas con el conocimiento minimo antes de empezar el curso, por lo que la evaluación de Programación tendrá un puntaje de 50 pts sobre promedio final, y se enfoncará en teoría de lo aprendido. El resto de puntos será distribuido entre Excel (34 pts) y Typing (16 pts) podiendo obtener un total de 100pts. Es necesario que logres un mínimo de 80pts sobre promedio final para lograr ingresar al programa.\nDesde Funval te deseamos los mejores éxitos en este proceso, si tienes dudas sobre alguno de los puntos mencionados o del material que encontrarás, puedes contactar a tu reclutador.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/temario/","section":"Levels","summary":"Induccion a la Programación # Instrucciones para postular al programa de Desarrollo Web en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollo Web que ofrece la Fundacion FUNVAL.","title":"Temario"},{"content":"Finding a new way to build pages prueba about # ","date":"1 enero 0001","permalink":"/platform/about/","section":"","summary":"Finding a new way to build pages prueba about # ","title":""},{"content":"Blog de Funval # Estamos trabajando para añadir información en esta seccion 😀\n","date":"1 enero 0001","permalink":"/platform/posts/","section":"","summary":"Blog de Funval # Estamos trabajando para añadir información en esta seccion 😀","title":""}]