[{"content":"Introduction to Funval # ","date":"29 enero 2023","permalink":"/platform/","section":"","summary":"Introduction to Funval # ","title":""},{"content":"Hoy continuaremos aprendiendo los conceptos que estabamos viendo ayer sobre el manejo y manipulación.\nPresta atención al siguiente tutorial y toma nota de las dudas o cosas nuevas que aprendas:\n","date":"29 enero 2023","permalink":"/platform/levels/level1_2023/dia14/dom/","section":"Levels","summary":"Hoy continuaremos aprendiendo los conceptos que estabamos viendo ayer sobre el manejo y manipulación.","title":"DOM"},{"content":"","date":"29 enero 2023","permalink":"/platform/levels/","section":"Levels","summary":"","title":"Levels"},{"content":"Hoy vamos a reforzar los conceptos de CSS.\nEl siguiente tutorial ya lo vimos antes, hoy lo repasaremos para reforzar los conceptos aprendidos y quizas ver algunos que no notamos antes:\n","date":"29 enero 2023","permalink":"/platform/levels/level1_2023/dia14/css/","section":"Levels","summary":"Hoy vamos a reforzar los conceptos de CSS.","title":"CSS"},{"content":"Durante estos ultimos días del nivel, vamos a enfocarnos en poder manipular los elementos del DOM, si bien es cierto hemos podido ver algunos ejemplos durante las clases, el enfoque de estos días será entender como se realizar este proceso y como podemos manipular, alterar contenidos de los nodos o tambien añadir o eliminar nodos del DOM.\nEn el siguiente video veremos más a detalle este proceso:\n","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia13/dom/","section":"Levels","summary":"Durante estos ultimos días del nivel, vamos a enfocarnos en poder manipular los elementos del DOM, si bien es cierto hemos podido ver algunos ejemplos durante las clases, el enfoque de estos días será entender como se realizar este proceso y como podemos manipular, alterar contenidos de los nodos o tambien añadir o eliminar nodos del DOM.","title":"DOM"},{"content":"Ayer aprendimos que es grid y cuales son sus diferencias y ventajas sobre display flex. Estos dos conceptos son importantes para la creación de sitios web responsivos (se pueden adaptar a los distintos tamaños de pantalla).\nHoy vamos a repasar sobre estos conceptos y aprender algunos más, en el siguiente tutorial aprendrás más sobre este concepto de CSS:\nDentro del portal CSS Tricks podemos encontrar una guía completa y detallada de las propiedades de grid. Si bien la página está en inglés, puedes verla en español en tu navegador Chrome o Edge dando click derecho en la página y seleccionando la opcion \u0026ldquo;Traducir a Español\u0026rdquo;:\nGRID - CSS-Tricks\n","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia13/grid/","section":"Levels","summary":"Ayer aprendimos que es grid y cuales son sus diferencias y ventajas sobre display flex.","title":"Grid"},{"content":"Los Arrays y los Objetos son dos de los tipos de datos fundamentales en JavaScript. Los Arrays son una colección ordenada de elementos, mientras que los Objetos son una colección de pares clave-valor.\nLos Arrays se definen utilizando corchetes […] y cada elemento se separa con una coma. Por ejemplo, se puede crear un Array de números como este:\nconst numbers = [1, 2, 3, 4, 5]; Los Arrays en JavaScript proporcionan métodos para manipular sus elementos, como push, pop, shift, unshift, entre otros.\nLos Objetos se definen utilizando llaves {…} y cada par clave-valor se separa con una coma. Por ejemplo, se puede crear un objeto persona así:\nconst person = { name: \u0026#39;John\u0026#39;, age: 30, job: \u0026#39;Developer\u0026#39; }; Los objetos en JavaScript proporcionan métodos para acceder y modificar sus propiedades, como Object.keys, Object.values, entre otros.\nAmbos tipos de datos son muy útiles en la programación JavaScript ya que permiten almacenar y acceder a una gran cantidad de datos de manera estructurada y organizada.\nRepaso de Array y Objetos # Hoy repasaremos como funcionan estos dos tipos de datos y las ventajas que aportan al lenguaje JavaScript:\n","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia12/arr_obj/","section":"Levels","summary":"Los Arrays y los Objetos son dos de los tipos de datos fundamentales en JavaScript.","title":"Array y Objetos"},{"content":"CSS Grid Layout es un sistema de diseño de cuadrícula para crear diseños de página en HTML.\nCon CSS Grid, se pueden crear diseños de cuadrícula complejos con facilidad, como diseños de dos o más columnas, diseños de cuadrícula anidados y diseños de rejilla adaptativos.\nUna de las principales ventajas de CSS Grid es que permite crear diseños de cuadrícula de forma independiente de los elementos de HTML. Esto significa que puede crear un diseño de cuadrícula y luego colocar elementos en él, independientemente de su estructura HTML.\nCSS Grid también proporciona una serie de herramientas para trabajar con elementos de cuadrícula, como la capacidad de especificar tamaños de celda, posiciones de celda y zonas de cuadrícula. También se pueden utilizar las propiedades de grid-template y grid-template-areas para crear diseños de cuadrícula complejos.\nEn resumen, CSS Grid es una herramienta poderosa para crear diseños de cuadrícula en HTML que te permite crear diseños complejos de forma fácil y flexible.\nIntroducción a Grid # En el siguiente video aprenderás lo necesario para aprender sobre este concepto y como se diferencia de flex:\nRecuerda hacer pausas en el video y escribir el código que ves en el ejemplo para que te vayas acostumbrando a este nuevo concepto. ","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia12/grid/","section":"Levels","summary":"CSS Grid Layout es un sistema de diseño de cuadrícula para crear diseños de página en HTML.","title":"CSS Grid"},{"content":" Los arrays en JavaScript son una de las características fundamentales del lenguaje, y su capacidad para almacenar y acceder a una colección ordenada de valores es esencial para cualquier desarrollador web. Sin embargo, JavaScript no se queda solo en eso, ya que también ofrece una amplia variedad de métodos que nos permiten trabajar con arrays de manera más eficiente.\nEn esta parte, vamos a explorar los métodos de arrays más comunes y útiles en JavaScript, desde cómo acceder y modificar elementos, hasta cómo buscar, ordenar y filtrar datos en un array. Veremos ejemplos prácticos y explicaciones detalladas para que puedas entender cómo sacar el máximo provecho de estos métodos y cómo pueden ayudarte a mejorar tu código.\nEn este tutorial se usa arrow functions, que es una forma distinta de escribir funciones y podría confundirte, de ser el caso, mira primero brevemente este video para entrar en contexto. ","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia11/arr_methods/","section":"Levels","summary":"Los arrays en JavaScript son una de las características fundamentales del lenguaje, y su capacidad para almacenar y acceder a una colección ordenada de valores es esencial para cualquier desarrollador web.","title":"Métodos de Array"},{"content":"En JavaScript, existen tres tipos de funciones: funciones declaradas, funciones de expresión y funciones de flecha.\nFunciones declaradas: Son funciones que se declaran con la palabra clave \u0026ldquo;function\u0026rdquo; seguida del nombre de la función. Ejemplo: function sum(a, b) { return a + b; } Estas funciones son hoisted, es decir, son elevadas al inicio del scope donde son declaradas, por lo tanto son accesibles antes de ser declaradas.\nFunciones de expresión: son funciones que son asignadas a una variable y son definidas mediante una expresión. Ejemplo: const sum = function(a, b) { return a + b; } Funciones de flecha: son funciones cuyo sintaxis es abreviada y se definen mediante una flecha \u0026ldquo;=\u0026gt;\u0026rdquo; y no tiene un nombre. Ejemplo: const sum = (a, b) =\u0026gt; a + b; 3 tipos de funciones # Para entender a detalle como funciona cada uno de estas, mira el siguiente tutorial donde verás qué diferencia a estas 3 formas de escribir una función:\n","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia10/function_type/","section":"Levels","summary":"En JavaScript, existen tres tipos de funciones: funciones declaradas, funciones de expresión y funciones de flecha.","title":"Tipos de Funciones"},{"content":"El día de hoy vamos a repasar en el uso de flexbox, es importante comprender este tema antes de que pasemos a aprender sobre grid. analiza el siguiente video a detalle o desde donde te quedaste y toma nota de las dudas o preguntas que surgan para que puedas resolverlas durante clase:\nAdicionalmente, te comparto una guía complete de Flexbox, si bien la página está en inglés, puedes verla en español en tu navegador Chrome o Edge dando click derecho en la página y seleccionando la opcion \u0026ldquo;Traducir a Español\u0026rdquo;:\nFlexbox - CSS Tricks\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia10/flexbox/","section":"Levels","summary":"El día de hoy vamos a repasar en el uso de flexbox, es importante comprender este tema antes de que pasemos a aprender sobre grid.","title":"Flexbox"},{"content":"En JavaScript, las funciones son una de las características fundamentales del lenguaje y son esenciales para crear programas complejos.\nYa hemos visto cómo crear funciones y cómo llamarlas, pero para sacar el máximo provecho de las funciones, es importante entender cómo funcionan los parámetros y argumentos.\nEn esta clase, vamos a explorar cómo funcionan los parámetros y argumentos en las funciones de JavaScript, cómo pasar valores a las funciones y cómo utilizar estos valores dentro de las funciones. También veremos ejemplos prácticos y explicaciones detalladas para que puedas entender cómo utilizar parámetros y argumentos para crear funciones más flexibles y reutilizables en tus programas.\nParámetros # Podemos pasar datos arbitrarios a funciones usando parámetros.\nEn el siguiente ejemplo, la función tiene dos parámetros: from y text.\n1 2 3 4 5 function showMessage(from, text) { // parámetros: from, text alert(from + \u0026#39;: \u0026#39; + text); } showMessage(\u0026#39;Ann\u0026#39;, \u0026#39;¡Hola!\u0026#39;); // Ann: ¡Hola! (*) *showMessage(\u0026#39;Ann\u0026#39;, \u0026#34;¿Cómo estás?\u0026#34;); // Ann: ¿Cómo estás? (**) Cuando la función se llama (*) y (**), los valores dados se copian en variables locales from y text. Y la función las utiliza.\nAquí hay un ejemplo más: tenemos una variable from y la pasamos a la función. Tenga en cuenta: la función cambia from, pero el cambio no se ve afuera, porque una función siempre obtiene una copia del valor:\n1 2 3 4 5 6 7 8 function showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // hace que \u0026#34;from\u0026#34; se vea mejor alert( from + \u0026#39;: \u0026#39; + text ); } let from = \u0026#34;Ann\u0026#34;; showMessage(from, \u0026#34;Hola\u0026#34;); // *Ann*: Hola // el valor de \u0026#34;from\u0026#34; es el mismo, la función modificó una copia local alert( from ); // Ann Cuando un valor es pasado como un parámetro de función, también se denomina argumento.\nPara poner los términos claros:\nUn parámetro es una variable listada dentro de los paréntesis en la declaración de función (es un término para el momento de la declaración) Un argumento es el valor que es pasado a la función cuando esta es llamada (es el término para el momento en que se llama). Declaramos funciones listando sus parámetros, luego las llamamos pasándoles argumentos.\nEn el ejemplo de arriba, se puede decir: \u0026ldquo;la función showMessage es declarada con dos parámetros, y luego llamada con dos argumentos: from y \u0026quot;Hola\u0026quot;\u0026rdquo;.\nValores predeterminados # Si una función es llamada, pero no se le proporciona un argumento, su valor correspondiente se convierte en undefined.\nPor ejemplo, la función mencionada anteriormente showMessage(from, text) se puede llamar con un solo argumento:\nshowMessage(\u0026#34;Ann\u0026#34;); Eso no es un error. La llamada mostraría \u0026quot;Ann: undefined\u0026quot;. Como no se pasa un valor de text, este se vuelve undefined.\nPodemos especificar un valor llamado \u0026ldquo;predeterminado\u0026rdquo; o \u0026ldquo;por defecto\u0026rdquo; (es el valor que se usa si el argumento fue omitido) en la declaración de función usando =:\n1 2 3 4 function showMessage(from,text = \u0026#34;sin texto\u0026#34;\u0026gt;) { alert( from + \u0026#34;: \u0026#34; + text ); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: sin texto Ahora, si no se pasa el parámetro text, obtendrá el valor \u0026quot;sin texto\u0026quot;\nEl valor predeterminado también se asigna si el parámetro existe pero es estrictamente igual a undefined:\nshowMessage(\u0026#34;Ann\u0026#34;, undefined); // Ann: sin texto En el siguiente video aprenderemos más sobre estos conceptos:\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia9/parameters/","section":"Levels","summary":"En JavaScript, las funciones son una de las características fundamentales del lenguaje y son esenciales para crear programas complejos.","title":"Funciones: Parámetros"},{"content":"Los formularios HTML y Flexbox en CSS son dos herramientas fundamentales para cualquier desarrollador web.\nLos formularios HTML nos permiten recolectar información de los usuarios de un sitio web, mientras que Flexbox en CSS nos permite crear diseños de layout flexibles y adaptables.\nEn esta clase, vamos a explorar cómo crear y personalizar formularios HTML y cómo utilizar Flexbox para crear diseños adaptables y flexibles en un sitio web. Desde cómo crear campos de entrada y botones hasta cómo utilizar Flexbox para alinear elementos y crear diseños de grillas.\nForms # Los formularios en HTML son utilizados para recolectar información de los usuarios de un sitio web. Se componen de diferentes elementos de entrada, como campos de texto, botones de radio, casillas de verificación, etc. Los formularios permiten que los usuarios ingresen información, como sus nombres, direcciones de correo electrónico, contraseñas, etc. y luego enviar esa información a un servidor web para su procesamiento. Los formularios son comúnmente utilizados para registros de usuarios, inicios de sesión, encuestas, compras en línea y muchas otras funciones en un sitio web.\nEn el siguiente video aprenderemos como crear formularios en HTML:\nSi deseas realizar un formulario más real, aquí tienes un tutorial donde aprenderás a crear un formulario de login:\nFlexbox # Flexbox es un método de diseño en CSS que se utiliza para crear diseños adaptables y flexibles. Es especialmente útil para dispositivos móviles y pantallas de diferentes tamaños. Flexbox hace posible ajustar el tamaño y la posición de los elementos dentro de un contenedor de forma automática, lo que permite crear diseños flexibles que se adaptan a diferentes tamaños de pantalla. Con Flexbox, los desarrolladores pueden alinear elementos, distribuirlos en una grilla y controlar el orden de los elementos, independientemente de su tamaño. Es una de las herramientas fundamentales para los desarrolladores web para crear diseños responsivos, flexibles y adaptables.\nVeamos un poco más de esta propiedad:\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia9/form_flex/","section":"Levels","summary":"Los formularios HTML y Flexbox en CSS son dos herramientas fundamentales para cualquier desarrollador web.","title":"Forms \u0026 Flexbox"},{"content":"Los Bucles o Loops son parte fundamental en la programación.\nHoy repasaremos su uso y veremos una forma especial de recorres los arrays.\nRepaso # ","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia8/loops/","section":"Levels","summary":"Los Bucles o Loops son parte fundamental en la programación.","title":"Loops"},{"content":"Los arrays en JavaScript son estructuras de datos que nos permiten almacenar y acceder a una colección ordenada de valores de forma sencilla y eficiente.\nEn esta clase, vamos a explorar en profundidad el uso de arrays en JavaScript, desde cómo se crean, se accede y se modifican sus elementos, hasta cómo se utilizan en conjunto con otras características del lenguaje como funciones y bucles para crear programas más complejos\nLee la información a continuación con calma y toma nota de las dudas que surgan para que las puedas resolver en clase.\nArrays # Los objetos te permiten almacenar colecciones de datos a través de nombres. Eso está bien.\nPero a menudo necesitamos una colección ordenada, donde tenemos un 1ro, un 2do, un 3er elemento y así sucesivamente. Por ejemplo, necesitamos almacenar una lista de algo: usuarios, bienes, elementos HTML, etc.\nNo es conveniente usar objetos aquí, porque no proveen métodos para manejar el orden de los elementos. No podemos insertar una nueva propiedad “entre” los existentes. Los objetos no están hechos para eso.\nExiste una estructura llamada Array (llamada en español arreglo o matriz/vector) para almacenar colecciones ordenadas.\nDeclaración # Hay dos sintaxis para crear un array vacío:\nlet arr = new Array(); let arr = []; Casi siempre se usa la segunda. Podemos suministrar elementos iniciales entre los corchetes:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; Los elementos del array están numerados comenzando desde cero.\nPodemos obtener un elemento por su número entre corchetes:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[0] ); // Apple alert( fruits[1] ); // Orange alert( fruits[2] ); // Plum Podemos reemplazar un elemento:\nfruits[2] = \u0026#39;Pear\u0026#39;; // ahora [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;] \u0026hellip;o agregar uno nuevo al array:\nfruits[3] = \u0026#39;Lemon\u0026#39;; // ahora [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;, \u0026#34;Lemon\u0026#34;] La cuenta total de elementos en el array es su longitud length:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits.length ); // 3 También podemos usar alert para mostrar el array completo.\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits ); // Apple,Orange,Plum Un array puede almacenar elementos de cualquier tipo.\nPor ejemplo:\n// mezcla de valores let arr = [ \u0026#39;Apple\u0026#39;, { name: \u0026#39;John\u0026#39; }, true, function() { alert(\u0026#39;hello\u0026#39;); } ]; // obtener el objeto del índice 1 y mostrar su nombre alert( arr[1].name ); // John // obtener la función del índice 3 y ejecutarla arr[3](); // hello En el siguiente video aprenderás más de los arrays:\nFunciones # Muy a menudo necesitamos realizar acciones similares en muchos lugares del script.\nPor ejemplo, debemos mostrar un mensaje atractivo cuando un visitante inicia sesión, cierra sesión y tal vez en otros momentos.\nLas funciones son los principales \u0026ldquo;bloques de construcción\u0026rdquo; del programa. Permiten que el código se llame muchas veces sin repetición.\nYa hemos visto ejemplos de funciones integradas, como alert(message), prompt(message, default) y confirm(question). Pero también podemos crear funciones propias.\nDeclaración de funciones # Para crear una función podemos usar una declaración de función.\nSe ve como aquí:\nfunction showMessage() { alert( \u0026#39;¡Hola a todos!\u0026#39; ); } La palabra clave function va primero, luego va el nombre de función, luego una lista de parámetros entre paréntesis (separados por comas, vacía en el ejemplo anterior) y finalmente el código de la función entre llaves, también llamado \u0026ldquo;el cuerpo de la función\u0026rdquo;.\nfunction name(parameter1, parameter2, ... parameterN) { // body } Nuestra nueva función puede ser llamada por su nombre: showMessage().\nPor ejemplo:\nfunction showMessage() { alert( \u0026#39;¡Hola a todos!\u0026#39; ); } showMessage(); // llamando a la funcion showMessage() showMessage(); // llamando a la funcion showMessage() La llamada showMessage() ejecuta el código de la función. Aquí veremos el mensaje dos veces.\nEste ejemplo demuestra claramente uno de los propósitos principales de las funciones: evitar la duplicación de código..\nSi alguna vez necesitamos cambiar el mensaje o la forma en que se muestra, es suficiente modificar el código en un lugar: la función que lo genera.\nVariables Locales # Una variable declarada dentro de una función solo es visible dentro de esa función.\nPor ejemplo:\nfunction showMessage() { let message = \u0026#34;Hola, ¡Soy JavaScript!\u0026#34;; // variable local alert( message ); } showMessage(); // Hola, ¡Soy JavaScript! alert( message ); // \u0026lt;-- ¡Error! La variable es local para esta función Variables Externas # Una función también puede acceder a una variable externa, por ejemplo:\nlet *!*userName*/!* = \u0026#39;Juan\u0026#39;; function showMessage() { let message = \u0026#39;Hola, \u0026#39; + *!*userName*/!*; alert(message); } showMessage(); // Hola, Juan La función tiene acceso completo a la variable externa. Puede modificarlo también.\nPor ejemplo:\nlet *!*userName*/!* = \u0026#39;Juan\u0026#39;; function showMessage() { *!*userName*/!* = \u0026#34;Bob\u0026#34;; // (1) Cambió la variable externa let message = \u0026#39;Hola, \u0026#39; + *!*userName*/!*; alert(message); } alert( userName ); // *!*Juan*/!* antes de llamar la función showMessage(); alert( userName ); // *!*Bob*/!*, el valor fué modificado por la función La variable externa solo se usa si no hay una local.\nSi una variable con el mismo nombre se declara dentro de la función, le hace sombra a la externa. Por ejemplo, en el siguiente código, la función usa la variable userName local. La exterior se ignora:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { *!* let userName = \u0026#34;Bob\u0026#34;; // declara variable local */!* let message = \u0026#39;Hello, \u0026#39; + userName; // *!*Bob*/!* alert(message); } // la función crea y utiliza su propia variable local userName showMessage(); alert( userName ); // *!*John*/!*, se mantiene, la función no accedió a la variable externa Variables globales Variables declaradas fuera de cualquier función, como la variable externa userName en el código anterior, se llaman globales.\nLas variables globales son visibles desde cualquier función (a menos que se les superpongan variables locales con el mismo nombre).\nEs una buena práctica reducir el uso de variables globales. El código moderno tiene pocas o ninguna variable global. La mayoría de las variables residen en sus funciones. Aunque a veces puede justificarse almacenar algunos datos a nivel de proyecto. Puedes encontrar más información acerca de las funciones en la página de MDN:\nFunciones - MDN web docs\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia8/arrays/","section":"Levels","summary":"Los arrays en JavaScript son estructuras de datos que nos permiten almacenar y acceder a una colección ordenada de valores de forma sencilla y eficiente.","title":"Arrays y Funciones"},{"content":"JavaScript es uno de los lenguajes de programación más populares en el mundo, y una de las razones de su éxito radica en su capacidad para manejar y organizar datos a través de objetos y arrays.\nLos objetos en JavaScript son estructuras de datos clave-valor que nos permiten almacenar y acceder a la información de una manera sencilla y eficiente.\nLos arrays, por otro lado, son un tipo especial de objeto que nos permite almacenar y acceder a una colección ordenada de valores.\nEn esta clase, vamos a explorar en profundidad el uso de objetos en JavaScript, desde cómo se crean y se accede a sus propiedades, hasta cómo se utilizan en conjunto con otras características del lenguaje para crear programas más complejos. Veremos ejemplos prácticos y explicaciones detalladas para entender cómo sacar el máximo provecho de estas herramientas fundamentales de JavaScript.\nLee la información a continuación con calma y toma nota de las dudas que surgan para que las puedas resolver en clase.\nObjetos # Como aprendimos en clases anteriores, hay ocho tipos de datos en JavaScript. Siete de ellos se denominan \u0026ldquo;primitivos\u0026rdquo;, porque sus valores contienen solo un dato (sea un string, un número o lo que sea).\nEn contraste, los objetos son usados para almacenar colecciones de varios datos y entidades más complejas asociados con un nombre clave. En JavaScript, los objetos penetran casi todos los aspectos del lenguaje. Por lo tanto, debemos comprenderlos primero antes de profundizar en cualquier otro lugar.\nPodemos crear un objeto usando las llaves {…} con una lista opcional de propiedades. Una propiedad es un par \u0026ldquo;key:value\u0026rdquo;, donde key es un string (también llamado \u0026ldquo;nombre clave\u0026rdquo;), y value puede ser cualquier cosa. P.D. Para fines prácticos de la lección, nos referiremos a este par de conceptos como \u0026ldquo;clave:valor\u0026rdquo;.\nPodemos imaginar un objeto como un gabinete con archivos firmados. Cada pieza de datos es almacenada en su archivo por la clave. Es fácil encontrar un archivo por su nombre o agregar/eliminar un archivo.\nSe puede crear un objeto vacío (\u0026ldquo;gabinete vacío\u0026rdquo;) utilizando una de estas dos sintaxis:\nlet user = new Object(); // sintaxis de \u0026#34;constructor de objetos\u0026#34; let user = {}; // sintaxis de \u0026#34;objeto literal\u0026#34; Normalmente se utilizan las llaves {...}. Esa declaración se llama objeto literal.\nLiterales y propiedades # Podemos poner inmediatamente algunas propiedades dentro de {...} como pares \u0026ldquo;clave:valor\u0026rdquo;:\nlet user = { // un objeto name: \u0026#34;John\u0026#34;, // En la clave \u0026#34;name\u0026#34; se almacena el valor \u0026#34;John\u0026#34; age: 30 // En la clave \u0026#34;age\u0026#34; se almacena el valor 30 }; Una propiedad tiene una clave (también conocida como \u0026ldquo;nombre\u0026rdquo; o \u0026ldquo;identificador\u0026rdquo;) antes de los dos puntos \u0026quot;:\u0026quot; y un valor a la derecha.\nEn el objeto user hay dos propiedades:\nLa primera propiedad tiene la clave \u0026quot;name\u0026quot; y el valor \u0026quot;John\u0026quot;. La segunda tienen la clave \u0026quot;age\u0026quot; y el valor 30. Podemos imaginar al objeto user resultante como un gabinete con dos archivos firmados con las etiquetas \u0026ldquo;name\u0026rdquo; y \u0026ldquo;age\u0026rdquo;.\nPodemos agregar, eliminar y leer archivos de él en cualquier momento.\nSe puede acceder a los valores de las propiedades utilizando la notación de punto:\n// Obteniendo los valores de las propiedades del objeto: alert( user.name ); // John alert( user.age ); // 30 El valor puede ser de cualquier tipo. Agreguemos uno booleano:\nuser.isAdmin = true; Para eliminar una propiedad podemos usar el operador delete:\ndelete user.age; También podemos nombrar propiedades con más de una palabra. Pero, de ser así, debemos colocar la clave entre comillas \u0026quot;...\u0026quot;:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true // Las claves con más de una palabra deben ir entre comillas }; La última propiedad en la lista puede terminar con una coma:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, // termina con una \u0026#34;,\u0026#34; } Eso se llama una coma \u0026ldquo;final\u0026rdquo; o \u0026ldquo;colgante\u0026rdquo;. Facilita agregar, eliminar y mover propiedades, porque todas las líneas se vuelven similares.\nTutotial de Objetos # En el siguiente video, aprenderás más sobre los objetos:\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia7/objetcs/","section":"Levels","summary":"JavaScript es uno de los lenguajes de programación más populares en el mundo, y una de las razones de su éxito radica en su capacidad para manejar y organizar datos a través de objetos y arrays.","title":"Objetos"},{"content":"Los principios de diseño web son fundamentales para crear sitios web atractivos, intuitivos y fáciles de usar. Estos principios incluyen la organización, la estética, la usabilidad y la accesibilidad. Al seguir estos principios, los diseñadores web pueden crear sitios web que sean estéticamente agradables y fáciles de navegar para los usuarios.\nEn primer lugar, la organización es importante para garantizar que el contenido de un sitio web esté estructurado de manera lógica y fácil de encontrar. Esto incluye la jerarquía de la información, el uso de encabezados y subtítulos, y la disposición de los elementos en la página.\nEn segundo lugar, la estética es importante para crear un sitio web atractivo y atractivo para los usuarios. Esto incluye el uso de colores, tipografía, imágenes y otros elementos visuales para crear una apariencia consistente y profesional.\nEn tercer lugar, la usabilidad es importante para garantizar que los usuarios puedan navegar fácilmente por un sitio web y encontrar la información que necesitan. Esto incluye la navegación, el diseño de formularios, y la disposición de los elementos en la página.\nFinalmente, la accesibilidad es esencial para garantizar que todos los usuarios, independientemente de sus habilidades, puedan acceder y utilizar un sitio web. Esto incluye el uso de etiquetas semanticas, tamaños de letra legibles, y la compatibilidad con diferentes dispositivos y navegadores.\nAl seguir estos principios, los diseñadores web pueden crear sitios web eficaces y accesibles para todos los usuarios.\nPrincipios Generales de Diseño Web # Dentro de esta sección aprenderás un poco más de estos principios, primero mira este video donde aprenderás principios básicos de diseño.\nPrincipios de Diseño - Shopify # Shopify es uno de los e-commerce mas populares en la actualidad, permite crear tiendas virtuales con facilidad y para lograr ese propósito, tiene su propio segmento dedicado al diseño web.\nAqui analizaremos algunas partes de esa seccion, los apartados que debes revisar son:\nDesign Colors Data Visualizations Space Estos apartados se encuentran en el menú lateral izquierdo.\nCada una de estas páginas está en ingles por default pero puedes cambiarlas a español dede tu navegador Edge o Chrome dando click derecho en la página y seleccionando la opción \u0026ldquo;traducir al español\u0026rdquo;.\nPara comenzar esta a leer esta documentación sigue el siguiente link:\nPolaris Design - Shopify\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia7/sem_design/","section":"Levels","summary":"Los principios de diseño web son fundamentales para crear sitios web atractivos, intuitivos y fáciles de usar.","title":"Principios de Diseño Web"},{"content":"El Document Object Model (DOM) es un estándar de la industria que define la estructura lógica de un documento y cómo se puede acceder y modificar su contenido y estilos. Es una interfaz de programación de aplicaciones (API) para documentos HTML y XML que permite a los desarrolladores interactuar con el contenido de una página web y modificarlo dinámicamente mediante código JavaScript.\nEl DOM es un árbol de nodos que representa la estructura de un documento, donde cada elemento HTML es un nodo y cada atributo es un nodo hijo. Los desarrolladores pueden utilizar el DOM para seleccionar y modificar elementos específicos en una página web, crear nuevos elementos, eliminar elementos existentes, cambiar estilos, agregar eventos, y mucho más.\nEn esta clase, vamos a profundizar en el concepto del DOM, cómo funciona, y cómo los desarrolladores pueden utilizarlo para interactuar con el contenido de una página web y crear aplicaciones web dinámicas e interactivas.\nAntes de entar a detalle en el DOM hablaremos un poco del entorno del navegador.\nEntorno de Navegador # El lenguaje JavaScript fue creado inicialmente para los navegadores web. Desde entonces, ha evolucionado en un lenguaje con muchos usos y plataformas.\nUna plataforma puede ser un navegador, un servidor web u otro host (\u0026ldquo;anfitrión\u0026rdquo;); incluso una máquina de café \u0026ldquo;inteligente\u0026rdquo;, si puede ejecutar JavaScript. Cada uno de ellos proporciona una funcionalidad específica de la plataforma. La especificación de JavaScript llama a esto entorno de host.\nUn entorno host proporciona sus propios objetos y funciones adicionales al núcleo del lenguaje. Los navegadores web proporcionan un medio para controlar las páginas web. Node.js proporciona características del lado del servidor, etc.\nAquí tienes una vista general de lo que tenemos cuando JavaScript se ejecuta en un navegador web:\nHay un objeto \u0026ldquo;raíz\u0026rdquo; llamado window. Tiene dos roles:\nPrimero, es un objeto global para el código JavaScript. Segundo, representa la \u0026ldquo;ventana del navegador\u0026rdquo; y proporciona métodos para controlarla. DOM (Modelo de Objetos del Documento) # La estructura de un documento HTML son las etiquetas.\nSegún el Modelo de Objetos del Documento (DOM), cada etiqueta HTML es un objeto. Las etiquetas anidadas son llamadas \u0026ldquo;hijas\u0026rdquo; de la etiqueta que las contiene. El texto dentro de una etiqueta también es un objeto.\nTodos estos objetos son accesibles empleando JavaScript, y podemos usarlos para modificar la página.\nPor ejemplo, document.body es el objeto que representa la etiqueta \u0026lt;body\u0026gt;.\nEjecutar el siguiente código hará que el \u0026lt;body\u0026gt; sea de color rojo durante 3 segundos:\ndocument.body.style.background = \u0026#39;red\u0026#39;; // establece un color de fondo rojo setTimeout(() =\u0026gt; document.body.style.background = \u0026#39;\u0026#39;, 3000); // volver atrás En el caso anterior usamos style.background para cambiar el color de fondo del document.body, sin embargo existen muchas otras propiedades, tales como:\ninnerHTML \u0026ndash; contenido HTML del nodo. offsetWidth \u0026ndash; ancho del nodo (en píxeles). \u0026hellip;, etc. Un ejemplo del DOM # Comencemos con el siguiente documento simple:\n\u0026lt;!DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;About elk\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; The truth about elk. \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; El DOM representa HTML como una estructura de árbol de etiquetas. A continuación podemos ver como se muestra:\nflowchart TD A(HTML) --\u003e B(HEAD) A --\u003e C[#text] A --\u003e D(BODY) B --\u003e E[#text] B --\u003e F(TITLE) B --\u003e I[#text] F --\u003e G[#text About elk] D --\u003e J[#text The truth about elk. #text] Cada nodo del árbol es un objeto.\nLas etiquetas son nodos de elementos (o solo elementos) y forman la estructura del árbol: \u0026lt;html\u0026gt; está ubicado en la raíz del documento, por lo tanto, \u0026lt;head\u0026gt; y \u0026lt;body\u0026gt; son sus hijos, etc.\nEl texto dentro de los elementos forma nodos de texto, etiquetados como #text. Un nodo de texto contiene solo una cadena. Esta puede no tener hijos y siempre es una hoja del árbol.\nPor ejemplo, la etiqueta \u0026lt;title\u0026gt; tiene el texto \u0026quot;About elk\u0026quot;.\nHay que tener en cuenta los caracteres especiales en nodos de texto:\nuna línea nueva: #text ↵ (en JavaScript se emplea \\n para obtener este resultado) un espacio: ␣ Los espacios y líneas nuevas son caracteres totalmente válidos, al igual que letras y dígitos. Ellos forman nodos de texto y se convierten en parte del DOM. Así, por ejemplo, en el caso de arriba la etiqueta \u0026lt;head\u0026gt; contiene algunos espacios antes de la etiqueta \u0026lt;title\u0026gt;, entonces ese texto se convierte en el nodo #text, que contiene una nueva línea y solo algunos espacios.\nHay solo dos excepciones de nivel superior:\nLos espacios y líneas nuevas antes de la etiqueta \u0026lt;head\u0026gt; son ignorados por razones históricas. Si colocamos algo después de la etiqueta \u0026lt;/body\u0026gt;, automáticamente se sitúa dentro de body, al final, ya que, la especificación HTML necesita que todo el contenido esté dentro de la etiqueta \u0026lt;body\u0026gt;, no puede haber espacios después de esta. En otros casos todo es sencillo \u0026ndash; si hay espacios (como cualquier carácter) en el documento, se convierten en nodos de texto en el DOM, y si los eliminamos, entonces no habrá ninguno.\nPara reforzar lo que hemos visto, mira el siguiente video donde se introduce el DOM:\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia6/introdom/","section":"Levels","summary":"El Document Object Model (DOM) es un estándar de la industria que define la estructura lógica de un documento y cómo se puede acceder y modificar su contenido y estilos.","title":"Introducción al DOM"},{"content":"Las pseudo-clases de CSS y la propiedad de transición son dos herramientas esenciales para cualquier desarrollador web.\nA través de las pseudo-clases, es posible seleccionar elementos específicos en una página web y aplicar estilos personalizados, mientras que la propiedad de transición permite crear efectos suaves al cambiar entre estilos.\nEn esta clase, exploraremos en profundidad el uso de estas herramientas y cómo pueden ser utilizadas para mejorar la experiencia de usuario en un sitio web. Desde cómo seleccionar elementos específicos hasta cómo crear transiciones suaves, cubriremos todo lo que necesita saber para sacar el máximo provecho de estas herramientas poderosas.\npseudo-clases # Las pseudo-clases son una herramienta muy poderosa en CSS que permite aplicar estilos a elementos en un estado específico. A continuación se presentan algunos ejemplos de cómo se pueden utilizar las pseudo-clases en una página web.\nEjemplo 1: Agregar estilos a los enlaces visitados # \u0026lt;a href=\u0026#34;http://ejemplo.com\u0026#34;\u0026gt;Este es un enlace\u0026lt;/a\u0026gt; a:visited { color: purple; } En este ejemplo, se está utilizando la pseudo-clase :visited para seleccionar y aplicar estilos a los enlaces que han sido visitados por el usuario en el documento HTML. En este caso, se está cambiando el color de los enlaces visitados a morado.\nEjemplo 2: Agregar estilos al elemento seleccionado # \u0026lt;select\u0026gt; \u0026lt;option\u0026gt;Opción 1\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Opción 2\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Opción 3\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; option:checked { background-color: green; color: white; } En este ejemplo, se está utilizando la pseudo-clase :checked para seleccionar y aplicar estilos al elemento seleccionado en una lista desplegable del documento HTML. En este caso, se está cambiando el color\nMás pseudo-clases # Hay muchas pseudo-clases con las que podemos trabajar, en el siguiente artículo de MDN aprenderás un poco más de ellas:\nPseudo-clases - MDN web docs\nTransition # La propiedad transition en CSS permite crear transiciones suaves entre estados de un elemento, como cambios en el tamaño, posición, color y otros aspectos visuales. A continuación se presentan algunos ejemplos de cómo se pueden utilizar las transiciones en una página web.\nEjemplo 1: Crear una transición de tamaño al pasar el cursor sobre un botón # \u0026lt;button\u0026gt;Haz clic aquí\u0026lt;/button\u0026gt; button { transition: width 2s; } button:hover { width: 200px; } En este ejemplo, se está utilizando la propiedad transition para crear una transición suave de 2 segundos en el ancho del botón al pasar el cursor sobre él. El boton tiene un tamaño estandar y al pasar el cursor se amplia para dar la sensación de clic.\nEjemplo 2: Crear una transición de color al hacer clic en un elemento # \u0026lt;div\u0026gt;Haz clic aquí\u0026lt;/div\u0026gt; div { transition: background-color 1s; } div:active { background-color: blue; } En este ejemplo, se está utilizando la propiedad transition para crear una transición suave de 1 segundo en el color de fondo del elemento al hacer clic sobre él. El elemento tiene un color de fondo estandar y al hacer clic en el mismo cambia a azul.\nEstos son solo algunos ejemplos simples de cómo se pueden utilizar las transiciones en CSS para crear efectos visuales suaves y mejorar la experiencia del usuario en una página web. Hay muchas otras propiedades y valores disponibles para personalizar las transiciones, como la duración, el retraso y la función de velocidad.\nAdemás de esto, también es posible aplicar transiciones a varias propiedades al mismo tiempo, utilizando la sintaxis abreviada:\ntransition: background-color 1s, width 2s, height 2s; Es importante tener en cuenta que las transiciones solo funcionan en navegadores modernos y no funcionarán en navegadores antiguos. Por lo tanto, es importante probar y verificar la compatibilidad de las transiciones en diferentes navegadores antes de implementarlas en un sitio web en producción.\nEn el siguiente artículo de MDN podrás aprender más sobre esta propiedad de CSS:\ntransition - MDN web docs\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia6/pseudo/","section":"Levels","summary":"Las pseudo-clases de CSS y la propiedad de transición son dos herramientas esenciales para cualquier desarrollador web.","title":"Pseudo"},{"content":"Switch # Una sentencia switch puede reemplazar múltiples condiciones if.\nProvee una mejor manera de comparar un valor con múltiples variantes.\nLa sintaxis # switch tiene uno o mas bloques casey un opcional default.\nSe ve de esta forma:\nswitch(x) { case \u0026#39;valor1\u0026#39;: // if (x === \u0026#39;valor1\u0026#39;) ... [break] case \u0026#39;valor2\u0026#39;: // if (x === \u0026#39;valor2\u0026#39;) ... [break] default: ... [break] } El valor de x es comparado contra el valor del primer case (en este caso, valor1), luego contra el segundo (valor2) y así sucesivamente, todo esto bajo una igualdad estricta. Si la igualdad es encontrada, switch empieza a ejecutar el código iniciando por el primer case correspondiente, hasta el break más cercano (o hasta el final del switch). Si no se cumple ningún caso entonces el código default es ejecutado (si existe). Ejemplo # Un ejemplo de switch (se resalta el código ejecutado):\nlet a = 2 + 2; switch (a) { case 3: alert( \u0026#39;Muy pequeño\u0026#39; ); break; case 4: alert( \u0026#39;¡Exacto!\u0026#39; ); // Se ejecuta esta línea break; case 5: alert( \u0026#39;Muy grande\u0026#39; ); break; default: alert( \u0026#34;Desconozco estos valores\u0026#34; ); } Aquí el switch inicia comparando a con la primera variante case que es 3. La comparación falla.\nLuego 4. La comparación es exitosa, por tanto la ejecución empieza desde case 4 hasta el break más cercano.\nSi no existe break entonces la ejecución continúa con el próximo case sin ninguna revisión.\nUn ejemplo sin break:\nlet a = 2 + 2; switch (a) { case 3: alert( \u0026#39;Muy pequeño\u0026#39; ); // Se ejecuta todas las lineas de abajo case 4: alert( \u0026#39;¡Exacto!\u0026#39; ); case 5: alert( \u0026#39;Muy grande\u0026#39; ); default: alert( \u0026#34;Desconozco estos valores\u0026#34; ); // Se ejecuta todas las lineas de arriba } En el ejemplo anterior veremos ejecuciones de tres alert secuenciales:\nalert( \u0026#39;¡Exacto!\u0026#39; ); alert( \u0026#39;Muy grande\u0026#39; ); alert( \u0026#34;Desconozco estos valores\u0026#34; ); El tipo importa # Vamos a enfatizar que la comparación de igualdad es siempre estricta. Los valores deben ser del mismo tipo para coincidir.\nPor ejemplo, consideremos el código:\nlet arg = prompt(\u0026#34;Ingrese un valor\u0026#34;); switch (arg) { case \u0026#39;0\u0026#39;: case \u0026#39;1\u0026#39;: alert( \u0026#39;Uno o cero\u0026#39; ); break; case \u0026#39;2\u0026#39;: alert( \u0026#39;Dos\u0026#39; ); break; case 3: alert( \u0026#39;¡Nunca ejecuta!\u0026#39; ); break; default: alert( \u0026#39;Un valor desconocido\u0026#39; ); } Para 0, 1, se ejecuta el primer alert. Para 2 se ejecuta el segundo alert. Pero para 3, el resultado del prompt es un string \u0026quot;3\u0026quot;, el cual no es estrictamente igual === al número 3. Por tanto ¡Tenemos un código muerto en case 3! La variante default se ejecutará. Debería usar switch? # Si bien es cierto, switch puede parecer una alternativa viable para ciertas situaciones con las que nos encontremos, en la actualidad hay muchas formas y motivos por los que su uso ha descendido y se debería evitar, sobre todo al escalar nuestro proyecto. En el siguiente video aprenderás como evitar su uso y mantener buenas prácticas en tu código (en el ejemplo se hace uso de la estructura objetos, ternarias y operadores lógicos, por ahora enfocate en el concepto en sí más que en las estructuras que se usan):\nBucles # Hasta el momento hemos aprendido 3 tipos de bucles: while, do while y for. En el siguiente video repasaremos el uso de ellos y tambien veremos el uso de algunas variaciones de este último que son for in y for of:\nDentro de W3Schools encontramos información detallada acerca de cada uno, aquí te dejo articulos sobre los distintos loops(ciclos), puedes cambiar el idioma a español en tu navegador Chrome o Edge dando click derecho en la pagina y seleccionando la opción \u0026ldquo;Traducir a español\u0026rdquo;:\nCiclo For ciclo For in Ciclo For Of Ciclo While ","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia5/switch_loop/","section":"Levels","summary":"Switch # Una sentencia switch puede reemplazar múltiples condiciones if.","title":"Switch y Bucles"},{"content":"La posicion y la profundidad son aspectos importantes en el diseño web, y en CSS tenemos las propiedades position y z-index para controlarlos.\nLa propiedad position nos permite especificar cómo se posiciona un elemento dentro de un contenedor, mientras que la propiedad z-index nos permite controlar el orden en el que los elementos aparecen en la pantalla. Juntas, estas propiedades nos permiten crear diseños complejos y sofisticados. En las siguientes sección veremos en detalle cómo funcionan estas propiedades y cómo utilizarlas en nuestros diseños.\nPosition # En el siguiente video aprenderas las bases de position en CSS:\nAdicionalmente, dentro del portal \u0026ldquo;MDN web docs_\u0026rdquo; podemos encontrar más información\tsobre esta propiedad position.\nposition - MDN web docs\nz-index # En el siguiente video aprenderás sobre el uso de z-indes en CSS:\nLuego de ver el video, lee el siguiente articulo de MDN sobre esta propiedad z-index.\nz-index - MDN web docs\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia5/position/","section":"Levels","summary":"La posicion y la profundidad son aspectos importantes en el diseño web, y en CSS tenemos las propiedades position y z-index para controlarlos.","title":"Position y Z-index"},{"content":"Head # El elemento HTML \u0026lt;head\u0026gt; provee información general (metadatos) acerca del documento, incluyendo su título y enlaces a scripts y hojas de estilos. Es importante diferenciar este elemento del elemento header el cual sirve como etiqueta semántica para contener el contenido de encabezado de nuestra página web.\nSiempre se escribe antes de la etiqueta body, como hijo de la etiqueta html:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; ... \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Dentro de esta etiqueta no usamos atributos y tampoco escribimos contenido en él. Sirve solo para contener otras etiquetas, dependiendo que necesitemos hacer:\ntitle script noscript link style base meta La etiqueta title # La etiqueta title determina el título de la página. El título se muestra en el navegador, y es especialmente importante ya que es uno de los factores clave para la optimización de motores de búsqueda (SEO).\nLa etiqueta script # Esta etiqueta se utiliza para añadir JavaScript a la página.\nPuede incluirlo en línea, usando una etiqueta de apertura, el código JavaScript y luego la etiqueta de cierre:\n\u0026lt;script\u0026gt; ..some JS \u0026lt;/script\u0026gt; O bien, puede cargar un archivo JavaScript externo mediante el atributo src:\n\u0026lt;script src=\u0026#34;file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; El atributo type de forma predeterminada se establece en text/javascript, por lo que es completamente opcional.\nay algo muy importante que saber sobre esta etiqueta.\nA veces, esta etiqueta se usa en la parte inferior de la página, justo antes de la etiqueta de cierre \u0026lt;/body\u0026gt;. ¿Por qué? Por razones de rendimiento.\nLa carga de secuencias de comandos bloquea de forma predeterminada la representación de la página hasta que la secuencia de comandos se analiza y se carga.\nAl colocarlo en la parte inferior de la página, la secuencia de comandos se carga y ejecuta después de que toda la página ya se analizó y se cargó, lo que brinda una mejor experiencia al usuario que al mantenerlo en la etiqueta head.\nEsto puede ser considerado una mala práctica. Es mejor dejar vivir script dentro de la etiqueta head.\nEn JavaScript moderno, tenemos una alternativa que tiene más rendimiento que mantener el script en la parte inferior de la página: el atributo defer. Este es un ejemplo que carga un archivo file.js, relativo a la URL actual:\n\u0026lt;script defer src=\u0026#34;file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Este es el escenario que desencadena la ruta más rápida a una página de carga rápida y JavaScript de carga rápida.\nLa etiqueta link # La etiqueta link se utiliza para establecer relaciones entre un documento y otros recursos.\nSe utiliza principalmente para vincular un archivo CSS externo para cargarlo.\nEste elemento no tiene etiqueta de cierre.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; ... \u0026lt;link href=\u0026#34;file.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; ... \u0026lt;/head\u0026gt; ... \u0026lt;/html\u0026gt; El atributo media permite la carga de diferentes hojas de estilo dependiendo de las capacidades del dispositivo:\n\u0026lt;link href=\u0026#34;file.css\u0026#34; media=\u0026#34;screen\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;print.css\u0026#34; media=\u0026#34;print\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; O podemos asociar un favicon usando:\n\u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;/assets/apple-touch-icon.png\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;/assets/favicon-32x32.png\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;/assets/favicon-16x16.png\u0026#34; /\u0026gt; La etiqueta style # Esta etiqueta se puede usar para agregar estilos al documento, en lugar de cargar una hoja de estilo externa:\n\u0026lt;style\u0026gt; .some-css { } \u0026lt;/style\u0026gt; La etiqueta meta # Las metaetiquetas realizan una variedad de tareas y son muy, muy importantes, especialmente para el SEO. Los elementos meta solo tienn una etiqueta inicial. La etiqueta más básica es la metaetiqueta description:\n\u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;A nice page\u0026#34; /\u0026gt; Google podría usar esto para generar la descripción de la página en sus páginas de resultados, si encuentra que describe mejor la página que el contenido de la página (no me preguntes cómo).\nLa etiqueta meta charset se utiliza para establecer la codificación de caracteres de la página utf-8 en la mayoría de los casos:\n\u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; La metaetiqueta viewport se usa para decirle al navegador que establezca el ancho de la página en función del ancho del dispositivo.\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; Estas son las meta etiquetas más comunes pero existen muchas más de las cuales puedes seguir investigando si tienes curiosidad sobre este tema. Te dejo un link de referencia.\nMetadatos en HTML - MDN web docs\nMultimedia en HTML # Dentro de HTML podemos incrustas archivos multimedia como imagenes, audio y video. En esta sección aprenderemos a insertar cada uno de ellas.\nImágenes # Las imágenes se pueden mostrar usando la etiqueta img. Esta etiqueta acepta un atributo src, que usamos para establecer la fuente de la imagen:\n\u0026lt;img src=\u0026#34;image.png\u0026#34; /\u0026gt; Podemos utilizar un amplio conjunto de imágenes. Los más comunes son PNG, JPEG, GIF, SVG y, más recientemente, WebP. El estándar HTML requiere que un atributo alt esté presente para describir la imagen. Esto lo utilizan los lectores de pantalla y también los bots de los motores de búsqueda:\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; /\u0026gt; Puede configurar los atributos width y height para establecer el espacio que ocupará el elemento, de modo que el navegador pueda tenerlo en cuenta y no cambie el diseño cuando esté completamente cargado. Toma un valor numérico, expresado en píxeles. Sin embargo, te recomendamos fuertemente modificar estos dos atributos desde CSS.\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; Audio # LA etiqueta audio le permite incrustar contenido de audio en sus páginas HTML.\nEste elemento puede transmitir audio, tal vez usando un micrófono a través de getUserMedia() , o puede reproducir una fuente de audio a la que hace referencia con el atributo src:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; Por defecto, el navegador no muestra ningún control para este elemento. Lo que significa que el audio se reproducirá solo si se establece en reproducción automática (más sobre esto más adelante) y el usuario no puede ver cómo detenerlo o controlar el volumen o moverse a través de la pista.\nPara mostrar los controles integrados, puede agregar el atributo controls:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34; controls\u0026gt;\u0026lt;/audio\u0026gt; Los controles pueden tener una máscara personalizada.\nPuede especificar el tipo MIME del archivo de audio utilizando el atributo type. Si no está configurado, el navegador intentará determinarlo automáticamente:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34; controls type=\u0026#34;audio/mpeg\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; Un archivo de audio por defecto no se reproduce automáticamente. Agregue el atributo autoplay para reproducir el audio automáticamente:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34; controls autoplay\u0026gt;\u0026lt;/audio\u0026gt; Nota: los navegadores móviles no permiten la reproducción automática\nVideo # Esta etiqueta le permite incrustar contenido de video en sus páginas HTML.\nEste elemento puede transmitir video, usando una cámara web getUserMedia() o WebRTC , o puede reproducir una fuente de video a la que haga referencia usando el atributo src:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; De forma predeterminada, el navegador no muestra ningún control para este elemento, solo el video. Lo que significa que el video se reproducirá solo si está configurado para reproducción automática (más sobre esto más adelante) y el usuario no puede ver cómo detenerlo, pausarlo, controlar el volumen o saltar a una posición específica en el video.\nPara mostrar los controles integrados, puede agregar el atributo controls:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls\u0026gt;\u0026lt;/video\u0026gt; Puede especificar el tipo MIME del archivo de video usando el atributo type. Si no está configurado, el navegador intentará determinarlo automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls type=\u0026#34;video/mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; Un archivo de video por defecto no se reproduce automáticamente. Agregue el atributo autoplay para reproducir el video automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls autoplay\u0026gt;\u0026lt;/video\u0026gt; El siguiente video explica como trabajar con cada uno de los conceptos multimedia que hemos aprendido hoy:\nSelectoes # Hace poco vimos como funciona la especificidad en CSS y algunos selectores que podemos usar. Ahora repasemos brevemente como funciona la especificidad con esta imagen:\nComo vimos tambien en ese momento, podemos combinar los selectores segun necesitemos, por ejemplo:\n.animal.perro { background-color: green; } Cuando tenemos esta situación, debemos tener en cuenta que la especificidad se suma, lo cual puede afectar la propiedad que se aplica a un elemento, por ejemplo, si tenemos los siguientes elementos:\n\u0026lt;p class=\u0026#34;animal perro\u0026#34;\u0026gt;Firulais\u0026lt;/p\u0026gt; p { background-color: red; } .animal { background-color: green; } El primer Selector tiene una especificidad de 0.0.1 (Ver la tabla superior) y el de clase tiene una especificidad de 0.1.0 por lo tanto, se aplicará background-color: green. Ahora vamos a añadir un selector de clase al primer selector:\np.perro { background-color: red; } .animal { background-color: green; } Ahora el primero tiene una especificidad de 0.1.1 y el segundo de 0.1.0 por lo tanto, se aplicará background-color: red.\nSi bien es cierto los estilos en CSS se aplican en cascada, cuando tenemos un conflicto entre dos propiedades que pueden afectar al mismo elemento, la especificidad determina cual de los dos estilos se aplica al elemento, aplicando el que tenga una especificidad mayor.\nSi deseamos que el color verde se aplique al elemento, entonces podemos mejorar su especificidad:\np.perro { background-color: red; } .animal.perro { background-color: green; } Ahora el primer selector tiene especificidad de 0.1.1 y el segundo de 0.2.0, por lo que se aplicará background-color: green.\nCuando tenemos un proyecto pequeño probablemente no tengamos problemas con la especificidad, pero a medida que nuestro proyecto crece, la forma en que seleccionamos elementos se vuelve mas compleja, podríamos llegar a tener algo como esto:\n.container \u0026gt; .animal.perro ~ a.link{ /* 0.4.1 */ color: red; } .container \u0026gt; a#bot.link.green{ /* 1.3.1 */ color: green; } Es aquí donde podemos aplicar la especificidad para determinar correctamente cual es el estilo que se está aplicando y como corregirlo de tal forma en la que no afecte el resto de elementos que estoy seleccionando.\nPara que podamos comprender la manera correcta de aplicar los selectores, repasemos los distintos selectores que encontramos en CSS 🧐.\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia4/headcss/","section":"Levels","summary":"Head # El elemento HTML \u0026lt;head\u0026gt; provee información general (metadatos) acerca del documento, incluyendo su título y enlaces a scripts y hojas de estilos.","title":"Head, Multimedia y Selectores"},{"content":"Entender el Box Model es una de las cosas más importantes para trabajar correctamente con HTML y CSS, una vez este concepto nos queda claro, es posible que se nos facilite mucho la construcción de sitios web.\nEn el siguiente artículo encontrarás información mas detallada sobre cómo funciona el 👉 box-model.\nLee atentamente el artículo antes de continuar.\nDisplay # Hace poco estuvimos aprendiendo sobre la propiedad display en CSSy conocimos 4 propiedades básicas:\nblock inline inline-block none Un display es una propiedad en CSS que se utiliza para especificar cómo se debe mostrar un elemento en una página web.\nDisplay block: Este valor hace que el elemento ocupe todo el ancho disponible y comience en una nueva línea después del elemento anterior. Los elementos con display block son, por defecto, visibles y ocupan todo el espacio disponible en la dirección del eje principal (generalmente, la dirección vertical). Ejemplo de código:\ndiv { display: block; } Display inline: Este valor hace que el elemento se comporte como una línea de texto, es decir, no comienza en una nueva línea y solo ocupa el espacio necesario para su contenido. Los elementos con display inline son, por defecto, visibles y solo ocupan el espacio necesario para su contenido. Ejemplo de código:\nspan { display: inline; } Display inline-block: Este valor combina las características de los valores block e inline. Los elementos con display inline-block son, por defecto, visibles y ocupan solo el espacio necesario para su contenido, pero pueden tener un ancho y un alto especificados. Ejemplo de código:\nimg { display: inline-block; width: 50px; height: 50px; } Flexbox: Flexbox es una manera de crear diseños flexibles y adaptativos en CSS. Se utiliza para alinear elementos en una fila o columna y distribuir el espacio disponible de manera eficiente. Un ejemplo de código para crear un contenedor flex:\n.container { display: flex; } Todos estos valores y conceptos son estandarizado por el W3C, las especificaciones de las propiedades y su uso pueden ser consultadas en https://www.w3.org/TR/CSS/\nEl centrado de Elementos # Una práctica común con los elementos, es poder alinearlos y como viste en capitulos pasados, para mover los elementos respecto a otros puedes usar margin o si deseas cambiar su espacio interior usas padding.\nPara este ejemplo pega el siguiente codigo en un documento HTML:\n\u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;contenedor\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;caja1\u0026#34;\u0026gt; Soy una caja \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Tambien añade estos estilos CSS en la etiqueta \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt;:\n.contenedor { width: 100%; height: 100vh; } .caja1 { background-color: #FAF; } Ahora deberías ver que una caja que abarca todo el ancho disponible. vamos a ajustar el ancho, añade la siguiente regla css:\n.caja1 { background-color: #FAF; width: 200px; } Con esto, nuestra caja mide 200px.\nCuando queremos centrar un elemento, podemos usar algunas técnicas sencillas, te explicaré algunas que puedes tener en cuenta:\nUsando Margin: Podemos centrar un objeto de manera Horizontal usando el Margin, para usamos la propiedad margin y le damos un valor auto:\n.caja1 { background-color: #FAF; margin: auto; /* Solo se aplicará a los lados, aun podemos poner un margin para top y bottom*/ } Usando Flex: Flex nos ayuda a posicionar los elementos hijo respecto a su contenedor padre. Para ver una idea más clara, ahora vamos a centrar ambas cajas usando el display flex. Para ello primero quitamos la propiedad margin que habiamos usado en el ejemplo anterior y ahora añadimos lo siguiente a el selector .contenedor:\n.contenedor { width: 100%; height: 100vh; display: flex; /* Indicamos que el contenedor tiene display flex*/ justify-content: center; /* Indicamos que queremos justificar el contenido al centro en el eje horizontal */ } Con esto hemos centrado nuestra caja dentro del eje horizontal, si queremos añadir un centrado vertical podemo hacer lo siguiente:\n.contenedor { width: 100%; height: 100vh; display: flex; /* Indicamos que el contenedor tiene display flex*/ justify-content: center; /* Indicamos que queremos justificar el contenido al centro en el eje horizontal */ align-items: center; /* Indicamos que estamos centrando de manera vertical */ } Esto que puede parecer sencillo, en ocasiones es un dolor de cabeza para muchos desarrolladores por desconocer la correcta aplicación de estas propiedades.\nIntroducción a Flexbox # Si bien es cierto hemos usado Flex para uno de los ejemplos, aún no hemos visto que es este tipo de display y las ventajas que trae, así que veremos un poco de ello en el siguiente video:\n","date":"24 enero 2023","permalink":"/platform/levels/level1_2023/dia4/display/","section":"Levels","summary":"Entender el Box Model es una de las cosas más importantes para trabajar correctamente con HTML y CSS, una vez este concepto nos queda claro, es posible que se nos facilite mucho la construcción de sitios web.","title":"Display"},{"content":"Fuentes # En los albores de la web, solo tenía un puñado de fuentes entre las que podía elegir, afortunadamente, hoy puedes cargar cualquier tipo de fuente en tus páginas. CSS ha ganado muchas buenas capacidades a lo largo de los años en lo que respecta a las fuentes.\nLa propiedad font es la abreviatura de una serie de propiedades, las que veremos hoy son las siguientes:\nfont-family font-weight font-style font-size Veamos cada uno de ellos.\nfont-family # Establece la familia de fuentes que utilizará el elemento. ¿Por qué “familia”? Porque lo que conocemos como fuente en realidad se compone de varias subfuentes. que proporcionan todo el estilo (negrita, cursiva, ligero\u0026hellip;) que necesitamos. Aquí hay un ejemplo de la aplicación Font Book de una Mac: la familia de fuentes Fira Code alberga varias fuentes dedicadas debajo:\nEsta propiedad le permite seleccionar una fuente específica, por ejemplo:\nbody { font-family: Helvetica; } Puede establecer varios valores, por lo que se usará la segunda opción si la primera no se puede usar por algún motivo (si no se encuentra en la máquina o si la conexión de red para descargar la fuente falló, por ejemplo):\nbody { font-family: Helvetica, Arial; } font-weight # Esta propiedad establece el ancho de una fuente. Puede utilizar esos valores predefinidos:\nnormal bold bolder (en relación con el elemento principal) lighter (en relación con el elemento principal) O usando las palabras clave numéricas\n100 200 300 400, asignado a normal 500 600 700 asignado a bold 800 900 donde 100 es la fuente más clara y 900 es la más gruesa.\nfont-style # Le permite aplicar un estilo de cursiva a una fuente. Esta propiedad también permite los valores oblique y normal. Hay muy poca o ninguna diferencia entre usar italic y oblique. El primero es más fácil para mí, ya que HTML ya ofrece un elemento i que significa cursiva (italic).\np { font-style: italic; } font-size # Esta propiedad se utiliza para determinar el tamaño de las fuentes. Puedes pasar 2 tipos de valores: un valor de longitud como px, em, rem, o una palabra clave de valor pre definido. En el Segundo caso los valores que puedes usar son:\nxx-small x-small small medium large x-large xx-large smaller (relativo al elemnto padre) larger (relativo al elemento padre) p { font-size: 20px; } li { font-size: medium; } Fuente personalizada # En ocasiones, querrás usar fuentes que no están por defecto dentro del navegador del cliente o tienes que asegurarte que la fuente que deseas usar, esté disponible para que el cliente tambien pueda renderizarla. Para esto podemos importar fuentes personalizadas a nuestro proyecto, en el siguiente video aprenderás a usar fuentes personalizadas de google a tu página web, da click en el siguiente enlace para abrir el video en youtube:\nFuentes Personalizadas en CSS - Youtube\nTipografía | Texto # Ya hablamos sobre las fuentes, pero hay más en el estilo del texto. En esta sección hablaremos de las siguientes propiedades:\ntext-decoration text-align line-height text-shadow text-decoration # Esta propiedad se usa para agregar decoraciones al texto, incluyendo:\nunderline overline line-through blink none a { text-decoration: underline; } text-align # Por defecto, la alineación del texto tiene el valor start, lo que significa que el texto comienza en el \u0026ldquo;inicio\u0026rdquo;. Los valores posibles son start, end, left, right, center, justify(es bueno tener un espacio constante en los extremos de las líneas):\np { text-align: center; } line-height # Esto le permite cambiar la altura de una línea. Cada línea de texto tiene una cierta altura de fuente, pero luego hay un espacio adicional verticalmente entre las líneas. Esa es la altura de la línea. los valores que puedes utilizar son unidades de medida (px, rem, em, etc).\np { line-height: 1rem; } text-shadow # Aplica una sombra al texto. Por defecto, el texto ahora tiene sombra.\nEsta propiedad acepta un color opcional y un conjunto de valores que establecen:\nel desplazamiento X de la sombra del texto el desplazamiento Y de la sombra del texto el radio de desenfoque Si no se especifica el color, la sombra utilizará el color del texto.\nHay muchas más propiedades CSS para fuentes y textos, pero las veremos más adelanta, incluso como importar otro tipo de fuentes. Si deseas aprender más propiedades de CSS puedes ir al siguiente enlace, la página está en inglés pero puedes usar la opcion de traducir páginas que te da tu navegador:\ncssreference.io\n","date":"24 enero 2023","permalink":"/platform/levels/level1_2023/dia3/texto_css/","section":"Levels","summary":"Fuentes # En los albores de la web, solo tenía un puñado de fuentes entre las que podía elegir, afortunadamente, hoy puedes cargar cualquier tipo de fuente en tus páginas.","title":"Propiedades de Fuente y Texto"},{"content":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.\nPara esto podemos usar la sentencia if y el operador condicional ?, también llamado operador de “signo de interrogación”.\nLa sentencia \u0026ldquo;if\u0026rdquo; # La sentencia if(...) evalúa la condición en los paréntesis, y si el resultado es true ejecuta un bloque de código.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En que año fué publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) alert( \u0026#39;¡Estás en lo cierto!\u0026#39; ); Aquí la condición es una simple igualdad (year == 2015), pero podría ser mucho mas complejo.\nSi quisiéramos ejecutar más de una sentencia, debemos encerrar nuestro bloque de código entre llaves:\nif (year == 2015) { alert( \u0026#34;¡Es Correcto!\u0026#34; ); alert( \u0026#34;¡Eres muy inteligente!\u0026#34; ); } Recomendamos siempre encerrar nuestro bloque de código entre llaves {} siempre que se utilice la sentencia if, inclusive si solo se va a ejecutar una sola sentencia en este caso. Hacer eso mejora la legibilidad.\nConversión Booleana # La sentencia if (…) evalúa la expresión dentro de sus paréntesis y convierte el resultado en booleano.\nEl número 0, un string vacío \u0026quot;\u0026quot;, null, undefined, y NaN se convierte en false. Por esto son llamados valores \u0026ldquo;falso\u0026rdquo;. El resto de los valores se convierten en true, entonces los llamaremos valores \u0026ldquo;verdadero\u0026rdquo;. Entonces, el código bajo esta condición nunca se ejecutaría:\nif (0) { // 0 es falso ... } \u0026hellip;y dentro de esta condición siempre se ejecutará:\nif (1) { // 1 es verdadero ... } La cláusula \u0026ldquo;else\u0026rdquo; # La sentencia if quizás contenga un bloque \u0026ldquo;else\u0026rdquo; opcional. Este se ejecutará cuando la condición sea falsa.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;¡Lo adivinaste, correcto!\u0026#39; ); } else { alert( \u0026#39;¿Cómo puedes estar tan equivocado?\u0026#39; ); // cualquier valor excepto 2015 } Muchas condiciones: \u0026ldquo;else if\u0026rdquo; # Algunas veces, queremos probar variantes de una condición. La clausula else if nos permite hacer esto.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Muy poco...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Muy Tarde\u0026#39; ); } else { alert( \u0026#39;¡Exactamente!\u0026#39; ); } En el código de arriba, JavaScript primero revisa si year \u0026lt; 2015. Si esto es falso, continúa a la siguiente condición year \u0026gt; 2015. Si esta también es falsa, mostrará la última alert.\nPodría haber más bloques else if. Y el último else es opcional.\nEjemplos de Condicionales # En el siguiente video encontrarás mas informción de condicionales e incluso podrás ver el uso de switch, una tipo de condicion que no estaremos usando en el curso pero que es importante que conozcas.\nBucles # Usualmente necesitamos repetir acciones.\nPor ejemplo, mostrar los elementos de una lista uno tras otro o simplemente ejecutar el mismo código para cada número del 1 al 10.\nLos Bucles son una forma de repetir el mismo código varias veces.\nEl bucle \u0026ldquo;while\u0026rdquo; # El bucle while (mientras) tiene la siguiente sintaxis:\nwhile (condition) { // código // llamado \u0026#34;cuerpo del bucle\u0026#34; } Mientras la condición condition sea verdadera, el código del cuerpo del bucle será ejecutado.\nPor ejemplo, el bucle debajo imprime i mientras se cumpla i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // muestra 0, luego 1, luego 2 alert( i ); i++; } Cada ejecución del cuerpo del bucle se llama iteración. El bucle en el ejemplo de arriba realiza 3 iteraciones.\nSi faltara i++ en el ejemplo de arriba, el bucle sería repetido (en teoría) eternamente. En la práctica, el navegador tiene maneras de detener tales bucles desmedidos; y en el JavaScript del lado del servidor, podemos eliminar el proceso.\nCualquier expresión o variable puede usarse como condición del bucle, no solo las comparaciones: El while evaluará y transformará la condición a un booleano.\nPor ejemplo, una manera más corta de escribir while (i != 0) es while (i):\nlet i = 3; while (i) { // cuando i sea 0, la condición se volverá falsa y el bucle se detendrá alert( i ); i--; } El bucle \u0026ldquo;do..while\u0026rdquo; # La comprobación de la condición puede ser movida debajo del cuerpo del bucle usando la sintaxis do..while:\ndo { // cuerpo del bucle } while (condition); El bucle primero ejecuta el cuerpo, luego comprueba la condición, y, mientras sea un valor verdadero, la ejecuta una y otra vez.\nPor ejemplo:\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); Esta sintaxis solo debe ser usada cuando quieres que el cuerpo del bucle sea ejecutado al menos una vez sin importar que la condición sea verdadera. Usualmente, se prefiere la otra forma: while(…) {…}.\nEl bucle \u0026ldquo;for\u0026rdquo; # El bucle for es más complejo, pero también el más usado.\nSe ve así:\nfor (begin; condition; step) { // (comienzo, condición, paso) // ... cuerpo del bucle ... } Aprendamos el significado de cada parte con un ejemplo. El bucle debajo corre alert(i) para i desde 0 hasta (pero no incluyendo) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // muestra 0, luego 1, luego 2 alert(i); } Vamos a examinar la declaración for parte por parte:\nparte comienzo let i = 0 Se ejecuta una vez al comienzo del bucle. condición i \u0026lt; 3 Comprobada antes de cada iteración del bucle. Si es falsa, el bucle finaliza. cuerpo alert(i) Se ejecuta una y otra vez mientras la condición sea verdadera. paso i++ Se ejecuta después del cuerpo en cada iteración. El algoritmo general del bucle funciona de esta forma:\nSe ejecuta comenzar → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → ... Si eres nuevo en bucles, te podría ayudar regresar al ejemplo y reproducir cómo se ejecuta paso por paso en una pedazo de papel.\nEsto es lo que sucede exactamente en nuestro caso:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // se ejecuta comenzar let i = 0 // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // ...finaliza, porque ahora i == 3 Declaración de variable en línea Aquí, la variable \"counter\" `i` es declarada en el bucle. Esto es llamado una declaración de variable \"en línea\". Dichas variables son visibles solo dentro del bucle. for (*!*let*/!* i = 0; i \u0026lt; 3; i++) { alert(i); // 0, 1, 2 } alert(i); // error, no existe dicha variable En vez de definir una variable, podemos usar una que ya exista:\nlet i = 0; for (i = 0; i \u0026lt; 3; i++) { // usa una variable existente alert(i); // 0, 1, 2 } alert(i); // 3, visible, porque fue declarada fuera del bucle Omitiendo partes # Cualquier parte de for puede ser omitida.\nPor ejemplo, podemos quitar comienzo si no necesitamos realizar nada al inicio del bucle.\nComo aquí:\nlet i = 0; // Ya tenemos i declarada y asignada for (; i \u0026lt; 3; i++) { // no hay necesidad de \u0026#34;comenzar\u0026#34; alert( i ); // 0, 1, 2 } También podemos eliminar la parte paso:\nlet i = 0; for (; i \u0026lt; 3;) { alert( i++ ); } Esto hace al bucle idéntico a while (i \u0026lt; 3).\nEn realidad podemos eliminar todo, creando un bucle infinito:\nfor (;;) { // se repite sin limites } Por favor, nota que los dos punto y coma ; del for deben estar presentes. De otra manera, habría un error de sintaxis.\nRompiendo el bucle # Normalmente, se sale de un bucle cuando la condición se vuelve falsa.\nPero podemos forzar una salida en cualquier momento usando la directiva especial break.\nPor ejemplo, el bucle debajo le pide al usuario por una serie de números, \u0026ldquo;rompiéndolo\u0026rdquo; cuando un número no es ingresado:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Ingresa un número\u0026#34;, \u0026#39;\u0026#39;); *!* if (!value) break; // (*) */!* sum += value; } alert( \u0026#39;Suma: \u0026#39; + sum ); La directiva break es activada en la línea (*) si el usuario ingresa una línea vacía o cancela la entrada. Detiene inmediatamente el bucle, pasando el control a la primera línea después de el bucle. En este caso, alert.\nLa combinación \u0026ldquo;bucle infinito + break según sea necesario\u0026rdquo; es ideal en situaciones donde la condición del bucle debe ser comprobada no al inicio o al final de el bucle, sino a la mitad o incluso en varias partes del cuerpo.\nContinuar a la siguiente iteración # La directiva continue es una \u0026ldquo;versión más ligera\u0026rdquo; de break. No detiene el bucle completo. En su lugar, detiene la iteración actual y fuerza al bucle a comenzar una nueva (si la condición lo permite).\nPodemos usarlo si hemos terminado con la iteración actual y nos gustaría movernos a la siguiente.\nEl bucle debajo usa continue para mostrar solo valores impares:\nfor (let i = 0; i \u0026lt; 10; i++) { // si es verdadero, saltar el resto del cuerpo *!*if (i % 2 == 0) continue;*/!* alert(i); // 1, luego 3, 5, 7, 9 } Para los valores pares de i, la directiva continue deja de ejecutar el cuerpo y pasa el control a la siguiente iteración de for (con el siguiente número). Así que el alert solo es llamado para valores impares.\nLa directiva `continue` ayuda a disminuir la anidación Un bucle que muestra valores impares podría verse así: for (let i = 0; i \u0026lt; 10; i++) { if (i % 2) { alert( i ); } } Desde un punto de vista técnico, esto es idéntico al ejemplo de arriba. Claro, podemos simplemente envolver el código en un bloque if en vez de usar continue.\nPero como efecto secundario, esto crearía un nivel más de anidación (la llamada a alert dentro de las llaves). Si el código dentro de if posee varias líneas, eso podría reducir la legibilidad en general. Más sobre bucles # En el siguiente video vamos a ver algunos ejemplos de como aplicar los bucles que hemos mencionado:\n","date":"24 enero 2023","permalink":"/platform/levels/level1_2023/dia3/if_bucles/","section":"Levels","summary":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.","title":"Condicionales y Bucles"},{"content":" Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.\n¿Qué es JavaScript? # JavaScript fue creado para “dar vida a las páginas web”.\nLos programas en este lenguaje se llaman scripts. Se pueden escribir directamente en el HTML de una página web y ejecutarse automáticamente a medida que se carga la página.\nLos scripts se proporcionan y ejecutan como texto plano. No necesitan preparación especial o compilación para correr.\nEn este aspecto, JavaScript es muy diferente a otro lenguaje llamado Java.\n¿Por qué se llama JavaScript? Cuando JavaScript fue creado, inicialmente tenía otro nombre: “LiveScript”. Pero Java era muy popular en ese momento, así que se decidió que el posicionamiento de un nuevo lenguaje como un “Hermano menor” de Java ayudaría. Pero a medida que evolucionaba, JavaScript se convirtió en un lenguaje completamente independiente con su propia especificación llamada ECMAScript, y ahora no tiene ninguna relación con Java. Hoy, JavaScript puede ejecutarse no solo en los navegadores, sino también en servidores o incluso en cualquier dispositivo que cuente con un programa especial llamado El motor o intérprete de JavaScript.\nDiferentes motores tienen diferentes “nombres en clave”. Por ejemplo:\nV8 – en Chrome, Opera y Edge. SpiderMonkey – en Firefox. …Existen otros nombres en clave como “Chakra” para IE , “JavaScriptCore”, “Nitro” y “SquirrelFish” para Safari, etc. Es bueno recordar estos términos porque son usados en artículos para desarrolladores en internet. Por ejemplo, si “la característica X es soportada por V8”, entonces probablemente funciona en Chrome, Opera y Edge.\n¿Como trabajan los motores? Los motores son complicados, pero los fundamentos son fáciles. El motor (embebido si es un navegador) lee (“analiza”) el script. Luego convierte (“compila”) el script a lenguaje de máquina. Por último, el código máquina se ejecuta, muy rápido. El motor aplica optimizaciones en cada paso del proceso. Incluso observa como el script compilado se ejecuta, analiza los datos que fluyen a través de él y aplica optimizaciones al código maquina basadas en ese conocimiento. Tipos de datos # Un valor en JavaScript siempre pertenece a un tipo de dato determinado. Por ejemplo, un string o un número.\nHay ocho tipos de datos básicos en JavaScript. En esta semana cubriremos la mayoría en general y posteriormente hablaremos de cada uno de ellos en detalle.\nPodemos almacenar un valor de cualquier tipo dentro de una variable. Por ejemplo, una variable puede contener en un momento un string y luego almacenar un número\n// no hay error let message = \u0026#34;hola\u0026#34;; message = 123456; Los lenguajes de programación que permiten estas cosas, como JavaScript, se denominan “dinámicamente tipados”, lo que significa que allí hay tipos de datos, pero las variables no están vinculadas rígidamente a ninguno de ellos.\nNumber # let n = 123; n = 12.345; El tipo number representa tanto números enteros como de punto flotante.\nHay muchas operaciones para números. Por ejemplo, multiplicación *, división /, suma +, resta -, y demás.\nString # Un string en JavaScript es una cadena de caracteres y debe colocarse entre comillas.\nlet str = \u0026#34;Hola\u0026#34;; let str2 = \u0026#39;Las comillas simples también están bien\u0026#39;; let phrase = `se puede incrustar otro ${str}`; En JavaScript, hay 3 tipos de comillas.\nComillas dobles: \u0026quot;Hola\u0026quot; . Comillas simples: 'Hola' . Backticks (comillas invertidas): `Hola` . Las comillas dobles y simples son comillas “sencillas” (es decir, funcionan igual). No hay diferencia entre ellas en JavaScript.\nLos backticks son comillas de “funcionalidad extendida”. Nos permiten incrustar variables y expresiones en una cadena de caracteres encerrándolas en ${...}, por ejemplo:\nlet name = \u0026#34;John\u0026#34;; // incrustar una variable alert( `Hola, *!*${name}*/!*!` ); // Hola, John! // incrustar una expresión alert( `el resultado es *!*${1 + 2}*/!*` ); // el resultado es 3 La expresión dentro de ${...} se evalúa y el resultado pasa a formar parte de la cadena. Podemos poner cualquier cosa ahí dentro: una variable como name, una expresión aritmética como 1 + 2, o algo más complejo.\nToma en cuenta que esto sólo se puede hacer con los backticks. ¡Las otras comillas no tienen esta capacidad de incrustación!\nalert( \u0026#34;el resultado es ${1 + 2}\u0026#34; ); // el resultado es ${1 + 2} // (las comillas dobles no hacen nada) Boolean (tipo lógico) # El tipo boolean tiene sólo dos valores posibles: true y false.\nEste tipo se utiliza comúnmente para almacenar valores de sí/no: true significa “sí, correcto, verdadero”, y false significa “no, incorrecto, falso”.\nPor ejemplo:\nlet nameFieldChecked = true; // sí, el campo name está marcado let ageFieldChecked = false; // no, el campo age no está marcado Los valores booleanos también son el resultado de comparaciones:\nlet isGreater = 4 \u0026gt; 1; alert( isGreater ); // verdadero (el resultado de la comparación es \u0026#34;sí\u0026#34;) Object y Symbol # El tipo object (objeto) es especial.\nTodos los demás tipos se llaman “primitivos” porque sus valores pueden contener una sola cosa (ya sea una cadena, un número o lo que sea). Por el contrario, los objetos se utilizan para almacenar colecciones de datos y entidades más complejas.\nSiendo así de importantes, los objetos merecen un trato especial. Nos ocuparemos de ellos más adelante después de aprender más sobre los primitivos.\nEl operador typeof # El operador typeof devuelve el tipo de dato del operando. Es útil cuando queremos procesar valores de diferentes tipos de forma diferente o simplemente queremos hacer una comprobación rápida.\nLa llamada a typeof x devuelve un string con el nombre del tipo:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert // \u0026#34;function\u0026#34; (3) Operadores Básicos # Conocemos varios operadores matemáticos porque nos los enseñaron en la escuela. Son cosas como la suma +, multiplicación *, resta -, etcétera.\nTérminos: “unario”, “binario”, “operando” # Antes de continuar, comprendamos la terminología común.\nUn operando – es a lo que se aplican los operadores. Por ejemplo, en la multiplicación de 5 * 2 hay dos operandos: el operando izquierdo es 5 y el operando derecho es 2. A veces, la gente los llama “argumentos” en lugar de “operandos”.\nUn operador es unario si tiene un solo operando. Por ejemplo, la negación unaria - invierte el signo de un número:\nlet x = 1; x = -x; alert( x ); // -1, se aplicó negación unaria Un operador es binario si tiene dos operandos. El mismo negativo también existe en forma binaria:\nlet x = 1, y = 3; alert( y - x ); // 2, binario negativo resta valores Formalmente, estamos hablando de dos operadores distintos: la negación unaria (un operando: revierte el símbolo) y la resta binaria (dos operandos: resta).\nMatemáticas # Están soportadas las siguientes operaciones:\nSuma +, Resta -, Multiplicación *, División /, Resto %, Exponenciación **. Los primeros cuatro son conocidos mientras que % y ** deben ser explicados más ampliamente.\nResto % # El operador resto %, a pesar de su apariencia, no está relacionado con porcentajes.\nEl resultado de a % b es el resto de la división entera de a por b.\nPor ejemplo:\nalert( 5 % 2 ); // 1, es el resto de 5 dividido por 2 alert( 8 % 3 ); // 2, es el resto de 8 dividido por 3 alert( 8 % 4 ); // 0, es el resto de 8 dividido por 4 Exponenciación ** # El operador exponenciación a ** b eleva a a la potencia de b.\nEn matemáticas de la escuela, lo escribimos como ab.\nPor ejemplo:\nalert( 2 ** 2 ); // 2² = 4 alert( 2 ** 3 ); // 2³ = 8 alert( 2 ** 4 ); // 2⁴ = 16 Matemáticamente, la exponenciación está definida para operadores no enteros también.\nPor ejemplo, la raíz cuadrada es el exponente ½:\nalert( 4 ** (1/2) ); // 2 (potencia de 1/2 es lo mismo que raíz cuadrada) alert( 8 ** (1/3) ); // 2 (potencia de 1/3 es lo mismo que raíz cúbica) Concatenación de cadenas con el binario + # Ahora veamos las características de los operadores de JavaScript que van más allá de la aritmética escolar.\nNormalmente el operador + suma números.\nPero si se aplica el + binario a una cadena, los une (concatena):\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; alert(s); // mystring Tenga presente que si uno de los operandos es una cadena, el otro es convertido a una cadena también.\nPor ejemplo:\nalert( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; alert( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; Vieron, no importa si el primer operando es una cadena o el segundo.\nAquí hay un ejemplo algo más complejo:\nalert(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; y no \u0026#34;221\u0026#34; Aquí, los operadores trabajan uno después de otro. El primer + suma dos números entonces devuelve 4, luego el siguiente + le agrega la cadena 1, así que se evalúa como 4 + '1' = 41.\nalert(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34;, no es \u0026#34;14\u0026#34; Aquí el primer operando es una cadena, el compilador trata los otros dos operandos como cadenas también. El 2 es concatenado a '1', entonces es como '1' + 2 = \u0026quot;12\u0026quot; y \u0026quot;12\u0026quot; + 2 = \u0026quot;122\u0026quot;.\nEl binario + es el único operador que soporta cadenas en esa forma. Otros operadores matemáticos trabajan solamente con números y siempre convierten sus operandos a números.\nPor ejemplo, resta y división:\nalert( 2 - \u0026#39;1\u0026#39; ); // 1 alert( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3 Operadores Lógicos # Hay cuatro operadores lógicos en JavaScript: || (O), \u0026amp;\u0026amp; (Y), ! (NO), ?? (Fusión de nulos). Aquí cubrimos los primeros tres, el operador ?? se verá más adelante.\nAunque sean llamados lógicos, pueden ser aplicados a valores de cualquier tipo, no solo booleanos. El resultado también puede ser de cualquier tipo.\nVeamos los detalles.\n|| (OR) # El operador OR se representa con dos símbolos de linea vertical:\nresult = a || b; En la programación clásica, el OR lógico esta pensado para manipular solo valores booleanos. Si cualquiera de sus argumentos es true, retorna true, de lo contrario retorna false.\nEn JavaScript, el operador es un poco más complicado y poderoso. Pero primero, veamos qué pasa con los valores booleanos.\nHay cuatro combinaciones lógicas posibles:\nalert(true || true); // true (verdadero) alert(false || true); // true alert(true || false); // true alert(false || false); // false (falso) Como podemos ver, el resultado es siempre true excepto cuando ambos operandos son false.\nSi un operando no es un booleano, se lo convierte a booleano para la evaluación.\nPor ejemplo, el número 1 es tratado como true, el número 0 como false:\nif (1 || 0) { // Funciona como if( true || false ) alert(\u0026#34;valor verdadero!\u0026#34;); } La mayoría de las veces, OR || es usado en una declaración if para probar si alguna de las condiciones dadas es true.\nPor ejemplo:\nlet hour = 9; *!* if (hour \u0026lt; 10 || hour \u0026gt; 18) { */!* alert( \u0026#39;La oficina esta cerrada.\u0026#39; ); } Podemos pasar mas condiciones:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert(\u0026#34;La oficina esta cerrada.\u0026#34;); // Es fin de semana } \u0026amp;\u0026amp; (AND) # El operador AND es representado con dos ampersands \u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; En la programación clásica, AND retorna true si ambos operandos son valores verdaderos y false en cualquier otro caso.\nalert(true \u0026amp;\u0026amp; true); // true alert(false \u0026amp;\u0026amp; true); // false alert(true \u0026amp;\u0026amp; false); // false alert(false \u0026amp;\u0026amp; false); // false Un ejemplo con if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert(\u0026#34;La hora es 12:30\u0026#34;); } Al igual que con OR, cualquier valor es permitido como operando de AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluado como true \u0026amp;\u0026amp; false alert( \u0026#34;no funcionará porque el resultado es un valor falso\u0026#34; ); } Más operadores en JS # Para seguir aprendiendo de estos operadores, mira el siguiente video donde reforzarás el conocimiento sobre los operadores que acabamos de ver y aprenderás algunos más que son comuness:\n","date":"23 enero 2023","permalink":"/platform/levels/level1_2023/dia2/introjs/","section":"Levels","summary":"Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.","title":"JavaScript"},{"content":"Que es CSS? # Como HTML, CSS (Cascading Style Sheets) u Hojas de estilo en cascada en español, no es realmente un lenguaje de programación, tampoco es un lenguaje de marcado. Es un lenguaje de hojas de estilo, es decir, te permite aplicar estilos de manera selectiva a elementos en documentos HTML. Por ejemplo, para seleccionar todos los elementos de párrafo en una página HTML y volver el texto dentro de ellos de color rojo, has de escribir este CSS:\nCSS nos ayuda a generar un gran cambio en nuestras páginas web y su sintáxis es distintia a HTML.\nSintáxis # El selector nos ayuda a identificar a que elemento(s) se le aplicarán los estilos. El bloque de declaración es donde se escriben los estilos, tener en cuenta que se inicia y culmina con llaves {}. La declaración es donde ajustamos una cosa de el/los elemento(s), se compone por la propiedad que representa lo que vamos a ajustar y el valor que representa como lo vamos a cambiar (Cambiaremos los elementos p, le cambiaremos el color a rojo).\nDonde escribir CSS # Hay 3 lugares o formas de escribir CSS: inline, internal y external (en línea, interno y externo).\nInline # dentro de las etiquetas de apertura HTML podemos añadir el atributo style y como parte de su valor, podemos indicar las declaraciones CSS separadas por ;\nInternal # dentro de la \u0026lt;head\u0026gt; podemos insertar la etiqueta \u0026lt;style\u0026gt; donde podremos ingresar nuestro codigo css. Esto trae la ventaja de usar los selectores a diferencia de los estilos inline, que se aplican a cada elemento.\nExternal # External hace referencia a escribir CSS en un archivo aparte donde solo irá este código. la forma de escribir aquí sigue siendo en bloque sin la necesidad de una etiqueta \u0026lt;style\u0026gt;, aunque necesitamos enlazar el archivo HTML con este, por medio de una etiqueta link dentro del head similar a esta:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./css/main.css\u0026#34;\u0026gt; Selectores CSS # Un selector nos permite asociar una o más declaraciones a uno o más elementos de la página.\nSelectores Básicos # Podemos apuntar a ese elemento usando este selector p, que apunta a todos los elementos que usan la etiqueta p en la página. Una regla CSS simple para lograr lo que queremos es:\nCada etiqueta HTML tiene un selector correspondiente, por ejemplo: div, span, img.\nSi un selector coincide con varios elementos, todos los elementos de la página se verán afectados por el cambio.\nLos elementos HTML tienen 2 atributos que se utilizan con mucha frecuencia en CSS para asociar el estilo a un elemento específico de la página: class y id.\nHay una gran diferencia entre esos dos: dentro de un documento HTML puede repetir el mismo valor class en varios elementos, pero solo puede usar id una vez. Asimismo, usando clases puedes seleccionar un elemento con 2 o más nombres de clase específicos, algo que no es posible usando ids.\nLas clases se identifican mediante el símbolo \u0026lsquo;.\u0026rsquo; , mientras que los identificadores utilizan el símbolo \u0026lsquo;#\u0026rsquo; (numeral, hash tag).\nEjemplo usando una clase:\n\u0026lt;!-- HTML --\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;!--Usamos el atributo class --\u0026gt; /* CSS */ .dog-name { color: yellow; } Ejemplo usando un ID:\n\u0026lt;!-- HTML --\u0026gt; \u0026lt;p id=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;!--Usamos el atributo id --\u0026gt; /* CSS */ #dog-name { color: yellow; } Combinando Selectores # Hasta ahora hemos visto cómo apuntar a un elemento, una clase o una identificación. Introduzcamos selectores más potentes.\nSeleccionar Elemento con clase o ID # Puede apuntar a un elemento específico que tenga una clase o una identificación adjunta.\nEjemplo usando una clase:\n\u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Mauricio\u0026lt;/p\u0026gt; p.dog-name { /* Solo seleccionamos el elemento p que tiene la clase dog-name */ color: yellow; } ¿Por qué querría hacer eso, si la clase o la identificación ya proporciona una forma de apuntar a ese elemento? Puede que tengas que hacer eso para tener más especificidad. Veremos qué significa eso más tarde.\nApuntando a múltiples clases # Puedes apuntar a un elemento con una clase específica usando .class-name, como vio anteriormente. Puedes apuntar a un elemento con 2 (o más) clases combinando los nombres de clase separados por un punto, sin espacios.\nEjemplo:\n\u0026lt;p class=\u0026#34;dog-name roger\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Mauricio\u0026lt;/p\u0026gt; .dog-name.roger { /* Solo seleccionamos el elemento que tiene la clase dog-name y la clase roger */ color: yellow; } Combinando clases e id\u0026rsquo;s # De la misma manera, puede combinar una clase y una identificación.\nEjemplo:\n\u0026lt;p class=\u0026#34;dog-name\u0026#34; id=\u0026#34;roger\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34; id=\u0026#34;mauricio\u0026#34;\u0026gt;Mauricio\u0026lt;/p\u0026gt; .dog-name#roger { /* Seleccionamos el elemento que tiene la clase dog-name y el id roger */ color: yellow; } Especificidad # Lo que acabamos de ver tiene un propósito importante y esto es para que evitemos aplicar estilos a elementos que no deseamos, a medida que nuestra página crezca, comenzaremos a usar estas combinaciones para tener un mejor orden en los estilos que aplicamos. Sin embargo al aplicar estos selectores, la forma en la que se aplica los estilos puede romper el orden en cascada que conocemos por un concepto llamado especificidad.\nPara entender ese concepto mira el siguiente video donde entendemos que es la especificidad y como afecta los estilos que aplicamos a los elementos.\nAquí te dejo una tabla donde podrás ver la especificidad entre elementos y selectores:\nMás Selectores # Hay muchas más formas de combinar los selectores, aquí tienes una lista con más selectores, puedes apoyarte en el traductor de google para entender algunos terminos que vienen en ingles en las siguientes imágenes:\n","date":"23 enero 2023","permalink":"/platform/levels/level1_2023/dia2/estiloscss/","section":"Levels","summary":"Que es CSS?","title":"Estilos base de CSS y Selectores"},{"content":"Estamos trabajando para añadir información en esta seccion 😀\n","date":"19 enero 2023","permalink":"/platform/tags/","section":"Tags","summary":"Estamos trabajando para añadir información en esta seccion 😀","title":"Tags"},{"content":"Estamos trabajando para añadir información en esta seccion 😀\n","date":"19 enero 2023","permalink":"/platform/categories/","section":"Categories","summary":"Estamos trabajando para añadir información en esta seccion 😀","title":"Categories"},{"content":"Organizar HTML # Durante el proceso de inducción aprendiste las bases de HTML, hoy vamos a repasar algunas cosas de este lenguaje.\nAnatomía HTML # Anatomía HTML\nLos elementos HTML que siempre encontrarás luego de \u0026lt;!DOCTYPE html\u0026gt; son:\n\u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;: El elemento \u0026lt;html\u0026gt; envuelve todo el contenido de la página. A veces se le conoce como el elemento raíz. \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;: Es la cabecera de la página y no la verá el cliente. Aquí pondrás información e instrucciones de tu página que sólo deberá interpretar el navegador. \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;: las etiquetas meta sirven para dar diferentes instrucciones al navegador, esta configuración en concreto le dice al navegador que tu página usará la configuración de caracteres UTF-8 que incluye la mayoría de caracteres de todos los lenguajes humanos escritos. Esta etiqueta va dentro de la etiqueta \u0026lt;head\u0026gt;. \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt;: Aquí se establece el título de la página, este aparecerá en la pestaña del navegador. También se utiliza para describir la página. Esta etiqueta va dentro de la etiqueta \u0026lt;head\u0026gt;. \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;: El elemento \u0026lt;body\u0026gt; contiene todo el contenido que quieres mostrar a los usuarios cuando visitan tu página, ya sea texto, imágenes, vídeos, juegos, pistas de audio reproducibles o cualquier otra cosa. index.html # Cuando trabajamos con archivos HTML debemos comenzar teniendo en cuenta el nombre de nuestro archivo. como convención, cuando se crea un sitio web, el archivo principal se llama index.html . Esto es porque los navegadores por defecto, al ingresar en una dirección web, buscan el archivo HTML que tenga este nombre, y será la primera página que se visita.\nLos demás archivos HTML pueden tener otro nombre según sea necesario.\nAsimismo, si tenemos archivos HTML dentro de una carpeta, debemos ponerle de nombre index.html al archivo HTML principal de esa carpeta.\nIndentación # Cuando tenemos nuestros archivos HTML, habrás notado que algunos elementos están más a la derecha que otros:\nEn este ejemplo, los elementos \u0026lt;meta\u0026gt; y \u0026lt;title\u0026gt; se encuentran indentados. Es decir, están separados del margen izquierdo por una tabulación haciendo la lectura más sencilla. Con esto entendemos que los elementos \u0026lt;meta\u0026gt; y \u0026lt;title\u0026gt; son elementos \u0026ldquo;hijo\u0026rdquo; del elemento \u0026lt;head\u0026gt;.\nEsta estructura ayuda a la legibilidad del código y es de uso común en los lenguajes de programación. Te recomendamos seguir esta buena práctica a fin de que tu código sea legible y evitar que se convierta en un caos.\nCSS3: Box Model # Ya que entendemos las cosas básicas de HTML y CSS debemos tener presente lo sigiuente: Cada elemento en el diseño web es una caja rectangular. Este punto es importante para comprender como trabajamos con CSS y lograr el diseño que queremos lgrar. Si bien es cierto podemos posicionar los elementos y darles estilos con CSS, es importante que entendamos como funciona esa caja en sí.\nEl Box model (modelo de caja) explica el tamaño de los elementos en función de algunas propiedades de CSS.\nDesde el interior hacia el exterior, tenemos:\nContent (contenido) padding (relleno) border (borde o frontera) margin (margen) La mejor manera de visualizar el modelo de caja es abrir el navegador DevTools y comprobar cómo se muestra:\nAquí puedes ver cómo Firefox me dice las propiedades de un elemento span que destaqué. Hice clic con el botón derecho en él, presioné Inspeccionar elemento y fui al panel Diseño de DevTools.\nMira, el espacio azul claro es el área de content. Rodeándolo está el padding, luego el border y finalmente el margin. De forma predeterminada, si estableces un ancho (o alto) en el elemento, se aplicará al área de content . Todos los cálculos de padding, border y margin se realizan fuera del valor, por lo que debes tener esto en cuenta cuando realices el cálculo. Se puede cambiar este comportamiento utilizando Box-sizing (puedes buscar más información de esta propiedad aqui).\nEntender este punto, te puede ayudar a realizar diseño con CSS de manera más sencilla, por lo que mira el siguiente video y toma nota entre las diferencias entre cada una de las partes del box model:\nDisplay # Ahora que entiendes un poco mejor lo que es el box model, es importante que sepas que las cajas en CSS pueden comportarse de manera distinta de acuerdo a una propiedad conocida como display. Esta propiedad nos indica la forma en la que el elemento será representado en el navegador y usar alguno de estos display, alterará considerablemente el comportamiento del navegador con el elemento y sus hijos.\nEn esta sección analizaremos los más importantes no cubiertos en otra parte:\nblock inline inline-block none en el siguiente video aprenderás la diferencia entre cada uno de estos y como afectan al modelo de caja:\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/dia1/html/","section":"Levels","summary":"Organizar HTML # Durante el proceso de inducción aprendiste las bases de HTML, hoy vamos a repasar algunas cosas de este lenguaje.","title":"HTML 5 y CSS3"},{"content":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás. Toma apuntes de lo que consideres mas relevante y anota los temas que sean más complicados de entender para que puedas resolver tus dudas posteriormente. Sin mas rodeos, comencemos 😉.\nFundamentos de la Programación # La programación en pocas palabras, es darle datos e instrucciones a una computadora para que procese esos datos siguiendo las instrucciones que le dimos para que nos devuelva un resultado. ¿Y para qué? para resolver problemas de nuestra vida como hacer operaciones matemáticas, sacar estadísticas, automatizar procesos, etcétera.\nPero esos problemas se pueden resolver de diferentes maneras, algunas más rápidas y eficientes y otras no tanto. Pero todas con el fin de encontrar la solución al problema.\n¿Qué es la Programación? # Es un término común que se puede describir según la Real Academia de la Lengua como \u0026ldquo;Acción o efecto de programar\u0026rdquo;. ¿Y programar? se define como Idear y ordenar las acciones necesarias para realizar un proyecto.\nTodo esto en términos generales, no se refiere específicamente a la programación de lenguajes informáticos, pero nos da una idea de lo que es.\nPara ejecutar lo que el usuario desea hacer en su computadora, o bien para resolver un problema específico, este precisa buscar un software que realice o ejecute con exactitud la tarea que se ha planteado o elaborar y desarrollar (escribir) un programa que la realice. El trabajo de elaboración de un programa se denomina “programación”. Pero la programación no es solo el trabajo de escritura del código, sino todo un conjunto de tareas que se deben cumplir, a fin de que el código que se escribió resulte correcto, robusto, y cumpla con el objetivo o los objetivos para los que fue creado.\nLas afirmaciones que se derivan de lo anterior son varias:\nConocer las herramientas, los formalismos y los métodos para transformar un problema en un programa escrito en un lenguaje (que posiblemente no será el lenguaje máquina), y para qué dicho programa pueda ser transformado en un código ejecutable.\nSaber transformar el problema inicial en un algoritmo y luego en un programa.\nLa primera afirmación es genérica y se considera para varias categorías de problemas para resolver. Por su parte, la segunda es específica de un problema determinado que se tiene que resolver, para lo cual existen diversas metodologías específicas de resolución para este tipo de problemas.\nPara los casos de problemas muy generales, en ocasiones existen métodos conocidos que solo se adaptan a un problema en particular. El método es, por lo general, un algoritmo o una técnica de programación.\nDesarrollo Web # Web Developing ¿Y el Desarrollo Web?\nLa aplicación de la programación y la lógica son muchos: Inteligencia Artificial, Administración de base de datos, Desarrollo de videojuegos, Desarrollo de Sistemas operativos, etc.\nEntre todas estas ramas encontramos el Desarrollo Web.\nDesarrollo web es un término que define la creación de sitios web para Internet o una intranet.\nEl Programador Web es un profesional que trabaja con desarrolladores de páginas web, softwares, operadores de sistemas (SysOps) que ejecuta y/o desarrollar las versiones e implementaciones de códigos. El puesto requiere de personas que también posean soft skills o habilidades blandas relevantes que impacten positivamente el control de calidad de las pruebas y los equipos de operaciones; además de fomentar un entorno colaborativo.\nDentro del Desarrollo Web encontramos distintos roles:\nDesarrollador web front-end es el profesional responsable de proyectar y construir la interfaz del usuario en un proyecto web. Es quien cuida de la visualización y la interfaz gráfica.\nDesarrollador web back-end Son los que trabajan con aplicaciones haciendo código que sólo el servidor entenderá.\nDesarrollador web full-stack - Por supuesto que nada impide que un desarrollador trabaje en ambas áreas. Por eso el término full-stack se refiere a que el profesional que trabaja tanto con el back-end como el front-end.\nAquí te vamos a enseñar lo necesario para que tengas las habilidades de un desarrollador Full-Stack así que ¡preparate para aprender creando! 😁.\nComenzaremos con las habilidades de un desarrollador Front-end y seguiremos con el Back-end.\nLas primeras tecnologías que aprenderás son: HTML5, CSS3 y JavaScript. Los dos primeros tienen como objetivo darle estructura, contenido y diseño a una página web, y el último se encarga de la lógica que hay detrás de una página.\nPáginas web estáticas vs Dinámicas # Al empezar en el mundo del desarrollo web, seguro te estarás preguntando ¿Cómo inicio a hacer páginas web? Veamos primero las dos diferencias entre estos productos web.\nPáginas Estáticas # Lo primero, hay páginas estáticas y páginas dinámicas. Las páginas estáticas van a ser todos los productos web o todas las páginas que van a tener pura información para consumir, ya sea texto e imágenes, y que esta información no va a cambiar. Siempre va a ser la misma. Por ejemplo, algún blog post, si te metes algún blog de alguien, siempre vas a poder ver los blogs de esa persona.\nEsta información raramente va a cambiar. Posiblemente van a llegar personas nuevas al equipo o se van a ir personas o van a agregar cierta información distinta de la empresa o de los productos que tienen, pero gran parte de la información se va a quedar ahí de forma estática por mucho tiempo, y si tú generas esta página, posiblemente te vayan a contactar meses después para poderte decir como \u0026ldquo;oye, queremos hacer este cambio, ahora queremos agregar nuevas fotos o una nueva dirección de donde estamos nosotros\u0026rdquo;. O \u0026ldquo;hay 2 miembros nuevos del equipo, creemos que agregue su información y su foto\u0026rdquo;. Pero estas páginas siguen siendo estáticas porque la información perse nunca va a cambiar. Si tú entras, hoy vas a ver lo mismo. Si entras mañana, no va a haber algún tipo de cambio.\nLo más importante es que estas páginas no están conectadas a un servidor o a una base de datos, no necesitas generar interacción con la base de Datos porque no hay algo que generes este cambio del lado del cliente. El cliente desde el navegador no tendrá alguna interacción que le permita cambiar información de la página web, no tendrá algún login, etc.\nEjemplo de página estática # Las Landing page son un buen ejemplo de páginas estáticas. Como en este caso. La información que verán los clientes siempre es la misma y no cambiará a menos que se solicite. No hay opción de hacer login y esto es solo informativo.\nEste tipo de páginas no es menos importante, simplemente tiene un objetivo distinto a una página dinámica y son más sencillas de construir.\nPáginas Dinámicas # Las páginas dinámicas, también conocidas como web Apps, ya dejan de ser páginas y se convierten más en aplicaciones por todas las cosas que vas a poder hacer con estas mismas.\nEstas sí están conectadas a una base de Datos, por lo que el usuario, o sea nosotros a través del navegador, si podemos generar una interacción con la página o con la aplicación. Ahora se tiene que guardar cierta información o estado de lo que estemos haciendo, se esperaría poder tener un login para yo tener mi cuenta y poder guardar información. Se esperaría poder interactuar ya sea con productos si quiero comprar algo, si es que estoy viendo algo de mis seguidores en las redes, o si quiero ver a las personas que sigo.\nEjemplo de página dinámica # En páginas como Twitter, tú si puedes interactuar. Puedes dejarla de esa forma y dentro de unos 15 minutos si actualizas, la información será distinta. Esta página está en comunicación con el servidor para traer los nuevos cambios según el usuario lo solicite. La información que ves allí es específica para ti, y otro usuario podría ver twits distintos.\nRecursos Para comenzar # Antes de continuar, debemos asegurarnos de tener los siguientes programas que formarán parte de este curso:\nVSCode: Este es el editor de código que estaremos utilizando a lo largo del curso, si bien es cierto que existen varios editores y puedes usar el que te sea mas cómodo, te recomendamos este para que todos estemos trabajando en las mismas situaciones y sea más fácil poder interactuar. En caso aun no lo tengas, puedes descargarlo desde el siguiente enlace:\nDownload VS Code\nNavegadores: Es probable que ya cuentes con algunos de estos, sin embargo cuando trabajamos en desarrollo web, es importante contar con diferentes opciones ya que nuestra página web puede comportarse de manera diferente en cada uno de estos por los distintos motores de interpretación que utilizan. Algunos de los navegadores que te recomendamos tener para tus pruebas son:\nBrave Chrome Edge Firefox En cada uno de los anteriores links, tendrás una opción de descarga.\nSi tienes dificultades para instalar alguno de los recursos mencionados, puedes postear tu error o duda en el chat grupal donde podremos ayudarte 😀\nEnlaces # Al terminar la lectura anterior, revisa los siguientes artículos donde encontrarás más información de los temas:\nPáginas Estaticas vs Dinámicas - Open Webinars\n¿Qué es desarrollo web? - Articulo Tekla\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/dia1/intro/","section":"Levels","summary":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás.","title":"Introducción al Desarrollo Web"},{"content":"Introducción al Desarrollo Web # Aqui encontrarás la información que se usará dentro del Nivel 1.\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/","section":"Levels","summary":"Introducción al Desarrollo Web # Aqui encontrarás la información que se usará dentro del Nivel 1.","title":"Nivel 1 - Intro al desarrollo web"},{"content":"Día 5 : Repaso JavaScript y Primer Proyecto # Luego de haber aprendido las bases de HTML, CSS y JavaScript, hoy repasaremos algunos conceptos de JS y realizaremos un pequeño proyecto donde aplicaremos el conocimiento adquirido. El siguiente tutorial creado por el canal de youtube deivchoi, repasarás las bases de JS y crearás una calculadora aplicando las bases de este lenguaje. Sigue con atención las instrucciones y al finalizar, preparate para el día de evaluación repasando los conceptos que consideres necesarios.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/repaso_js/","section":"Levels","summary":"Día 5 : Repaso JavaScript y Primer Proyecto # Luego de haber aprendido las bases de HTML, CSS y JavaScript, hoy repasaremos algunos conceptos de JS y realizaremos un pequeño proyecto donde aplicaremos el conocimiento adquirido.","title":"Repaso de JavaScript"},{"content":"Día 4 : Tipos de Datos y Operadores # En JavaScript trabajamos con distintos valores, cada valor pertenece a un tipo de dato determinado. Por ejemplo, un string o un número. En JavaScript hay ocho tipos de datos básicos. En esta sección aprenderemos sobre algunos de ellos.\nRecuerda que podemos almacenar cualquier tipo de dato en una variable, incluso podemos reasignar el valor de una variable con un tipo de dato distinto:\n// Sin error let number = \u0026#34;3\u0026#34;; // variable que contiene un string number = 6; // cambiamos el valor a un dato tipo number Cadenas de Texto (Strings) # Números # Booleanos # Tipos de Operadores # Hasta este punto, hemos visto los tipos de datos más básicos dentro del lenguaje, conocidos como primitivos. Existen otros tipos de datos llamados compuestos como: Objetos, Arrays, Functions y Classes; los cuales por ahora no cubriremos. Con los tipos de datos primitivos tenemos una base para entender más conceptos de JavaScript.\nCondicionales # Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.\nPara esto podemos usar la sentencia if(...) la cual evalúa la condicion entre los paréntesis, y si el resultado es true ejecuta un bloque de código.\nPor ejemplo:\nif (year == 2015) alert( \u0026#39;¡Estás en lo cierto!\u0026#39; ); Aquí la condición es de igualdad (year == 2015), en caso sea true se ejecutará la alerta, pero podría ser más compleja.\nSi quisiéramos ejecutar más de una sentencia, debemos encerrar nuestro bloque de código entre llaves:\nif (year == 2015) { alert( \u0026#34;¡Es Correcto!\u0026#34; ); alert( \u0026#34;¡Eres muy inteligente!\u0026#34; ); } Se recomienda siempre encerrar nuestro bloque de código en llaves {} siempre que se utilice la sentencia if, inclusive si solo se va a ejecutar una sola sentencia en este caso. Hacer eso mejora la legibilidad.\nPara aprender más de este concepto, mira el siguiente video. Por el momento solo es importante la seccion donde se menciona el uso de la condicional if, else y else if. La sección sobre la condición switch no es necesaria por el momento.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_4/","section":"Levels","summary":"Día 4 : Tipos de Datos y Operadores # En JavaScript trabajamos con distintos valores, cada valor pertenece a un tipo de dato determinado.","title":"Día 4"},{"content":" Temas de la semana 📖 Día 3 : JavaScript # Introducción a JavaScript # JavaScript es actualmente el lenguaje de programación más utilizado dentro del desarrollo web, su popularidad ha crecido a lo largo de los años hasta posicionarlo como uno de los lenguajes mas queridos, en el siguiente video aprenderás un poco más de sus origenes y su utilidad.\nEs importante recordar que JavaScript es un lenguaje de alto nivel. Un lenguaje de programación de alto nivel es un tipo de lenguaje de programación que es más fácil de leer y escribir para los humanos que los lenguajes de bajo nivel. Estos lenguajes están diseñados para ser más cercanos a la forma en que las personas piensan y hablan y tienen una sintaxis más simple y abstracciones más elevadas. Algunos ejemplos de lenguajes de programación de alto nivel incluyen Python, Java, C# y Ruby.\nGramática y Caracteristicas del lenguaje # Todo lenguaje de programación cuenta con una forma de escribir en particular, aunque muchos de los lenguajes de programación guardan similitudes, también tienen diferencias que es importante que conozcamos. Así como HTML tiene una forma especial de escribir, JavaScript tambien cuenta con una sintáxis especial y una serie de reglas que aprenderemos antes que empecemos a escribir código de manera apresurada.\nVariables dentro de JavaScript: Var vs Let # Teniendo ya una noción mas clara de lo que es Javascript, hablemos de la unidad de almacenamiento mas comun en este lenguaje, las variables.\nConstantes y otros tipos de datos # En JavaScript tambien existe un tipo de dato similar a las variables llamado constante, en el siguiente video aprenderás de este dato y haremos un primer vistazo a otros tipos de dato más complejos. Respecto a estos ultimos, es importante que conozcas de su existencia, sin embargo para esta parte del proceso no es necesario que aprendas a manejarlos, pero si que entiendas a nivel teorico sus funciones basicas.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_3/","section":"Levels","summary":"Temas de la semana 📖 Día 3 : JavaScript # Introducción a JavaScript # JavaScript es actualmente el lenguaje de programación más utilizado dentro del desarrollo web, su popularidad ha crecido a lo largo de los años hasta posicionarlo como uno de los lenguajes mas queridos, en el siguiente video aprenderás un poco más de sus origenes y su utilidad.","title":"Día 3"},{"content":"Día 2 : Más estilos CSS # Hoy profundizaremos en los estilos de CSS. El siguiente video creado por el canal de youtube Hola Mundo explican de manera clara más estilos que debes tener en cuenta al momento de desarrollar para la web. Antes de ello, te menciono 3 formas comunes de escribir estilos CSS: inline, internal y external.\nInline # Son los estilos CSS que se indican dentro del atributo style de la etiqueta HTML\n\u0026lt;p style=\u0026#34;color: red;\u0026#34;\u0026gt;Hola mundo\u0026lt;/p\u0026gt; Internal # Son los estilos CSS que se colocan dentro de la etiqueta \u0026lt;style\u0026gt; ubicada dentro del head de la estructura HTML.\n\u0026lt;head\u0026gt; ... \u0026lt;style\u0026gt; p { color: red; } \u0026lt;/style\u0026gt; ... \u0026lt;/head\u0026gt; External # La forma de escribir estos estilos es similar a Internal con la diferencia que se escriben dentro de un archivo .css aparte, el cual se une al archivo HTML por medio de la etiqueta \u0026lt;link\u0026gt;, de esta forma, los estilos serán aplicados aunque sean dos archivos distintos.\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;!-- Dentro del atributo `href` indicamos la ruta del archivo CSS--\u0026gt; CSS con Hola Mundo # ","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/dia_2/","section":"Levels","summary":"Día 2 : Más estilos CSS # Hoy profundizaremos en los estilos de CSS.","title":"Día 2"},{"content":" Temas de la semana 📖 Día 1 : Introducción a HTML y CSS # Al comenzar tu camino como Web Developer (Desarrollador Web) vas a tener que aprender varias tecnologías. vamos a empezar por la base de la web.\nHTML # HTML (Lenguaje de Marcas de Hipertexto, del inglés HyperText Markup Language) es el componente más básico de la Web. Define el significado y la estructura del contenido web. Además de HTML, generalmente se utilizan otras tecnologías para describir la apariencia/presentación de una página web (CSS) o la funcionalidad/comportamiento (JavaScript).\n\u0026ldquo;Hipertexto\u0026rdquo; hace referencia a los enlaces que conectan páginas web entre sí, ya sea dentro de un único sitio web o entre sitios web. Los enlaces son un aspecto fundamental de la Web. Al subir contenido a Internet y vincularlo a las páginas creadas por otras personas, te conviertes en un participante activo en la «World Wide Web» (Red Informática Mundial).\nHTML ha ido evolucionando a través del tiempo y hoy nos encontramos en la versión 5 (HTML5). Este lenguaje se basa en una estructura de etiquetas, las cuales tienen la siguiente forma:\nEs más facil aprender esto haciendo, así que dejemos por un momento la teoría.\nKhan Academy : HTML\nIngresa al enlace de arriba e intenta completar las lecciónes antes de pasar al siguiente tutorial.\nInstalación de VS code # Antes de continuar con el siguiente apartado, es importante que puedas instalar un programa en tu pc para que escribir código sea mas facil, este es VS code, sigue las instrucciones de este video para que lo instales 😄\nMás etiquetas de HTML # Una vez que realizaste el tutorial de Khan academy, te recomiendo seguir con el tutorial que verás a continuación.\nHTML es la base de las páginas web, tener una idea de lo que representa y como usarlo de manera básica, te ayudará a que en un futuro puedas construir páginas web modernas y prácticas.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/dia_1/","section":"Levels","summary":"Temas de la semana 📖 Día 1 : Introducción a HTML y CSS # Al comenzar tu camino como Web Developer (Desarrollador Web) vas a tener que aprender varias tecnologías.","title":"Día 1"},{"content":"Seccion creada para insertar la información del Nivel inductivo.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/","section":"Levels","summary":"This is an example of summary","title":"Induccion a Nivel 0"},{"content":"Una guia para la vida # Este es un sitio de prueba\nme interesa aprender a usar markdown to create nuevos sitios\n","date":"15 diciembre 2022","permalink":"/platform/contacto/","section":"","summary":"Una guia para la vida # Este es un sitio de prueba","title":"Contacto"},{"content":"Inducción a la Programación # Instrucciones para postular al programa de Desarrollo Web en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollo Web que ofrece la Fundacion FUNVAL. Para lograr esto te explicaré brevemente como funciona el proceso de inducción y el material que usarás.\nAcerca del proceso # Durante el proceso de inducción, estarás estudiando los principios básicos de la programación. Para desarrollar páginas web, se debe escribir en lenguajes especiales para esta labor. Los más usados en el desarrollo web son : HTML5, CSS3 y JavaScript, este ultimo sirve para implementar la lógica de programación dentro de la web, mientras los anteriores sirven tanto para el maquetaado como para el diseño(estilos) respectivamente.\nEste proceso está estructurado para funcionar de la siguiente forma:\n4 días de aprendizaje 3 horas de estudio en cada día aprox. (12 horas en total) un quinto día de evaluación Acerca del material # Durante cada día de estudio, tendrás material para que puedas aprender las bases de estos lenguajes, si bien es cierto que tendrás 3 horas cada día, puedes dedicar mas tiempo en caso consideres necesario profundizar o practicar sobre un tema en particular.\nEl material disponible, en su mayoría es de recursos externos (páginas web, videos, blogs, etc.). La progrmación en la actualidad cuenta con una comunidad muy grande, quienes desean que más personas aprendan sobre este mundo, sin embargo hay tanta información que es dificil en ocasiones indagar por nuestra propia cuenta, aquí te daremos el material necesario para que aprendas las bases en el tiempo previsto, el cual ha sido previamente revisado y con el que sabemos, podrás aprender estas tecnologías de manera práctica y sencilla.\nAsimismo te invitamos a tomar nota de lo que vayas aprendiendo para que puedas repasarlo luego de las clase 😄\nAcerca de la evaluación # Luego de aprender lo necesario, necesitamos poner a prueba tu conocimiento para evaluar que cuentas con el conocimiento minimo antes de empezar el curso, por lo que la evaluación de Programación tendrá un puntaje sobre 100 pts. Es necesario que logres un mínimo de 75pts sobre promedio final para lograr ingresar al programa.\nDesde Funval te deseamos los mejores éxitos en este proceso, si tienes dudas sobre alguno de los puntos mencionados o del material que encontrarás, puedes contactar a tu reclutador.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/temario/","section":"Levels","summary":"Inducción a la Programación # Instrucciones para postular al programa de Desarrollo Web en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollo Web que ofrece la Fundacion FUNVAL.","title":"Temario"},{"content":"Finding a new way to build pages prueba about # ","date":"1 enero 0001","permalink":"/platform/about/","section":"","summary":"Finding a new way to build pages prueba about # ","title":""},{"content":"Blog de Funval # Estamos trabajando para añadir información en esta seccion 😀\n","date":"1 enero 0001","permalink":"/platform/posts/","section":"","summary":"Blog de Funval # Estamos trabajando para añadir información en esta seccion 😀","title":""}]