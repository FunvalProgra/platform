[{"content":"Introduction to Funval # ","date":"5 junio 2023","permalink":"/platform/","section":"","summary":"Introduction to Funval # ","title":""},{"content":"Hoy abordaremos Algoritmos en JAVA. Continuaremos trabajando en el curso de UDEMY. Recuerda enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nAlgoritmos en JAVA # Comprende toda la sección 10. Comprende los videos/lecturas del 122 al 150.\nSection 10- Algoritmos con Java\n","date":"5 junio 2023","permalink":"/platform/java/logica/algoritmos/","section":"Javae","summary":"Hoy abordaremos Algoritmos en JAVA.","title":"Java"},{"content":"","date":"5 junio 2023","permalink":"/platform/java/","section":"Javae","summary":"","title":"Javae"},{"content":"Inducción a la Programación # Instrucciones para postular al programa de Desarrollador Java en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollador Java que ofrece la Fundacion FUNVAL. Para lograr esto te explicaré brevemente como funciona el proceso de inducción y el material que usarás.\nAcerca del proceso # Durante el proceso de inducción, estarás estudiando los principios básicos de la programación.\nEste proceso está estructurado para funcionar de la siguiente forma:\n3 días de aprendizaje 3 horas de estudio en cada día aprox. (9 horas en total) un día de evaluación Acerca del material # Durante cada día de estudio, tendrás material para que puedas aprender las bases de estos lenguajes, si bien es cierto que tendrás 3 horas cada día, puedes dedicar mas tiempo en caso consideres necesario profundizar o practicar sobre un tema en particular.\nLa progrmación en la actualidad cuenta con una comunidad muy grande, quienes desean que más personas aprendan sobre este mundo, sin embargo hay tanta información que es dificil en ocasiones indagar por nuestra propia cuenta, aquí te daremos el material necesario para que aprendas las bases en el tiempo previsto, el cual ha sido previamente revisado y con el que sabemos, podrás aprender estas tecnologías de manera práctica y sencilla.\nAsimismo te invitamos a tomar nota de lo que vayas aprendiendo para que puedas repasarlo luego de las clase 😄\nImportancia de los temas que aprenderás Si bien es cierto que estos temas te ayudarán a prepararte para el exámen de admisión, esperamos que puedas analizarlo y prácticar de la mano con los tutoriales que hemos añadido. Al ingresar al programa, esta información será de gran ayuda para empezar tu camino como programador, recuerda que esperamos que llegues a entender de forma básica los temas que aprenderás y al iniciar el curso, podremos profundizar en ellos. También, tendremos en cuenta que leiste estos temas y partiremos de ahí para avanzar en el curso. Curso de UDEMY # Para esta preparación, estaremos tomando como base el curso de Fundamentos de Programación, Algoritmos en java y JavaScript de UDEMY. Una vez hayas hecho click en el enlace anterior, te aparecerá una página donde te permitirá añadir este curso a tu cuenta de UDEMY, si no tienes una cuenta, puedes crearla de forma gratuita. Una vez añadiste el curso a tu cuenta, ya puedes acceder a todo el contenido y comenzar a estudiarlo.\nTemas por día # Día 1 # Seccion 1 - Bienvenido al curso\nSeccion 2 - Conceptos Básicos de Fundamentos de Programación\nSección 3 - Fundamentos de Algoritmia (En esta secion, avanza lo que el tiempo te permita, ya que mañana puedes seguir estudiando esta sección)\nDía 2 # Sección 3 - Fundamentos de Algoritmia\nSección 4 - Operadores y estructuras de Control\nDía 3 # Sección 5 - Estructuras Secuencials Acerca de la evaluación # Luego de aprender lo necesario, necesitamos poner a prueba tu conocimiento para evaluar que cuentas con el conocimiento minimo antes de empezar el curso, por lo que la evaluación de Programación tendrá un puntaje sobre 100 pts. Es necesario que logres un mínimo de 75pts sobre promedio final para lograr ingresar al programa.\nDesde Funval te deseamos los mejores éxitos en este proceso, si tienes dudas sobre alguno de los puntos mencionados o del material que encontrarás, puedes contactar a tu reclutador.\n","date":"24 mayo 2023","permalink":"/platform/java/temario/","section":"Javae","summary":"Inducción a la Programación # Instrucciones para postular al programa de Desarrollador Java en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollador Java que ofrece la Fundacion FUNVAL.","title":"Temario"},{"content":"","date":"22 mayo 2023","permalink":"/platform/jsvanilla/","section":"Jsvanillas","summary":"","title":"Jsvanillas"},{"content":"Objects # Atajo para valores de propiedad # En el código real, a menudo usamos variables existentes como valores de los nombres de propiedades.\nPor ejemplo:\nfunction makeUser(name, age) { return { name: name, age: age, // ...otras propiedades }; } let user = makeUser(\u0026#34;John\u0026#34;, 30); alert(user.name); // John En el ejemplo anterior las propiedades tienen los mismos nombres que las variables. El uso de variables para la creación de propiedades es tán común que existe un atajo para valores de propiedad especial para hacerla más corta.\nEn lugar de name:name, simplemente podemos escribir name, tal cual:\nfunction makeUser(name, age) { return { name, // igual que name:name age, // igual que age:age // ... }; } Podemos usar ambos tipos de notación en un mismo objeto, la normal y el atajo:\nlet user = { name, // igual que name:name age: 30 }; Métodos del objeto # Los objetos son creados usualmente para representar entidades del mundo real, como usuarios, órdenes, etc.:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; Y en el mundo real un usuario puede actuar: seleccionar algo del carrito de compras, hacer login, logout, etc.\nLas acciones son representadas en JavaScript por funciones en las propiedades.\nEjemplos de Métodos # Para empezar, enseñemos al usuario user a decir hola:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; user.sayHi = function() { alert(\u0026#34;¡Hola!\u0026#34;); }; user.sayHi(); // ¡Hola! Aquí simplemente usamos una expresión de función para crear la función y asignarla a la propiedad user.sayHi del objeto.\nEntonces la llamamos con user.sayHi(). ¡El usuario ahora puede hablar!\nUna función que es la propiedad de un objeto es denominada su método.\nAsí, aquí tenemos un método sayHi del objeto user.\nPor supuesto, podríamos usar una función pre-declarada como un método, parecido a esto:\n1 2 3 4 5 6 7 8 9 10 let user = { // ... }; // primero, declara function sayHi() { alert(\u0026#34;¡Hola!\u0026#34;); }; // entonces la agrega como un método user.sayHi = sayHi; user.sayHi(); // ¡Hola! Programación orientada a objetos Cuando escribimos nuestro código usando objetos que representan entidades, eso es llamado Programación Orientada a Objetos, abreviado: \u0026ldquo;POO\u0026rdquo;.\nPOO (OOP sus siglas en inglés) es una cosa grande, un ciencia interesante en sí misma. ¿Cómo elegir las entidades correctas? ¿Cómo organizar la interacción entre ellas? Eso es arquitectura, y hay muy buenos libros del tópico como \u0026ldquo;Patrones de diseño: Elementos de software orientado a objetos reutilizable\u0026rdquo; de E. Gamma, R. Helm, R. Johnson, J. Vissides o \u0026ldquo;Análisis y Diseño Orientado a Objetos\u0026rdquo; de G. Booch, y otros. Más sobre Métodos # Profundizando en Arrays # Sabemos que asi como los objetos, los arrays tienen su complejidad, no solo por la cantidad de datos que pueden organizar, sino tambien por los métodos que nos permiten manipularlos. Hoy repasaremos todo sobre este tipo de dato. Ten en cuenta tomar nota de los métodos que mas te interesen, ya que no es necesario memorizarlos todos, sino saber que existen y como buscarlos cuando los necesitemos.\n","date":"22 mayo 2023","permalink":"/platform/jsvanilla/obj-methods/","section":"Jsvanillas","summary":"Objects # Atajo para valores de propiedad # En el código real, a menudo usamos variables existentes como valores de los nombres de propiedades.","title":"Object Methods - Métodos de Objeto"},{"content":"En comun usar el objeto Array en Javascript para almacenar datos, pero tambien podemos usarlo para manipular datos. En este video veremos algunos metodos que nos permiten manipular los datos de un array.\nRecuerda hacer pausas cuando consideres necesario y prueba el codigo que se presente, igualmente anota tus preguntas para que las hagas durante clase.\n","date":"22 mayo 2023","permalink":"/platform/jsvanilla/arr-methods/","section":"Jsvanillas","summary":"En comun usar el objeto Array en Javascript para almacenar datos, pero tambien podemos usarlo para manipular datos.","title":"Array Methods - Métodos de Array"},{"content":"Hoy aprenderemos sobre las funciones flecha. Este concepto no es tan sencillo de aprender, sin embargo, su sintáxis trae consigo una serie de ventajas que nos permiten escribir código más limpio y legible. Aunque al principio te pueda costar un poco entenderlo, te aseguro que con la práctica te acostumbrarás a usarlo y te será de gran utilidad.\nSigue los videos a continuación y recuerda practicar el código que ves en los videos, la mejor forma de aprender es mediante la práctica. Toma nota de las dudas que tengas para que las resuelvas durante la clase.\n","date":"21 mayo 2023","permalink":"/platform/jsvanilla/arrow/","section":"Jsvanillas","summary":"Hoy aprenderemos sobre las funciones flecha.","title":"Arrow Functions"},{"content":"Para el día de hoy, vamos a crear una aplicación del clima donde aprenderás a usar diversos conceptos de JavaScript. Aqui aprenderás a usar el DOM, eventos, funciones, condicionales, entre otros. Ten en cuenta que, aunque esta practica no es calificada, te servirá bastante para que ganes experiencia en el lenguaje de programación y puedas aplicar lo aprendido en futuros proyectos.\n","date":"16 mayo 2023","permalink":"/platform/jsvanilla/app-clima/","section":"Jsvanillas","summary":"Para el día de hoy, vamos a crear una aplicación del clima donde aprenderás a usar diversos conceptos de JavaScript.","title":"App Clima"},{"content":"Para el día de hoy, vamos a crear una aplicación de tareas, en la cual podremos agregar tareas y eliminarlas. Este ejercicio nos servirá para practicar el uso de los evento y el DOM. Ten en cuenta que esto lo reportarás en la práctica calificada de hoy.\n","date":"16 mayo 2023","permalink":"/platform/jsvanilla/app-tareas/","section":"Jsvanillas","summary":"Para el día de hoy, vamos a crear una aplicación de tareas, en la cual podremos agregar tareas y eliminarlas.","title":"App Tareas"},{"content":" Métodos pop/push, shift/unshift # Antes de continuar con la lectura, mira este video donde se explica detalladamente los conceptos que nos permiten modificar un array. Luego refuerza ese conocimiento con la lectura:\nUna cola es uno de los usos más comunes de un array. En ciencias de la computación, significa una colección ordenada de elementos que soportan dos operaciones:\npush inserta un elemento al final. shift obtiene el elemento del principio, avanzando la cola, y así el segundo elemento se vuelve primero. Los arrays soportan ambas operaciones.\nEn la práctica los necesitamos muy a menudo. Por ejemplo, una cola de mensajes que necesitamos mostrar en pantalla.\nHay otro caso de uso para los arrays \u0026ndash; la estructura de datos llamada pila.\nElla soporta dos operaciones:\npush agrega un elemento al final. pop toma un elemento desde el final. Entonces los elementos nuevos son agregados o tomados siempre desde el \u0026ldquo;final\u0026rdquo;.\nUna pila es usualmente mostrada como un mazo de cartas, donde las nuevas cartas son agregadas al tope o tomadas desde el tope:\nPara las pilas, la última introducida es la primera en ser recibida, en inglés esto es llamado principio LIFO (Last-In-First-Out, última en entrar primera en salir). Para las colas, tenemos FIFO (First-In-First-Out primera en entrar, primera en salir).\nLos arrays en JavaScript pueden trabajar como colas o pilas. Ellos permiten agregar/quitar elementos al/del principio o al/del final.\nEn ciencias de la computación, la estructura de datos que permite esto se denomina cola de doble extremo o bicola.\nMétodos que trabajan sobre el final del array:\npop Extrae el último elemento del array y lo devuelve: let fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.pop() ); // quita \u0026#34;Pear\u0026#34; y lo muestra en un alert alert( fruits ); // Apple, Orange Tanto fruits.pop() como fruits.at(-1) devuelven el último elemento del array, pero fruits.pop() también modifica el array eliminando tal elemento.\npush Agrega el elemento al final del array: let fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;]; fruits.push(\u0026#34;Pear\u0026#34;); alert( fruits ); // Apple, Orange, Pear El llamado a fruits.push(...) es igual a fruits[fruits.length] = ....\nMétodos que trabajan con el principio del array:\nshift Extrae el primer elemento del array y lo devuelve: let fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.shift() ); // quita Apple y lo muestra en un alert alert( fruits ); // Orange, Pear unshift Agrega el elemento al principio del array: let fruits = [\u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; fruits.unshift(\u0026#39;Apple\u0026#39;); alert( fruits ); // Apple, Orange, Pear Los métodos push y unshift pueden agregar múltiples elementos de una vez:\nlet fruits = [\u0026#34;Apple\u0026#34;]; fruits.push(\u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;); fruits.unshift(\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;); // [\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;] alert(fruits); Recorrer Arrays # Una de las formas más viejas de iterar los items de un array es el bucle for sobre sus índices:\nlet arr = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; *!* for (let i = 0; i \u0026lt; arr.length; i++) { */!* alert( arr[i] ); } Pero para los arrays también hay otra forma de bucle,for..of:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; // itera sobre los elementos del array for (let fruit of fruits) { alert( fruit ); } for..of no da acceso al número del elemento en curso, solamente a su valor, pero en la mayoría de los casos eso es suficiente. Y es más corto.\nTécnicamente, y porque los arrays son objetos, es también posible usar for..in:\nlet arr = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; *!* for (let key in arr) { */!* alert( arr[key] ); // Apple, Orange, Pear } Pero es una mala idea. Existen problemas potenciales con esto:\nEl bucle for..in itera sobre todas las propiedades, no solo las numéricas.\nExisten objetos \u0026ldquo;simil-array\u0026rdquo; en el navegador y otros ambientes que parecen arrays. Esto es, tienen length y propiedades indexadas, pero pueden también tener propiedades no numéricas y métodos que usualmente no necesitemos. Y el bucle for..in los listará. Entonces si necesitamos trabajar con objetos simil-array, estas propiedades \u0026ldquo;extras\u0026rdquo; pueden volverse un problema.\nEl bucle for..in está optimizado para objetos genéricos, no para arrays, y es de 10 a 100 veces más lento. Por supuesto es aún muy rápido. Una optimización puede que solo sea importante en cuellos de botella, pero necesitamos ser concientes de la diferencia.\nEn general, no deberíamos usar for..in en arrays.\nRecorrer Array ","date":"11 mayo 2023","permalink":"/platform/jsvanilla/for-arr/","section":"Jsvanillas","summary":"Métodos pop/push, shift/unshift # Antes de continuar con la lectura, mira este video donde se explica detalladamente los conceptos que nos permiten modificar un array.","title":"Metodos base de Array y Recorrer un Array"},{"content":"Arrays # Los objetos te permiten almacenar colecciones de datos a través de nombres. Eso está bien.\nPero a menudo necesitamos una colección ordenada, donde tenemos un 1ro, un 2do, un 3er elemento y así sucesivamente. Por ejemplo, necesitamos almacenar una lista de algo: usuarios, bienes, elementos HTML, etc.\nNo es conveniente usar objetos aquí, porque no proveen métodos para manejar el orden de los elementos. No podemos insertar una nueva propiedad “entre” los existentes. Los objetos no están hechos para eso.\nExiste una estructura llamada Array (llamada en español arreglo o matriz/vector) para almacenar colecciones ordenadas.\nDeclaración # Hay dos sintaxis para crear un array vacío:\nlet arr = new Array(); let arr = []; Casi siempre se usa la segunda. Podemos suministrar elementos iniciales entre los corchetes:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; Los elementos del array están numerados comenzando desde cero.\nPodemos obtener un elemento por su número entre corchetes:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[0] ); // Apple alert( fruits[1] ); // Orange alert( fruits[2] ); // Plum Podemos reemplazar un elemento:\nfruits[2] = \u0026#39;Pear\u0026#39;; // ahora [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;] \u0026hellip;o agregar uno nuevo al array:\nfruits[3] = \u0026#39;Lemon\u0026#39;; // ahora [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;, \u0026#34;Lemon\u0026#34;] La cuenta total de elementos en el array es su longitud length:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits.length ); // 3 También podemos usar alert para mostrar el array completo.\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits ); // Apple,Orange,Plum Un array puede almacenar elementos de cualquier tipo.\nPor ejemplo:\n// mezcla de valores let arr = [ \u0026#39;Apple\u0026#39;, { name: \u0026#39;John\u0026#39; }, true, function() { alert(\u0026#39;hello\u0026#39;); } ]; // obtener el objeto del índice 1 y mostrar su nombre alert( arr[1].name ); // John // obtener la función del índice 3 y ejecutarla arr[3](); // hello En el siguiente video aprenderás más de los arrays:\n","date":"11 mayo 2023","permalink":"/platform/jsvanilla/array/","section":"Jsvanillas","summary":"Arrays # Los objetos te permiten almacenar colecciones de datos a través de nombres.","title":"Array"},{"content":"En JavaScript, las funciones son una de las características fundamentales del lenguaje y son esenciales para crear programas complejos.\nYa hemos visto cómo crear funciones y cómo llamarlas, pero para sacar el máximo provecho de las funciones, es importante entender cómo funcionan los parámetros y argumentos.\nEn esta clase, vamos a explorar cómo funcionan los parámetros y argumentos en las funciones de JavaScript, cómo pasar valores a las funciones y cómo utilizar estos valores dentro de las funciones. También veremos ejemplos prácticos y explicaciones detalladas para que puedas entender cómo utilizar parámetros y argumentos para crear funciones más flexibles y reutilizables en tus programas.\nParámetros # Podemos pasar datos arbitrarios a funciones usando parámetros.\nEn el siguiente ejemplo, la función tiene dos parámetros: from y text.\n1 2 3 4 5 function showMessage(from, text) { // parámetros: from, text alert(from + \u0026#39;: \u0026#39; + text); } showMessage(\u0026#39;Ann\u0026#39;, \u0026#39;¡Hola!\u0026#39;); // Ann: ¡Hola! (*) *showMessage(\u0026#39;Ann\u0026#39;, \u0026#34;¿Cómo estás?\u0026#34;); // Ann: ¿Cómo estás? (**) Cuando la función se llama (*) y (**), los valores dados se copian en variables locales from y text. Y la función las utiliza.\nAquí hay un ejemplo más: tenemos una variable from y la pasamos a la función. Tenga en cuenta: la función cambia from, pero el cambio no se ve afuera, porque una función siempre obtiene una copia del valor:\n1 2 3 4 5 6 7 8 function showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // hace que \u0026#34;from\u0026#34; se vea mejor alert( from + \u0026#39;: \u0026#39; + text ); } let from = \u0026#34;Ann\u0026#34;; showMessage(from, \u0026#34;Hola\u0026#34;); // *Ann*: Hola // el valor de \u0026#34;from\u0026#34; es el mismo, la función modificó una copia local alert( from ); // Ann Cuando un valor es pasado como un parámetro de función, también se denomina argumento.\nPara poner los términos claros:\nUn parámetro es una variable listada dentro de los paréntesis en la declaración de función (es un término para el momento de la declaración) Un argumento es el valor que es pasado a la función cuando esta es llamada (es el término para el momento en que se llama). Declaramos funciones listando sus parámetros, luego las llamamos pasándoles argumentos.\nEn el ejemplo de arriba, se puede decir: \u0026ldquo;la función showMessage es declarada con dos parámetros, y luego llamada con dos argumentos: from y \u0026quot;Hola\u0026quot;\u0026rdquo;.\nValores predeterminados # Si una función es llamada, pero no se le proporciona un argumento, su valor correspondiente se convierte en undefined.\nPor ejemplo, la función mencionada anteriormente showMessage(from, text) se puede llamar con un solo argumento:\nshowMessage(\u0026#34;Ann\u0026#34;); Eso no es un error. La llamada mostraría \u0026quot;Ann: undefined\u0026quot;. Como no se pasa un valor de text, este se vuelve undefined.\nPodemos especificar un valor llamado \u0026ldquo;predeterminado\u0026rdquo; o \u0026ldquo;por defecto\u0026rdquo; (es el valor que se usa si el argumento fue omitido) en la declaración de función usando =:\n1 2 3 4 function showMessage(from,text = \u0026#34;sin texto\u0026#34;\u0026gt;) { alert( from + \u0026#34;: \u0026#34; + text ); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: sin texto Ahora, si no se pasa el parámetro text, obtendrá el valor \u0026quot;sin texto\u0026quot;\nEl valor predeterminado también se asigna si el parámetro existe pero es estrictamente igual a undefined:\nshowMessage(\u0026#34;Ann\u0026#34;, undefined); // Ann: sin texto En el siguiente video aprenderemos más sobre estos conceptos:\nTipos de Funciones # En JavaScript, existen tres tipos de funciones: funciones declaradas, funciones de expresión y funciones de flecha.\nFunciones declaradas: Son funciones que se declaran con la palabra clave \u0026ldquo;function\u0026rdquo; seguida del nombre de la función. Ejemplo: function sum(a, b) { return a + b; } Estas funciones son hoisted, es decir, son elevadas al inicio del scope donde son declaradas, por lo tanto son accesibles antes de ser declaradas.\nFunciones de expresión: son funciones que son asignadas a una variable y son definidas mediante una expresión. Ejemplo: const sum = function(a, b) { return a + b; } Funciones de flecha: son funciones cuyo sintaxis es abreviada y se definen mediante una flecha \u0026ldquo;=\u0026gt;\u0026rdquo; y no tiene un nombre. Ejemplo: const sum = (a, b) =\u0026gt; a + b; 3 tipos de funciones # Para entender a detalle como funciona cada uno de estas, mira el siguiente tutorial donde verás qué diferencia a estas 3 formas de escribir una función:\n","date":"11 mayo 2023","permalink":"/platform/jsvanilla/parameters/","section":"Jsvanillas","summary":"En JavaScript, las funciones son una de las características fundamentales del lenguaje y son esenciales para crear programas complejos.","title":"Parametros y tipos de Funciones"},{"content":"El Document Object Model (DOM) es un estándar de la industria que define la estructura lógica de un documento y cómo se puede acceder y modificar su contenido y estilos. Es una interfaz de programación de aplicaciones (API) para documentos HTML y XML que permite a los desarrolladores interactuar con el contenido de una página web y modificarlo dinámicamente mediante código JavaScript.\nEl DOM es un árbol de nodos que representa la estructura de un documento, donde cada elemento HTML es un nodo y cada atributo es un nodo hijo. Los desarrolladores pueden utilizar el DOM para seleccionar y modificar elementos específicos en una página web, crear nuevos elementos, eliminar elementos existentes, cambiar estilos, agregar eventos, y mucho más.\nEn esta clase, vamos a profundizar en el concepto del DOM, cómo funciona, y cómo los desarrolladores pueden utilizarlo para interactuar con el contenido de una página web y crear aplicaciones web dinámicas e interactivas.\nAntes de entar a detalle en el DOM hablaremos un poco del entorno del navegador.\nEntorno de Navegador # El lenguaje JavaScript fue creado inicialmente para los navegadores web. Desde entonces, ha evolucionado en un lenguaje con muchos usos y plataformas.\nUna plataforma puede ser un navegador, un servidor web u otro host (\u0026ldquo;anfitrión\u0026rdquo;); incluso una máquina de café \u0026ldquo;inteligente\u0026rdquo;, si puede ejecutar JavaScript. Cada uno de ellos proporciona una funcionalidad específica de la plataforma. La especificación de JavaScript llama a esto entorno de host.\nUn entorno host proporciona sus propios objetos y funciones adicionales al núcleo del lenguaje. Los navegadores web proporcionan un medio para controlar las páginas web. Node.js proporciona características del lado del servidor, etc.\nAquí tienes una vista general de lo que tenemos cuando JavaScript se ejecuta en un navegador web:\nHay un objeto \u0026ldquo;raíz\u0026rdquo; llamado window. Tiene dos roles:\nPrimero, es un objeto global para el código JavaScript. Segundo, representa la \u0026ldquo;ventana del navegador\u0026rdquo; y proporciona métodos para controlarla. DOM (Modelo de Objetos del Documento) # La estructura de un documento HTML son las etiquetas.\nSegún el Modelo de Objetos del Documento (DOM), cada etiqueta HTML es un objeto. Las etiquetas anidadas son llamadas \u0026ldquo;hijas\u0026rdquo; de la etiqueta que las contiene. El texto dentro de una etiqueta también es un objeto.\nTodos estos objetos son accesibles empleando JavaScript, y podemos usarlos para modificar la página.\nPor ejemplo, document.body es el objeto que representa la etiqueta \u0026lt;body\u0026gt;.\nEjecutar el siguiente código hará que el \u0026lt;body\u0026gt; sea de color rojo durante 3 segundos:\ndocument.body.style.background = \u0026#39;red\u0026#39;; // establece un color de fondo rojo setTimeout(() =\u0026gt; document.body.style.background = \u0026#39;\u0026#39;, 3000); // regresa el color de fondo original despues de 3 segundos En el caso anterior usamos style.background para cambiar el color de fondo del document.body, sin embargo existen muchas otras propiedades, tales como:\ninnerHTML \u0026ndash; contenido HTML del nodo. offsetWidth \u0026ndash; ancho del nodo (en píxeles). \u0026hellip;, etc. Un ejemplo del DOM # Comencemos con el siguiente documento simple:\n\u0026lt;!DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;About elk\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; The truth about elk. \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; El DOM representa HTML como una estructura de árbol de etiquetas. A continuación podemos ver como se muestra:\nflowchart TD A(HTML) --\u003e B(HEAD) A --\u003e C[#text] A --\u003e D(BODY) B --\u003e E[#text] B --\u003e F(TITLE) B --\u003e I[#text] F --\u003e G[#text About elk] D --\u003e J[#text The truth about elk. #text] Cada nodo del árbol es un objeto.\nLas etiquetas son nodos de elementos (o solo elementos) y forman la estructura del árbol: \u0026lt;html\u0026gt; está ubicado en la raíz del documento, por lo tanto, \u0026lt;head\u0026gt; y \u0026lt;body\u0026gt; son sus hijos, etc.\nEl texto dentro de los elementos forma nodos de texto, etiquetados como #text. Un nodo de texto contiene solo una cadena. Esta puede no tener hijos y siempre es una hoja del árbol.\nPor ejemplo, la etiqueta \u0026lt;title\u0026gt; tiene el texto \u0026quot;About elk\u0026quot;.\nHay que tener en cuenta los caracteres especiales en nodos de texto:\nuna línea nueva: #text ↵ (en JavaScript se emplea \\n para obtener este resultado) un espacio: ␣ Los espacios y líneas nuevas son caracteres totalmente válidos, al igual que letras y dígitos. Ellos forman nodos de texto y se convierten en parte del DOM. Así, por ejemplo, en el caso de arriba la etiqueta \u0026lt;head\u0026gt; contiene algunos espacios antes de la etiqueta \u0026lt;title\u0026gt;, entonces ese texto se convierte en el nodo #text, que contiene una nueva línea y solo algunos espacios.\nHay solo dos excepciones de nivel superior:\nLos espacios y líneas nuevas antes de la etiqueta \u0026lt;head\u0026gt; son ignorados por razones históricas. Si colocamos algo después de la etiqueta \u0026lt;/body\u0026gt;, automáticamente se sitúa dentro de body, al final, ya que, la especificación HTML necesita que todo el contenido esté dentro de la etiqueta \u0026lt;body\u0026gt;, no puede haber espacios después de esta. En otros casos todo es sencillo \u0026ndash; si hay espacios (como cualquier carácter) en el documento, se convierten en nodos de texto en el DOM, y si los eliminamos, entonces no habrá ninguno.\nPara reforzar lo que hemos visto, mira el siguiente video donde se introduce el DOM:\n","date":"11 mayo 2023","permalink":"/platform/jsvanilla/introdom/","section":"Jsvanillas","summary":"El Document Object Model (DOM) es un estándar de la industria que define la estructura lógica de un documento y cómo se puede acceder y modificar su contenido y estilos.","title":"Introducción al DOMimage.png"},{"content":"","date":"7 mayo 2023","permalink":"/platform/css/","section":"Csses","summary":"","title":"Csses"},{"content":"Hoy estaremos terminando la página web que comenzaste el día de ayer. Recuerda subir tu resultado final a la tarea de la práctica calificada de hoy.\n","date":"7 mayo 2023","permalink":"/platform/css/pagina_css_p2/","section":"Csses","summary":"Hoy estaremos terminando la página web que comenzaste el día de ayer.","title":"Pagina HTML, CSS y JS - parte 2"},{"content":"Entre el día de hoy y mañana vamos a ver como crear una página web con HTML, CSS y JS. Siguiendo el tutorial, vas a crear una página web desde cero y subirás tu resultado el día de mañana en la entrega de la tarea de la práctica calificada del día viernes.\n","date":"7 mayo 2023","permalink":"/platform/css/pagina_css_p1/","section":"Csses","summary":"Entre el día de hoy y mañana vamos a ver como crear una página web con HTML, CSS y JS.","title":"Pagina HTML, CSS y JS - parte 1"},{"content":"En esta ocasión vamos a revisar algunas buenas prácticas que debes tener en cuenta al usar CSS ya que si no tienes cuidado, podria volverse algo confuso y dificil de corregir. Mira el siguiente video con atención y toma nota de los consejos que se indican.\nEjemplo de barra de Navegación # Para continuar aprendiendo CSS, realiza el siguiente tutorial donde aprenderás a crear una barra de navegación usando Flexbox, el cual seguiremos aprendiendo en los siguientes días.\n","date":"7 mayo 2023","permalink":"/platform/css/more-styles/","section":"Csses","summary":"En esta ocasión vamos a revisar algunas buenas prácticas que debes tener en cuenta al usar CSS ya que si no tienes cuidado, podria volverse algo confuso y dificil de corregir.","title":"Buen uso de CSS y más estilos"},{"content":"Hoy abordaremos el tema de la estructura Iterativa. Continuaremos trabajando en el curso de UDEMY. Recuerda enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nEstructura Secuencial # Comprende toda la sección 7. Comprende los videos/lecturas del 65 al 80.\nSection 7 - Estructuras Iterativas o Ciclos\n","date":"1 mayo 2023","permalink":"/platform/java/logica/iterativo/","section":"Javae","summary":"Hoy abordaremos el tema de la estructura Iterativa.","title":"Estructuras Iterativas o Ciclos"},{"content":"Hoy abordaremos el tema de la estructura Iterativa. Continuaremos trabajando en el curso de UDEMY. Recuerda enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nEstructura Secuencial # Comprende toda la sección 7. Comprende los videos/lecturas del 65 al 80.\nSection 7 - Estructuras Iterativas o Ciclos\n","date":"1 mayo 2023","permalink":"/platform/logica/iteracion/","section":"Logicas","summary":"Hoy abordaremos el tema de la estructura Iterativa.","title":"Estructuras Iterativas o Ciclos"},{"content":"","date":"1 mayo 2023","permalink":"/platform/logica/","section":"Logicas","summary":"","title":"Logicas"},{"content":"Hoy abordaremos el tema de la estructura Condicional. Continuaremos trabajando en el curso de UDEMY. Recuerda enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nEstructura Condicional # Comprende toda la sección 6. Comprende los videos/lecturas del 42 al 64.\nSection 6 - Estructuras Condicionales o de Decisión\n","date":"1 mayo 2023","permalink":"/platform/logica/condicional/","section":"Logicas","summary":"Hoy abordaremos el tema de la estructura Condicional.","title":"Estructura Condicional"},{"content":"Hoy abordaremos el tema de la estructura secuencial. Continuaremos trabajando en el curso de UDEMY. Recuerda enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nEstructura Secuencial # Comprende toda la sección 4 y la sección 5. Comprende los videos/lecturas del 25 al 41.\nSection 4 - Operadores y Estructuras de Control\nSection 5 - Estructuras Secuenciales\n","date":"1 mayo 2023","permalink":"/platform/logica/secuencial/","section":"Logicas","summary":"Hoy abordaremos el tema de la estructura secuencial.","title":"Estructura Secuencial"},{"content":"Hoy abordaremos el tema de la estructura secuencial y condicional. Continuaremos trabajando en el curso de UDEMY. Recuerda enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nEstructura Secuencial # Comprende toda la sección 4 y la sección 5. Comprende los videos/lecturas del 25 al 41.\nSection 4 - Operadores y Estructuras de Control\nSection 5 - Estructuras Secuenciales\nEstructura Condicional # Comprende toda la sección 6. Comprende los videos/lecturas del 42 al 64. Solo mira los videos que el tiempo de permita.\nSection 6 - Estructuras Condicionales o de Decisión\n","date":"1 mayo 2023","permalink":"/platform/java/logica/secuencial/","section":"Javae","summary":"Hoy abordaremos el tema de la estructura secuencial y condicional.","title":"Estructura Secuencial y Condicional"},{"content":"En esta primera semana de clase, se abordará el tema de la lógica de programación, la cual es la base fundamental para el desarrollo de software, ya que es la que nos permite realizar la construcción de algoritmos, los cuales son la base para la creación de programas.\nNos apoyaremos en el curso de UDEMY que se mencionó durante la clase. Te dejamos el enlace aquí para que lo puedas añadir a tu biblioteca si no lo haz hecho aún.\nDurante estos días te iremos indicando los segmentos que debes estudiar. Te recomendamos en enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nConceptos básicos de programación # En esta sección se abordarán los conceptos básicos de programación, los cuales son la base para el desarrollo de software. Comprende toda la sección 2 titulada \u0026ldquo;Section 2: Conceptos básicos, Fundamentos de programación\u0026rdquo;. Comprende los videos/lecturas del 7 al 12.\nSection 2 - Conceptos básicos, Fundamentos de programación\nFundamentos de Algoritmia # En esta sección se abordarán los fundamentos de algoritmia, los cuales nos ayudan a construir una estructura para desarrollar un software. Comprende toda la sección 3 titulada \u0026ldquo;Section 3: Fundamentos de Algoritmia\u0026rdquo;. Comprende los videos/lecturas del 13 al 24.\nSection 3 - Fundamentos de Algoritmia\n","date":"1 mayo 2023","permalink":"/platform/java/logica/fundamentos/","section":"Javae","summary":"En esta primera semana de clase, se abordará el tema de la lógica de programación, la cual es la base fundamental para el desarrollo de software, ya que es la que nos permite realizar la construcción de algoritmos, los cuales son la base para la creación de programas.","title":"Introducción a la Logica de Programación"},{"content":"En esta primera semana de clase, se abordará el tema de la lógica de programación, la cual es la base fundamental para el desarrollo de software, ya que es la que nos permite realizar la construcción de algoritmos, los cuales son la base para la creación de programas.\nNos apoyaremos en el curso de UDEMY que se mencionó durante la clase. Te dejamos el enlace aquí para que lo puedas añadir a tu biblioteca si no lo haz hecho aún.\nDurante estos días te iremos indicando los segmentos que debes estudiar. Te recomendamos en enfocarte en los temas que te indicamos y no en todo el curso, ya que el mismo es muy extenso y no queremos que te satures. Sin embargo, si consideras que comprendes el tema y deseas avanzar, puedes hacerlo.\nConceptos básicos de programación # En esta sección se abordarán los conceptos básicos de programación, los cuales son la base para el desarrollo de software. Comprende toda la sección 2 titulada \u0026ldquo;Section 2: Conceptos básicos, Fundamentos de programación\u0026rdquo;. Comprende los videos/lecturas del 7 al 12.\nSection 2 - Conceptos básicos, Fundamentos de programación\nFundamentos de Algoritmia # En esta sección se abordarán los fundamentos de algoritmia, los cuales nos ayudan a construir una estructura para desarrollar un software. Comprende toda la sección 3 titulada \u0026ldquo;Section 3: Fundamentos de Algoritmia\u0026rdquo;. Comprende los videos/lecturas del 13 al 24.\nSection 3 - Fundamentos de Algoritmia\n","date":"1 mayo 2023","permalink":"/platform/logica/intro_progra/","section":"Logicas","summary":"En esta primera semana de clase, se abordará el tema de la lógica de programación, la cual es la base fundamental para el desarrollo de software, ya que es la que nos permite realizar la construcción de algoritmos, los cuales son la base para la creación de programas.","title":"Introducción a la Logica de Programación"},{"content":"Unidades de Medida en CSS # Antes de continuar con el tutorial de Hola Mundo, vamos a aprender un poco sobre las unidades de medida en CSS. si bien es cierto no debes saberlas todas de memoria, es importante que las conozcas y puedas identificarlas cuando las veas en un código CSS, al igual que entender la diferencia entre las unidades exactas y las relativas.\nTutorial de CSS # Continúa donde te quedaste con el tutoríal de CSS de Hola Mundo, recuerda hacer una pausa almenos media hora antes de que comience la siguiente clase y dedicar ese tiempo a realizar los tutoriales de freeCodeCamp de CSS.\nAprendiendo con Práctica # Continua reforzando tu conocimiento de HTML y CSS siguiendo estos cursos:\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"1 mayo 2023","permalink":"/platform/css/part2/","section":"Csses","summary":"Unidades de Medida en CSS # Antes de continuar con el tutorial de Hola Mundo, vamos a aprender un poco sobre las unidades de medida en CSS.","title":"Fundamentos de CSS Parte 2"},{"content":"Que es CSS? # Como HTML, CSS (Cascading Style Sheets) u Hojas de estilo en cascada en español, no es realmente un lenguaje de programación, tampoco es un lenguaje de marcado. Es un lenguaje de hojas de estilo, es decir, te permite aplicar estilos de manera selectiva a elementos en documentos HTML. Por ejemplo, para seleccionar todos los elementos de párrafo en una página HTML y volver el texto dentro de ellos de color rojo, has de escribir este CSS:\np { color: red; /* Selecciona la etiqueta p y cambia el color a rojo */ } CSS nos ayuda a generar un gran cambio en nuestras páginas web y su sintáxis es distintia a HTML.\nSintáxis # El selector nos ayuda a identificar a que elemento(s) se le aplicarán los estilos. El bloque de declaración es donde se escriben los estilos, tener en cuenta que se inicia y culmina con llaves {}. La declaración es donde ajustamos una cosa de el/los elemento(s), se compone por la propiedad que representa lo que vamos a ajustar y el valor que representa como lo vamos a cambiar (Cambiaremos los elementos p, le cambiaremos el color a rojo).\nDonde escribir CSS # Hay 3 lugares o formas de escribir CSS: inline, internal y external (en línea, interno y externo).\nInline # dentro de las etiquetas de apertura HTML podemos añadir el atributo style y como parte de su valor, podemos indicar las declaraciones CSS separadas por ;\nInternal # dentro de la \u0026lt;head\u0026gt; podemos insertar la etiqueta \u0026lt;style\u0026gt; donde podremos ingresar nuestro codigo css. Esto trae la ventaja de usar los selectores a diferencia de los estilos inline, que se aplican a cada elemento.\nExternal # External hace referencia a escribir CSS en un archivo aparte donde solo irá este código. la forma de escribir aquí sigue siendo en bloque sin la necesidad de una etiqueta \u0026lt;style\u0026gt;, aunque necesitamos enlazar el archivo HTML con este, por medio de una etiqueta link dentro del head similar a esta:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./css/main.css\u0026#34;\u0026gt; Tutorial de CSS # Durante el temario que estudiaste antes de ingresar a Funval, te dejamos un video del canal Hola Mundo. Hoy y mañana vamos a repasar los conceptos que vimos en ese video. Te recomendamos ver hasta media hora antes de la clase y el resto del tiempo comiences a trabajar con los tutoriales de freeCodeCamp de CSS.\nAprendiendo con Práctica # Continua reforzando tu conocimiento de HTML y CSS siguiendo estos cursos:\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"1 mayo 2023","permalink":"/platform/css/part1/","section":"Csses","summary":"Que es CSS?","title":"Fundamentos de CSS Parte 1"},{"content":"Los formularios de HTML son una herramienta esencial para la mayoría de los sitios web. Permiten a los visitantes interactuar con la página, enviando información y realizando acciones en línea. Con los formularios, los usuarios pueden proporcionar comentarios, enviar mensajes, realizar compras, registrarse para eventos, enviar correos electrónicos y mucho más.\nAdemás, los formularios pueden ser personalizados de acuerdo a las necesidades específicas de cada sitio web, desde la apariencia visual hasta la información requerida para ser enviada. Estos formularios pueden ser creados utilizando diferentes elementos, como campos de texto, casillas de verificación, botones de radio, menús desplegables, y muchos otros.\nHoy vamos a explorar todo lo que necesitas saber sobre los formularios de HTML. Desde los elementos más básicos hasta los más avanzados, vamos a ver cómo crear y personalizar formularios para mejorar la experiencia del usuario y obtener la información necesaria. Así que prepárate para adentrarte en el mundo de los formularios de HTML y descubrir todo lo que tienen para ofrecer.\nAprendiendo con Práctica # Continua reforzando tu conocimiento de HTML y CSS siguiendo estos cursos:\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"1 mayo 2023","permalink":"/platform/html/forms/","section":"Htmls","summary":"Los formularios de HTML son una herramienta esencial para la mayoría de los sitios web.","title":"Forms"},{"content":"","date":"1 mayo 2023","permalink":"/platform/html/","section":"Htmls","summary":"","title":"Htmls"},{"content":"Los formularios de HTML son una herramienta esencial para la mayoría de los sitios web. Permiten a los visitantes interactuar con la página, enviando información y realizando acciones en línea. Con los formularios, los usuarios pueden proporcionar comentarios, enviar mensajes, realizar compras, registrarse para eventos, enviar correos electrónicos y mucho más.\nAdemás, los formularios pueden ser personalizados de acuerdo a las necesidades específicas de cada sitio web, desde la apariencia visual hasta la información requerida para ser enviada. Estos formularios pueden ser creados utilizando diferentes elementos, como campos de texto, casillas de verificación, botones de radio, menús desplegables, y muchos otros.\nHoy vamos a explorar todo lo que necesitas saber sobre los formularios de HTML. Desde los elementos más básicos hasta los más avanzados, vamos a ver cómo crear y personalizar formularios para mejorar la experiencia del usuario y obtener la información necesaria. Así que prepárate para adentrarte en el mundo de los formularios de HTML y descubrir todo lo que tienen para ofrecer.\nAprendiendo con Práctica # Continua reforzando tu conocimiento de HTML y CSS siguiendo estos cursos:\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"1 mayo 2023","permalink":"/platform/mysql/mifcellaneous2/","section":"Mysqls","summary":"Los formularios de HTML son una herramienta esencial para la mayoría de los sitios web.","title":"Micellaneous parte 2"},{"content":"","date":"1 mayo 2023","permalink":"/platform/mysql/","section":"Mysqls","summary":"","title":"Mysqls"},{"content":"","date":"16 abril 2023","permalink":"/platform/levels/","section":"Levels","summary":"","title":"Levels"},{"content":"Hoy seguiremos reforzando nuestro conocimiento Bootstrap 5. Sigue el tutorial a continuación. Recuerda enviar lo que lograste al canal de Discord y subirlo a tu repositorio.\n","date":"16 abril 2023","permalink":"/platform/levels/level2_23/dia13/bs5/","section":"Levels","summary":"Hoy seguiremos reforzando nuestro conocimiento Bootstrap 5.","title":"Login con Bootstrap 5"},{"content":"Para hoy, vamos a realizar una página web con Bootstrap 5 y JS. Para ello, vamos a realizar el siguiente tutorial del canal de youtube Fazt Code. Sigue las instrucciones y envía tu resultado final al canal de discord. Recuerda subir esto a tu repositorio para que vayas sumando proyectos 😀.\n","date":"16 abril 2023","permalink":"/platform/levels/level2_23/dia12/bs5/","section":"Levels","summary":"Para hoy, vamos a realizar una página web con Bootstrap 5 y JS.","title":"Página con Bootstrap 5 y JS"},{"content":"En el mundo del desarrollo de software colaborativo, GitHub se ha convertido en una herramienta fundamental para trabajar en equipo y compartir código. Una de las funciones más importantes de GitHub es la bifurcación o forkeo de un proyecto. ¿Pero qué es exactamente la bifurcación en GitHub y por qué es importante para los desarrolladores? En este artículo, te explicaremos todo lo que necesitas saber sobre la bifurcación en GitHub, cómo hacerlo y cómo contribuir al proyecto original a través de tu bifurcación.\nForks en GitHub # Antes de Leer un poco mas de este tema, mira este video donde resume el proceso de Fork en GitHub.\nProceso de Bifurcación (Fork) # La bifurcación o \u0026ldquo;fork\u0026rdquo; en GitHub es una manera de crear una copia de un repositorio existente en tu cuenta de GitHub. Una bifurcación te permite experimentar con un proyecto sin afectar el proyecto original y es especialmente útil cuando deseas contribuir a un proyecto existente.\nAquí te muestro los pasos para hacer una bifurcación y contribuir al proyecto original:\nHaz una bifurcación del proyecto original: Ve al repositorio del proyecto en GitHub y haz clic en el botón \u0026ldquo;Fork\u0026rdquo; en la parte superior derecha de la página. Esto creará una copia del repositorio en tu cuenta de GitHub.\nClona tu bifurcación: Ahora, debes clonar tu bifurcación en tu computadora local usando el comando git clone. Para ello, ve a tu cuenta de GitHub y busca la bifurcación que acabas de crear. Haz clic en el botón \u0026ldquo;Code\u0026rdquo; y copia la URL que se muestra.\nLuego, en tu terminal, ejecuta el siguiente comando:\ngit clone \u0026lt;URL de tu bifurcación\u0026gt; Crea una nueva rama: Después de clonar el repositorio, debes crear una nueva rama en la que trabajarás en tu contribución. Para ello, ejecuta el siguiente comando en tu terminal: git checkout -b \u0026lt;nombre-de-la-rama\u0026gt; Haz los cambios necesarios: Ahora, puedes hacer los cambios necesarios en tu código. En este punto, puedes agregar, eliminar o modificar archivos según la contribución que desees realizar.\nConfirma los cambios: Una vez que hayas hecho los cambios necesarios, debes confirmarlos. Para ello, ejecuta los siguientes comandos en tu terminal:\ngit add . git commit -m \u0026#34;Mensaje de confirmación que describe los cambios realizados\u0026#34; Envía los cambios a tu bifurcación: Ahora, debes enviar los cambios a tu bifurcación. Para ello, ejecuta el siguiente comando en tu terminal: git push origin \u0026lt;nombre-de-la-rama\u0026gt; Crea una solicitud de extracción: Una vez que hayas enviado los cambios a tu bifurcación, ve a tu cuenta de GitHub y busca la rama que acabas de crear. Haz clic en el botón \u0026ldquo;Compare \u0026amp; pull request\u0026rdquo; para crear una solicitud de extracción (pull request) al proyecto original.\nEspera la revisión: Ahora, los propietarios del proyecto original revisarán tu solicitud de extracción y te darán retroalimentación si es necesario. Si todo está bien, tus cambios se fusionarán con el proyecto original.\nExplicación de GitHub # Dentro de la documentación de github, podemos encontrar informacion de la forma en la que podemos realizar sus procesos. A continuación tenemos dos lecturas sobre la bifurcación y la contribución a un proyecto. Lee ambas secciones y realiza lo siguiente:\nRealiza la Bifurcación de un repositorio de tu gusto, puedes buscar y elegir el que desees. Realiza una copia local de ese repositorio. Realiza la contribucion a ese proyecto, no importa si es pequeña o grande, lo importante es que lo hagas. Realiza un Pull Request a ese proyecto. Envía un pantallazo de tu contribución a DISCORD. Este ultimo paso es importante y no es opcional, tienes que enviar esta evidencia por el canal de Discord. 👉 Bifurcación de un repositorio\n👉 Contribuir a un proyecto\n","date":"15 abril 2023","permalink":"/platform/levels/level2_23/dia11/git/","section":"Levels","summary":"En el mundo del desarrollo de software colaborativo, GitHub se ha convertido en una herramienta fundamental para trabajar en equipo y compartir código.","title":"Bifurcacion de un Repositorio (Fork)"},{"content":"Componentes en Bootstrap 5 # ¡Hola a todos!\nHoy hablaremos sobre los componentes en Bootstrap 5. Para ayudarles a comprender mejor este tema,veremos una serie de videos que cubrirán algunos de los componentes que se pueden crear con esta librería.\nAl final de esta clase, tendrán una mejor comprensión de cómo usar Bootstrap 5 para crear interfaces de usuario visualmente atractivas y altamente funcionales. Así que, ¡prepárense para sumergirse en el mundo de los componentes de Bootstrap 5!\nLos videos que veremos hoy forman parte de una lista de reproduccion del youtuber Kiko Palomares. Los videos que habla sobre los componentes va desde el video numero 26 hasta el numero 38. Te dejaré aqui empezando por el video numero 26 y mira tantos videos como puedas. Recuerda realizar la práctica a la par que ves los videos para entender mejor el concepto:\nKiko Palomares - Bootstrap 5\nDocumentacion de Bootstrap (Comenzando con el Acordión):\nBootstrap 5 - Acordeon\n","date":"7 abril 2023","permalink":"/platform/levels/level2_23/dia10/components/","section":"Levels","summary":"Componentes en Bootstrap 5 # ¡Hola a todos!","title":"Components"},{"content":"Merge de Ramas y Conflictos # Hoy seguiremos revisando los conflictos que pueden aparecer al momento de combinar ramas. Hoy seguiremos aprendiendo sobre el tema viendo el tutorial creado por FreeCodeCamp. Recuerda que pueden hacer tus comentarios por el canal de discord para que podamos resolver tus dudas.\n","date":"7 abril 2023","permalink":"/platform/levels/level2_23/dia08/merge/","section":"Levels","summary":"Merge de Ramas y Conflictos # Hoy seguiremos revisando los conflictos que pueden aparecer al momento de combinar ramas.","title":"Merge"},{"content":"Resolver conflictos en GIT # Resolver conflictos en GitHub # En ocasiones, los conflictos en nuestro repositorio de GitHub pueden ser resueltos directamente desde la interfaz de GitHub. Aquí veremos un ejemplo de como sería un caso de conflicto en GitHub.\n","date":"7 abril 2023","permalink":"/platform/levels/level2_23/dia07/git/","section":"Levels","summary":"Resolver conflictos en GIT # Resolver conflictos en GitHub # En ocasiones, los conflictos en nuestro repositorio de GitHub pueden ser resueltos directamente desde la interfaz de GitHub.","title":"Git"},{"content":"Aplicando lo aprendido # Para este día, deberás aplicar lo aprendido en los días anteriores para crear una web con Bootstrap 5. Sigue el tutorial que se presenta a continuación sobre la construcción de una web con esta libreria. Recuerda que algunas de las técnicas que aprendas aquí puedes aplicarlas en tus proyectos personales. Si tienes alguna duda, toma nota y has tus preguntas por el canal de discord.\n","date":"7 abril 2023","permalink":"/platform/levels/level2_23/dia07/web_bs5/","section":"Levels","summary":"Aplicando lo aprendido # Para este día, deberás aplicar lo aprendido en los días anteriores para crear una web con Bootstrap 5.","title":"Creando una web con Bootstrap 5"},{"content":"Dentro de las cosas que hemos aprendido es crear páginas web que sean atractivas para las personas y Bootstrap ayuda a que ese proceso sea mas sencillo. Las páginas web tambien pueden ayudarnos para mostrar información de manera ordenada y que sea fácil de entender. Para esto es importante que sepamos como crear tablas y formularios en Bootstrap. Hoy veremos como hacer uso de estas estructuras con la ayuda de Bootstrap.\nRecuerda no solo apoyarte en el video, sino tambien aprovechar la documentación de la página oficial de bootstrap.\nTable # Bootstrap 5 - Tables Formularios # Bootstrap 5 - Forms ","date":"26 marzo 2023","permalink":"/platform/levels/level2_23/dia05/table/","section":"Levels","summary":"Dentro de las cosas que hemos aprendido es crear páginas web que sean atractivas para las personas y Bootstrap ayuda a que ese proceso sea mas sencillo.","title":"Table y Forms"},{"content":"A continuacion veremos como funcionan los contenedores y el sistema de grid en bootstrap. Adicionalmente te dejaré los enlaces a la documentación oficial de bootstrap para que puedas consultarla en cualquier momento. Recuerda que está en inglés por defecto pero puedes cambiar el idioma en tu navegador.\nContenedores en Bootstrap # Boostrap 5 - Containers Grid en Bootstrap # El sistema de grid en bootstrap usa una serie de contenedores, filas y columnas para organizar el contenido. Cada fila debe estar dentro de un contenedor y cada columna debe estar dentro de una fila. Está construido con flexbox y es totalmente responsive. En el siguiente video verás como funciona el sistema de grid en bootstrap y porqué se diferencia del sistema de grid en CSS.\nBootstrap 5 - Grid ","date":"26 marzo 2023","permalink":"/platform/levels/level2_23/dia03/conte/","section":"Levels","summary":"A continuacion veremos como funcionan los contenedores y el sistema de grid en bootstrap.","title":"Contenedores y GRID en Bootstrap"},{"content":"El diseño responsive o diseño adaptable es una técnica de diseño web que permite que un sitio web se adapte a diferentes dispositivos y tamaños de pantalla. En lugar de tener que crear una versión separada del sitio web para cada tipo de dispositivo, el diseño responsive utiliza un conjunto de reglas CSS para ajustar el diseño de una página en función del tamaño de pantalla del dispositivo en el que se está viendo.\nLa importancia del diseño responsive en la actualidad radica en el creciente uso de dispositivos móviles para acceder a internet. Según las estadísticas, en la actualidad más de la mitad del tráfico web proviene de dispositivos móviles. Si un sitio web no se visualiza bien en un dispositivo móvil, es probable que los visitantes abandonen el sitio web y busquen una alternativa que sea más fácil de navegar.\nAdemás, los motores de búsqueda, como Google, también dan preferencia a los sitios web que tienen un diseño responsive en sus resultados de búsqueda móviles. Esto significa que si un sitio web no es responsive, es posible que no aparezca en los primeros resultados de búsqueda móviles, lo que podría tener un impacto negativo en el tráfico del sitio web.\nOtra razón por la que el diseño responsive es importante es que permite que el contenido del sitio web se presente de manera consistente en diferentes dispositivos. Esto significa que los usuarios pueden ver la misma información, imágenes y videos en una pantalla de escritorio o en un dispositivo móvil, lo que ayuda a mejorar la experiencia del usuario.\nEn resumen, el diseño responsive es una técnica de diseño web esencial en la actualidad. Al permitir que un sitio web se adapte a diferentes tamaños de pantalla y dispositivos, mejora la experiencia del usuario, aumenta la visibilidad del sitio web en los resultados de búsqueda móviles y ayuda a mantener la coherencia del contenido en diferentes dispositivos.\nA continuación veremos dos videos donde se nos amplía mas este tema. Recuerda analizar los videos y anotar lo que consideres importante, al igual que las dudas que tengas.\nResponsive Design # Breakpoints en el Responsive Design # Media Queries # Las media queries son una parte fundamental del diseño responsive. Las media queries permiten que los estilos CSS se apliquen solo cuando se cumplen ciertas condiciones. Por ejemplo, puede usar media queries para aplicar estilos CSS diferentes a un sitio web dependiendo del tamaño de la pantalla del dispositivo en el que se está viendo. En el siguiente video veremos un poco más de este concepto.\n","date":"26 marzo 2023","permalink":"/platform/levels/level2_23/dia02/respon/","section":"Levels","summary":"El diseño responsive o diseño adaptable es una técnica de diseño web que permite que un sitio web se adapte a diferentes dispositivos y tamaños de pantalla.","title":"Responsive Design - Diseño adaptable"},{"content":" Ramas # git branch y git switch # git merge # .gitignore # Curso GIT y GitHub # Hasta ahora hemos visto a detalle como funciona cada uno de los comandos. En general, en el día a día, esto suele ser mas sencillo de aplicar. Para ello, veremos el siguiente tutorial de Fazt en el que se explica como crear un repositorio en GitHub y como subirlo a la nube. Comandos # Hasta el momento, hemos aprendido varios comandos de GIT, así que haré una lista de los comandos que hemos aprendido hasta ahora.\ngit init: Inicializa un repositorio GIT en el directorio actual. git status: Muestra el estado actual del repositorio. git add: Agrega archivos al área de preparación. git commit: Crea un nuevo commit con los archivos del área de preparación. git log: Muestra el historial de commits. git branch: Muestra las ramas del repositorio. git switch: Cambia de rama. git merge: Une dos ramas. git checkout: Cambia de rama o restaura un archivo. git tree: Muestra el árbol de commits. ","date":"26 marzo 2023","permalink":"/platform/java/git/ramas/","section":"Javae","summary":"Ramas # git branch y git switch # git merge # .","title":"Ramas en GIT"},{"content":"Ramas # git branch y git switch # git merge # .gitignore # Curso GIT y GitHub # Hasta ahora hemos visto a detalle como funciona cada uno de los comandos. En general, en el día a día, esto suele ser mas sencillo de aplicar. Para ello, veremos el siguiente tutorial de Fazt en el que se explica como crear un repositorio en GitHub y como subirlo a la nube. Comandos # Hasta el momento, hemos aprendido varios comandos de GIT, así que haré una lista de los comandos que hemos aprendido hasta ahora.\ngit init: Inicializa un repositorio GIT en el directorio actual. git status: Muestra el estado actual del repositorio. git add: Agrega archivos al área de preparación. git commit: Crea un nuevo commit con los archivos del área de preparación. git log: Muestra el historial de commits. git branch: Muestra las ramas del repositorio. git switch: Cambia de rama. git merge: Une dos ramas. git checkout: Cambia de rama o restaura un archivo. git tree: Muestra el árbol de commits. ","date":"26 marzo 2023","permalink":"/platform/levels/level2_23/dia05/ramas/","section":"Levels","summary":"Ramas # git branch y git switch # git merge # .","title":"Ramas en GIT"},{"content":"Configuración y bases de git # Hoy aprenderemos a configurar git y a usar los comandos básicos para trabajar con el. adicionalmente, recuerda que existe la documentación oficial de GIT, te la dejo aquí abajo para que te apoyes en ella de la mano de lo que aprenderás en estos videos:+\nGit Documentation\ngit init # Nota: En este video se habla de personalizar la terminal, te recomiendo no hacerlo, ya que puede causar problemas con el funcionamiento de la misma si no entiendes su uso, además que podrías gastar mucho tiempo en intentar realizar esto.\nRamas de GIT # Las 3 areas de GIT # git add y git commit # ","date":"24 marzo 2023","permalink":"/platform/levels/level2_23/dia04/git/","section":"Levels","summary":"Configuración y bases de git # Hoy aprenderemos a configurar git y a usar los comandos básicos para trabajar con el.","title":"Comandos de GIT"},{"content":"Repaso de JavaScript # Hoy vamos a repasar los conceptos que hemos aprendido en JS, te recomendamos ver los siguientes videos haciendo pausa, tomando nota y probando el codigo en tu editor de texto.\nConsumo de API\u0026rsquo;s # Callbacks # El siguiente video se profundiza en callbacks, te recomiendo que puedas verlo para ampliar un poco el panorama, pero si te llega a ver muy confuso puedes pasar a la siguiente sección.\nDesestructuración # ","date":"23 marzo 2023","permalink":"/platform/levels/level2_23/dia13/repaso/","section":"Levels","summary":"Repaso de JavaScript # Hoy vamos a repasar los conceptos que hemos aprendido en JS, te recomendamos ver los siguientes videos haciendo pausa, tomando nota y probando el codigo en tu editor de texto.","title":"Repaso"},{"content":"Para esta seccion vamos a repasar la modulación dentro de JS, así que volveremos a ver el tutorial del canal de youtube de Fazt Code. Presta atención a los detalles y trata de entender todo lo que se explica. Te recomiento que vayas probando el codigo en tu editor de texto y veas como funciona.\nModules: Tutorial por Fazt Code # ","date":"22 marzo 2023","permalink":"/platform/levels/level2_23/dia12/modu/","section":"Levels","summary":"Para esta seccion vamos a repasar la modulación dentro de JS, así que volveremos a ver el tutorial del canal de youtube de Fazt Code.","title":"Módulos, refuerzo"},{"content":"Dependencias # ¿Qué es el array de dependencias en React? # En nuestro post sobre el hook useCallback en React, te hemos mencionado que uno de los pasos más importantes en la ejecución de esta función es colocar un array de dependencias. Este elemento también es fundamental en el uso del hook useEffect en React. Pero, ¿qué es?\nCuando hablamos del array de dependencias en React nos referimos a pasar como segundo parámetro de un hook un array. Es decir, mientras que el primer parámetro de un hook como useEffect o useCallback es una función, el segundo parámetro puede ser un array. Aunque este array puede estar vacío o lleno, su función cambia según su valor. A continuación, te explicamos qué sucede en cada caso.\nSe le llama array de dependencias porque el valor contenido dentro del array se conoce como una dependencia. Este nombre se da porque el funcionamiento del hook cambiará dependiendo del valor que contenga este array.\nEn el hook useEffect, pasar un array vacío como segundo parámetro quiere decir que el efecto contenido en la función solo se ejecutará después del primer render. Por su parte, un array de dependencias en React que contenga un valor se ejecuta cada vez que cambie este valor.\nEn el hook useCallback, un array vacío quiere decir que la función contenida como primer parámetro se ejecutará justo después del primer render. La diferencia aquí es que la función quedará memoizada, es decir, no cambiará su referencia a largo de los consecuentes renders. Entonces, con el array de dependencias en React conseguiremos una función que será siempre la misma durante toda la vida del componente.\n¿Y qué sucede si ponemos un valor dentro del array de dependencias en useCallback? Pues esta dependencia marcará cuando se va a generar una nueva referencia. Es decir, cada vez que cambie la dependencia, cambiará la referencia.\nDesde KeepCoding queremos comentarte que el array de dependencias en React no es algo sobre lo que haya que pensar demasiado. En realidad, cualquier elemento que manejemos dentro de los hooks useCallback y useEffect, por ejemplo una prop, se vuelve una dependencia. Por ello, hay que buscar de qué depende la función que tenemos dentro del hook, un estado, un dato externo, una función. En muchos de los casos, terminamos poniendo un array vacío.\n¿Cómo saber si estamos usando el array de dependencias en React correctamente? # Debido a los distintos modos en que podemos usar el array de dependencias en React, podemos tener dudas sobre su uso adecuado. Lo bueno es que con análisis automáticos como ESLint podemos obtener un resultado. Esta extensión nos avisará cuando no tengamos bien puesto este elemento.\nPor ejemplo, cuando un hook useCallback no tiene un array de dependencias, veremos el siguiente mensaje:\nReact Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?\nEste mensaje sale porque no tiene mucho sentido usar el useCallback sin un array de dependencias. ¿Por qué? Pues porque si no se lo ponemos, al igual que si no lo ponemos en useEffect, las funciones se ejecutarán siempre después de cada render. Por ello, utilizar useCallback para que se cree una nueva referencia en cada render contradice el mismo propósito del hook.\nEn useCallback es bueno mantener las dependencias al mínimo. Normalmente, estamos utilizando este hook porque queremos reducir el número de referencias que se producen de una misma función. Entonces, para mejorar su performance deberemos mantener pocas dependencias. No necesariamente tiene que ser un array vacío, pero deberíamos asegurarnos de tener pocas variables que cambien poco.\n","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia12/dependencias/","section":"Levels","summary":"Dependencias # ¿Qué es el array de dependencias en React?","title":"Dependencias"},{"content":"Dependencias # ¿Qué es el array de dependencias en React? # En nuestro post sobre el hook useCallback en React, te hemos mencionado que uno de los pasos más importantes en la ejecución de esta función es colocar un array de dependencias. Este elemento también es fundamental en el uso del hook useEffect en React. Pero, ¿qué es?\nCuando hablamos del array de dependencias en React nos referimos a pasar como segundo parámetro de un hook un array. Es decir, mientras que el primer parámetro de un hook como useEffect o useCallback es una función, el segundo parámetro puede ser un array. Aunque este array puede estar vacío o lleno, su función cambia según su valor. A continuación, te explicamos qué sucede en cada caso.\nSe le llama array de dependencias porque el valor contenido dentro del array se conoce como una dependencia. Este nombre se da porque el funcionamiento del hook cambiará dependiendo del valor que contenga este array.\nEn el hook useEffect, pasar un array vacío como segundo parámetro quiere decir que el efecto contenido en la función solo se ejecutará después del primer render. Por su parte, un array de dependencias en React que contenga un valor se ejecuta cada vez que cambie este valor.\nEn el hook useCallback, un array vacío quiere decir que la función contenida como primer parámetro se ejecutará justo después del primer render. La diferencia aquí es que la función quedará memoizada, es decir, no cambiará su referencia a largo de los consecuentes renders. Entonces, con el array de dependencias en React conseguiremos una función que será siempre la misma durante toda la vida del componente.\n¿Y qué sucede si ponemos un valor dentro del array de dependencias en useCallback? Pues esta dependencia marcará cuando se va a generar una nueva referencia. Es decir, cada vez que cambie la dependencia, cambiará la referencia.\nDesde KeepCoding queremos comentarte que el array de dependencias en React no es algo sobre lo que haya que pensar demasiado. En realidad, cualquier elemento que manejemos dentro de los hooks useCallback y useEffect, por ejemplo una prop, se vuelve una dependencia. Por ello, hay que buscar de qué depende la función que tenemos dentro del hook, un estado, un dato externo, una función. En muchos de los casos, terminamos poniendo un array vacío.\n¿Cómo saber si estamos usando el array de dependencias en React correctamente? # Debido a los distintos modos en que podemos usar el array de dependencias en React, podemos tener dudas sobre su uso adecuado. Lo bueno es que con análisis automáticos como ESLint podemos obtener un resultado. Esta extensión nos avisará cuando no tengamos bien puesto este elemento.\nPor ejemplo, cuando un hook useCallback no tiene un array de dependencias, veremos el siguiente mensaje:\nReact Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?\nEste mensaje sale porque no tiene mucho sentido usar el useCallback sin un array de dependencias. ¿Por qué? Pues porque si no se lo ponemos, al igual que si no lo ponemos en useEffect, las funciones se ejecutarán siempre después de cada render. Por ello, utilizar useCallback para que se cree una nueva referencia en cada render contradice el mismo propósito del hook.\nEn useCallback es bueno mantener las dependencias al mínimo. Normalmente, estamos utilizando este hook porque queremos reducir el número de referencias que se producen de una misma función. Entonces, para mejorar su performance deberemos mantener pocas dependencias. No necesariamente tiene que ser un array vacío, pero deberíamos asegurarnos de tener pocas variables que cambien poco.\n","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/12laravel/dependencias/","section":"Levels","summary":"Dependencias # ¿Qué es el array de dependencias en React?","title":"Dependencias"},{"content":"Instrucciones # Bienvenido al mini proyecto del nivel 3. En este proyecto estaremos aplicando los adquiridos tanto en el nivel 2 como lo que estás aprendiendo en el nivel 3. Sigue las instrucciones de este archivo para completar el proyecto y ten en cuenta que estas mismas instrucciones se tomaran en cuenta para la evaluación del proyecto.\nInstrucciones generales # La misma empresa le gusto tu trabajo pasado pero ahora desea la aplicación en un código especifico migra y realízala con React.JS. el sector de viajes llamada windbnb Por suerte, ya tienes una base de código que puedes utilizar para comenzar a trabajar. Según las instrucciones que el cliente nos ha dado, te daré las instrucciones para completar el proyecto. El Figma del proyecto se encuentra en el siguiente enlace: Windbnb Instrucciones del proyecto\nLayout | Diseño # El diseño de esta página web debe ser 100% responsive. Debes asegurarte de que el diseño se adapte a diferentes tamaños de pantalla. Para lograr esto, el cliente y tu han acordado que se trabajará con la librería de Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. Dentro del archivo Figma verás que hay 2 vistas principales: Mobile y Desktop. Te recomendamos que trabajes con la vista Mobile primero y luego con la vista Desktop. Esto te ayudará a enfocarte en la responsividad de la página web, a la vez que Bootstrap está creado con este enfoque.\nFuentes # Las fuentes para este proyecto las hemos traido de Google Fonts. Ya hemos importado las fuentes a usar al proyecto. Para usarlas desde CSS, puedes utilizar la siguiente sintaxis:\nfont-family: 'Montserrat', sans-serif; /* Fuente principal */ font-family: 'Mulish', sans-serif; /* Fuente secundaria */ Iconos # Para los iconos, utilizaremos la librería de iconos de Google: Material Icons. Para usarlos puede seguir el enlace anterior y buscar el icono que necesite. Una vez que lo encuentre, copie el código que se le proporciona y peguelo en el HTML. Por ejemplo:\n\u0026lt;i class=\u0026#34;material-icons-sharp\u0026#34;\u0026gt;favorite\u0026lt;/i\u0026gt; Código base # Se te proporciona un código base para comenzar con el proyecto. Te recomendamos revisarlo y entenderlo para que puedas aprovecharlo al máximo. Puedes modificarlo de considerarlo necesairio, sin embargo debes tener cuidado con ello, ya que la base que se te entrega está pensada para que puedas completar el proyecto sin tener que modificarla demasiado. Algunas cosas que no debes modificar son: •\tEl nombre de los archivos y carpetas proporcionados. •\tEl archivo stays.json que contiene los datos de los alojamientos. •\tEl archivo index.html que contiene la estructura de la página web. Varios de los estilos ya están listos, sin embargo, debes completarlos para que se adapten a los requerimientos del proyecto.\nConsideraciones para la calificación # A continuación te diremos cuales son los puntos que se tomarán en cuenta para la calificacion del proyecto: •\tEl diseño debe ser 100% responsive. •\tEl diseño debe ser lo más fiel posible al proporcionado en el archivo Figma. •\tLos colores, fuentes, tamaños de letra, etc. deben ser los proporcionados en el archivo Figma. •\tEl proyecto debe ser desarrollado React y con Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. •\tLos datos deben ser obtenidos del archivo stays.json y no deben ser escritos a mano. •\tEl proyecto debe ser modulado y estructurado de forma que sea fácil de entender y mantener. •\tEl proyecto debe ser publicado en GitHub Pages. •\tEl proyecto debe tener más de un commit. •\tLa estructura de carpetas debe de ser por componentes según estructura de react.js •\tLas funciones dentro de los distintos modulos (app.js, data.js y dom.js) debe ir de acorde a su nombre. •\tEl proyecto debe ser subido a GitHub y el enlace debe ser enviado para su revisión.\n","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia13/mini/","section":"Levels","summary":"Instrucciones # Bienvenido al mini proyecto del nivel 3.","title":"Instrucciones"},{"content":"Instrucciones # Bienvenido al mini proyecto del nivel 3. En este proyecto estaremos aplicando los adquiridos tanto en el nivel 2 como lo que estás aprendiendo en el nivel 3. Sigue las instrucciones de este archivo para completar el proyecto y ten en cuenta que estas mismas instrucciones se tomaran en cuenta para la evaluación del proyecto.\nInstrucciones generales # La misma empresa le gusto tu trabajo pasado pero ahora desea la aplicación en un código especifico migra y realízala con React.JS. el sector de viajes llamada windbnb Por suerte, ya tienes una base de código que puedes utilizar para comenzar a trabajar. Según las instrucciones que el cliente nos ha dado, te daré las instrucciones para completar el proyecto. El Figma del proyecto se encuentra en el siguiente enlace: Windbnb Instrucciones del proyecto\nLayout | Diseño # El diseño de esta página web debe ser 100% responsive. Debes asegurarte de que el diseño se adapte a diferentes tamaños de pantalla. Para lograr esto, el cliente y tu han acordado que se trabajará con la librería de Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. Dentro del archivo Figma verás que hay 2 vistas principales: Mobile y Desktop. Te recomendamos que trabajes con la vista Mobile primero y luego con la vista Desktop. Esto te ayudará a enfocarte en la responsividad de la página web, a la vez que Bootstrap está creado con este enfoque.\nFuentes # Las fuentes para este proyecto las hemos traido de Google Fonts. Ya hemos importado las fuentes a usar al proyecto. Para usarlas desde CSS, puedes utilizar la siguiente sintaxis:\nfont-family: 'Montserrat', sans-serif; /* Fuente principal */ font-family: 'Mulish', sans-serif; /* Fuente secundaria */ Iconos # Para los iconos, utilizaremos la librería de iconos de Google: Material Icons. Para usarlos puede seguir el enlace anterior y buscar el icono que necesite. Una vez que lo encuentre, copie el código que se le proporciona y peguelo en el HTML. Por ejemplo:\n\u0026lt;i class=\u0026#34;material-icons-sharp\u0026#34;\u0026gt;favorite\u0026lt;/i\u0026gt; Código base # Se te proporciona un código base para comenzar con el proyecto. Te recomendamos revisarlo y entenderlo para que puedas aprovecharlo al máximo. Puedes modificarlo de considerarlo necesairio, sin embargo debes tener cuidado con ello, ya que la base que se te entrega está pensada para que puedas completar el proyecto sin tener que modificarla demasiado. Algunas cosas que no debes modificar son: •\tEl nombre de los archivos y carpetas proporcionados. •\tEl archivo stays.json que contiene los datos de los alojamientos. •\tEl archivo index.html que contiene la estructura de la página web. Varios de los estilos ya están listos, sin embargo, debes completarlos para que se adapten a los requerimientos del proyecto.\nConsideraciones para la calificación # A continuación te diremos cuales son los puntos que se tomarán en cuenta para la calificacion del proyecto: •\tEl diseño debe ser 100% responsive. •\tEl diseño debe ser lo más fiel posible al proporcionado en el archivo Figma. •\tLos colores, fuentes, tamaños de letra, etc. deben ser los proporcionados en el archivo Figma. •\tEl proyecto debe ser desarrollado React y con Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. •\tLos datos deben ser obtenidos del archivo stays.json y no deben ser escritos a mano. •\tEl proyecto debe ser modulado y estructurado de forma que sea fácil de entender y mantener. •\tEl proyecto debe ser publicado en GitHub Pages. •\tEl proyecto debe tener más de un commit. •\tLa estructura de carpetas debe de ser por componentes según estructura de react.js •\tLas funciones dentro de los distintos modulos (app.js, data.js y dom.js) debe ir de acorde a su nombre. •\tEl proyecto debe ser subido a GitHub y el enlace debe ser enviado para su revisión.\n","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/13laravel/mini/","section":"Levels","summary":"Instrucciones # Bienvenido al mini proyecto del nivel 3.","title":"Instrucciones"},{"content":"Instrucciones # Bienvenido al mini proyecto del nivel 3. En este proyecto estaremos aplicando los adquiridos tanto en el nivel 2 como lo que estás aprendiendo en el nivel 3. Sigue las instrucciones de este archivo para completar el proyecto y ten en cuenta que estas mismas instrucciones se tomaran en cuenta para la evaluación del proyecto.\nInstrucciones generales # La misma empresa le gusto tu trabajo pasado pero ahora desea la aplicación en un código especifico migra y realízala con React.JS. el sector de viajes llamada windbnb Por suerte, ya tienes una base de código que puedes utilizar para comenzar a trabajar. Según las instrucciones que el cliente nos ha dado, te daré las instrucciones para completar el proyecto. El Figma del proyecto se encuentra en el siguiente enlace: Windbnb Instrucciones del proyecto\nLayout | Diseño # El diseño de esta página web debe ser 100% responsive. Debes asegurarte de que el diseño se adapte a diferentes tamaños de pantalla. Para lograr esto, el cliente y tu han acordado que se trabajará con la librería de Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. Dentro del archivo Figma verás que hay 2 vistas principales: Mobile y Desktop. Te recomendamos que trabajes con la vista Mobile primero y luego con la vista Desktop. Esto te ayudará a enfocarte en la responsividad de la página web, a la vez que Bootstrap está creado con este enfoque.\nFuentes # Las fuentes para este proyecto las hemos traido de Google Fonts. Ya hemos importado las fuentes a usar al proyecto. Para usarlas desde CSS, puedes utilizar la siguiente sintaxis:\nfont-family: 'Montserrat', sans-serif; /* Fuente principal */ font-family: 'Mulish', sans-serif; /* Fuente secundaria */ Iconos # Para los iconos, utilizaremos la librería de iconos de Google: Material Icons. Para usarlos puede seguir el enlace anterior y buscar el icono que necesite. Una vez que lo encuentre, copie el código que se le proporciona y peguelo en el HTML. Por ejemplo:\n\u0026lt;i class=\u0026#34;material-icons-sharp\u0026#34;\u0026gt;favorite\u0026lt;/i\u0026gt; Código base # Se te proporciona un código base para comenzar con el proyecto. Te recomendamos revisarlo y entenderlo para que puedas aprovecharlo al máximo. Puedes modificarlo de considerarlo necesairio, sin embargo debes tener cuidado con ello, ya que la base que se te entrega está pensada para que puedas completar el proyecto sin tener que modificarla demasiado. Algunas cosas que no debes modificar son: •\tEl nombre de los archivos y carpetas proporcionados. •\tEl archivo stays.json que contiene los datos de los alojamientos. •\tEl archivo index.html que contiene la estructura de la página web. Varios de los estilos ya están listos, sin embargo, debes completarlos para que se adapten a los requerimientos del proyecto.\nConsideraciones para la calificación # A continuación te diremos cuales son los puntos que se tomarán en cuenta para la calificacion del proyecto: •\tEl diseño debe ser 100% responsive. •\tEl diseño debe ser lo más fiel posible al proporcionado en el archivo Figma. •\tLos colores, fuentes, tamaños de letra, etc. deben ser los proporcionados en el archivo Figma. •\tEl proyecto debe ser desarrollado React y con Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. •\tLos datos deben ser obtenidos del archivo stays.json y no deben ser escritos a mano. •\tEl proyecto debe ser modulado y estructurado de forma que sea fácil de entender y mantener. •\tEl proyecto debe ser publicado en GitHub Pages. •\tEl proyecto debe tener más de un commit. •\tLa estructura de carpetas debe de ser por componentes según estructura de react.js •\tLas funciones dentro de los distintos modulos (app.js, data.js y dom.js) debe ir de acorde a su nombre. •\tEl proyecto debe ser subido a GitHub y el enlace debe ser enviado para su revisión.\n","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/13laravel/mini/","section":"Levels","summary":"Instrucciones # Bienvenido al mini proyecto del nivel 3.","title":"Instrucciones"},{"content":"Instrucciones Proyecto Final # ### Paso 1: crea un nuevo repositorio en github ### Paso 2: copie los recursos, README.md a su repositorio ### Paso 3: inicie sesión en Figma para verificar la fuente, el color, el espaciado, etc. ### Paso 4: Complete todas las historias de usuario ### Paso 5: Actualice README.md ### Paso 6: implemente su aplicación y envíe su solución ### Paso 7: Comparta su solución en Discord, Twitter y otras plataformas para solicitar comentarios Link de Figma: # https://www.figma.com/file/5X3Ao3gEqZPqqKctP7riDF?chrome=DOCUMENTATION\u0026embed_host=astra\u0026kind=\u0026node-id=0%3A1\u0026viewer=1\nLink de API: # https://openweathermap.org/api\nA continuación te diremos cuales son los puntos que se tomarán en cuenta para la calificacion del proyecto: • El diseño debe ser 100% responsive. • El diseño debe ser lo más fiel posible al proporcionado en el archivo Figma. • Los colores, fuentes, tamaños de letra, etc. deben ser los proporcionados en el archivo Figma. • El proyecto debe ser desarrollado NEXT.js y con Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. • El proyecto debe ser modulado y estructurado de forma que sea fácil de entender y mantener. • El proyecto debe ser publicado en GitHub Pages. • El proyecto debe tener más de un commit descarga el Archivo ZIP para completar tu PROYECTO.\n","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia14/final/","section":"Levels","summary":"Instrucciones Proyecto Final # ### Paso 1: crea un nuevo repositorio en github ### Paso 2: copie los recursos, README.","title":"Instrucciones Final"},{"content":"Instrucciones Proyecto Final # ### Paso 1: crea un nuevo repositorio en github ### Paso 2: copie los recursos, README.md a su repositorio ### Paso 3: inicie sesión en Figma para verificar la fuente, el color, el espaciado, etc. ### Paso 4: Complete todas las historias de usuario ### Paso 5: Actualice README.md ### Paso 6: implemente su aplicación y envíe su solución ### Paso 7: Comparta su solución en Discord, Twitter y otras plataformas para solicitar comentarios Link de Figma: # https://www.figma.com/file/5X3Ao3gEqZPqqKctP7riDF?chrome=DOCUMENTATION\u0026embed_host=astra\u0026kind=\u0026node-id=0%3A1\u0026viewer=1\nLink de API: # https://openweathermap.org/api\nA continuación te diremos cuales son los puntos que se tomarán en cuenta para la calificacion del proyecto: • El diseño debe ser 100% responsive. • El diseño debe ser lo más fiel posible al proporcionado en el archivo Figma. • Los colores, fuentes, tamaños de letra, etc. deben ser los proporcionados en el archivo Figma. • El proyecto debe ser desarrollado NEXT.js y con Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. • El proyecto debe ser modulado y estructurado de forma que sea fácil de entender y mantener. • El proyecto debe ser publicado en GitHub Pages. • El proyecto debe tener más de un commit descarga el Archivo ZIP para completar tu PROYECTO.\n","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/14laravel/final/","section":"Levels","summary":"Instrucciones Proyecto Final # ### Paso 1: crea un nuevo repositorio en github ### Paso 2: copie los recursos, README.","title":"Instrucciones Final"},{"content":"Instrucciones Proyecto Final # ### Paso 1: crea un nuevo repositorio en github ### Paso 2: copie los recursos, README.md a su repositorio ### Paso 3: inicie sesión en Figma para verificar la fuente, el color, el espaciado, etc. ### Paso 4: Complete todas las historias de usuario ### Paso 5: Actualice README.md ### Paso 6: implemente su aplicación y envíe su solución ### Paso 7: Comparta su solución en Discord, Twitter y otras plataformas para solicitar comentarios Link de Figma: # https://www.figma.com/file/5X3Ao3gEqZPqqKctP7riDF?chrome=DOCUMENTATION\u0026embed_host=astra\u0026kind=\u0026node-id=0%3A1\u0026viewer=1\nLink de API: # https://openweathermap.org/api\nA continuación te diremos cuales son los puntos que se tomarán en cuenta para la calificacion del proyecto: • El diseño debe ser 100% responsive. • El diseño debe ser lo más fiel posible al proporcionado en el archivo Figma. • Los colores, fuentes, tamaños de letra, etc. deben ser los proporcionados en el archivo Figma. • El proyecto debe ser desarrollado NEXT.js y con Bootstrap 5. Para los estilos que no se puedan lograr con Bootstrap, puedes utilizar CSS puro. • El proyecto debe ser modulado y estructurado de forma que sea fácil de entender y mantener. • El proyecto debe ser publicado en GitHub Pages. • El proyecto debe tener más de un commit descarga el Archivo ZIP para completar tu PROYECTO.\n","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/14laravel/final/","section":"Levels","summary":"Instrucciones Proyecto Final # ### Paso 1: crea un nuevo repositorio en github ### Paso 2: copie los recursos, README.","title":"Instrucciones Final"},{"content":"MySQL en phpMyAdmin 5 # lección completa sobre cómo utilizar MySQL en phpMyAdmin, una popular herramienta de administración de bases de datos web:\nPaso 1: Acceder a phpMyAdmin\nAbre tu navegador web y accede a la URL donde está instalado phpMyAdmin. Por ejemplo, si está instalado localmente, la URL podría ser http://localhost/phpmyadmin. Ingresa tu nombre de usuario y contraseña para acceder a phpMyAdmin. Estos credenciales deben ser los mismos que usaste para configurar MySQL. Paso 2: Seleccionar la base de datos\nUna vez que hayas accedido a phpMyAdmin, verás una lista de bases de datos en el panel izquierdo. Haz clic en el nombre de la base de datos en la que deseas trabajar. Si aún no tienes una base de datos, puedes crear una nueva siguiendo los pasos mencionados a continuación. Paso 3: Crear una base de datos\nEn el panel izquierdo de phpMyAdmin, haz clic en \u0026ldquo;Nueva\u0026rdquo; para crear una nueva base de datos. Ingresa un nombre para la nueva base de datos y selecciona el conjunto de caracteres y la clasificación adecuada. Haz clic en \u0026ldquo;Crear\u0026rdquo; para crear la base de datos. Paso 4: Crear una tabla\nUna vez seleccionada la base de datos, haz clic en la pestaña \u0026ldquo;Estructura\u0026rdquo;. En la parte superior, encontrarás un campo para ingresar el nombre de la tabla. Ingresa un nombre para la tabla y especifica el número de columnas que deseas tener. En la sección de columnas, ingresa los nombres de columna, selecciona el tipo de datos adecuado para cada columna y define otras propiedades, como la longitud y si es requerida o no. Haz clic en \u0026ldquo;Guardar\u0026rdquo; para crear la tabla. Paso 5: Insertar datos en la tabla\nDespués de crear la tabla, ve a la pestaña \u0026ldquo;Datos\u0026rdquo;. Haz clic en \u0026ldquo;Insertar\u0026rdquo; para agregar una nueva fila de datos. Completa los valores para cada columna en la fila de inserción. Haz clic en \u0026ldquo;Ejecutar\u0026rdquo; para insertar los datos en la tabla. Paso 6: Ejecutar consultas SQL\nphpMyAdmin te permite ejecutar consultas SQL directamente en la base de datos. Ve a la pestaña \u0026ldquo;SQL\u0026rdquo; y escribe tu consulta SQL en el campo de texto. Haz clic en \u0026ldquo;Ejecutar\u0026rdquo; para ejecutar la consulta y ver los resultados. Paso 7: Administrar la base de datos\nphpMyAdmin proporciona una variedad de funciones para administrar la base de datos, como crear y eliminar tablas, agregar y eliminar columnas, realizar copias de seguridad, importar y exportar datos, entre otros. Explora las diferentes opciones y características disponibles en phpMyAdmin para administrar eficientemente tu base de datos. Recuerda que phpMyAdmin es una herramienta poderosa y debes tener cuidado al realizar cambios en tu base de datos. Asegúrate de entender las consecuencias de tus acciones antes de ejecutar consultas o modificar estructuras de tablas.\nmysql en Laravel # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/12laravel/dependencias/","section":"Levels","summary":"MySQL en phpMyAdmin 5 # lección completa sobre cómo utilizar MySQL en phpMyAdmin, una popular herramienta de administración de bases de datos web:","title":"MySQL en phpMyAdmin"},{"content":"CRUD LARAVEL 4 # paso a paso completo para crear un CRUD (Crear, Leer, Actualizar, Eliminar) utilizando Laravel:\nPaso 1: Configurar un proyecto Laravel Comienza por configurar un nuevo proyecto Laravel utilizando el comando composer create-project. Abre una terminal y ejecuta el siguiente comando:\ncomposer create-project --prefer-dist laravel/laravel nombre-proyecto Esto creará un nuevo proyecto Laravel en un directorio llamado \u0026ldquo;nombre-proyecto\u0026rdquo;.\nPaso 2: Configurar la base de datos Accede al archivo .env en la raíz de tu proyecto y configura la conexión a la base de datos. Asegúrate de tener una base de datos creada y configurada correctamente en tu entorno de desarrollo.\nPaso 3: Crear una migración y modelo Utiliza las migraciones de Laravel para crear la estructura de la base de datos. Ejecuta el siguiente comando en la terminal:\nphp artisan make:migration create_nombre_tabla_table --create=nombre_tabla Esto creará un archivo de migración en el directorio database/migrations. Abre el archivo de migración y define los campos de la tabla.\nUna vez que hayas creado la migración, ejecuta el siguiente comando para migrar la tabla a la base de datos:\nphp artisan migrate Después de crear la migración, crea un modelo correspondiente utilizando el comando make:model:\nphp artisan make:model NombreModelo Esto generará un archivo de modelo en el directorio app/Models.\nPaso 4: Crear rutas y controladores Define las rutas y los controladores para tu CRUD. Abre el archivo routes/web.php y define las rutas del CRUD. Puedes utilizar los métodos Route::get(), Route::post(), Route::put(), Route::delete(), entre otros, para definir las diferentes rutas y los controladores que manejarán esas rutas.\nCrea un controlador utilizando el comando make:controller:\nphp artisan make:controller NombreControlador --resource Esto generará un archivo de controlador en el directorio app/Http/Controllers con los métodos CRUD predefinidos.\nPaso 5: Implementar la lógica del CRUD En el controlador, implementa la lógica para cada uno de los métodos CRUD. Por ejemplo, en el método index(), puedes obtener todos los registros de la base de datos utilizando el modelo correspondiente y devolverlos a la vista. En el método store(), puedes crear un nuevo registro en la base de datos utilizando los datos recibidos del formulario.\nUtiliza los métodos proporcionados por Laravel en el controlador y el modelo para realizar operaciones de base de datos, como all(), find(), create(), update(), delete(), etc.\nPaso 6: Crear vistas Crea las vistas correspondientes para tu CRUD en el directorio resources/views. Puedes crear una vista para mostrar todos los registros, una vista para mostrar un formulario de creación, una vista para mostrar un formulario de edición, y así sucesivamente.\nDentro de las vistas, utiliza la sintaxis de Blade de Laravel para mostrar los datos, crear formularios, etc.\nPaso 7: Asociar rutas a controladores Asocia las rutas definidas en el paso 4 a los métodos del controlador correspondiente. Ab\nVideo Crud con Laravel # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/11laravel/redux/","section":"Levels","summary":"CRUD LARAVEL 4 # paso a paso completo para crear un CRUD (Crear, Leer, Actualizar, Eliminar) utilizando Laravel:","title":"CRUD"},{"content":"Rutas API # Next.js provee una solución para construir APIs fácilmente en un entorno Serverless (Sin servidor), por lo que no tendremos que preocuparnos de pagar alojamiento de servidores para el back-end de nuestra aplicación. Todos los archivos dentro de la carpeta pages/api serán tratados como endpoints de nuestra API en lugar de páginas. Por ejemplo, si creamos un archivo pages/api/hola.js podremos acceder al mismo en la ruta: /api/hola y nos devolverá como respuesta un objeto json.\nexport default function manejador(req, res) { res.status(200).json({ texto: \u0026#34;Hola\u0026#34; }); } pages/api/hola.js Como puedes observar, para que este archivo funcione correctamente como API endpoint es necesario exportar una función manejador (handler) con los parámetros req y res. Si queremos tener acceso a los diferentes métodos HTTP en nuestro manejador podemos usar req.method dentro del mismo, por ejemplo:\nexport default function manejador(req, res) { switch (req.method) { case \u0026#34;GET\u0026#34;: // Nuestra lógica de código para el método GET... break; case \u0026#34;PATCH\u0026#34;: // Nuestra lógica de código para el método PATCH... break; case \u0026#34;DELETE\u0026#34;: // Nuestra lógica de código para el método DELETE... break; default: res.status(405).json({ mensaje: `El método HTTP ${req.method} no esta disponible en esta ruta`, }); break; } } Si ya estás familiarizado con Express.js probablemente encuentres muchas similitudes en cuanto a sintaxis.\nBlog Oficial de Next # link : https://nextjs.org/docs/api-routes/introduction\nRUD de comentarios para un blog # Rutas:\nCrear comentario: POST /api/comment Actualizar comentario: PATCH /api/comment/:id Eliminar comentario: DELETE /api/comment/:id Obtener un comentario: GET /api/comment/:id Obtener todos los comentarios: GET /api/comment/ video Api con Next. JS # ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia11/redux/","section":"Levels","summary":"Rutas API # Next.","title":"Rutas API"},{"content":"Rutas API # Next.js provee una solución para construir APIs fácilmente en un entorno Serverless (Sin servidor), por lo que no tendremos que preocuparnos de pagar alojamiento de servidores para el back-end de nuestra aplicación. Todos los archivos dentro de la carpeta pages/api serán tratados como endpoints de nuestra API en lugar de páginas. Por ejemplo, si creamos un archivo pages/api/hola.js podremos acceder al mismo en la ruta: /api/hola y nos devolverá como respuesta un objeto json.\nexport default function manejador(req, res) { res.status(200).json({ texto: \u0026#34;Hola\u0026#34; }); } pages/api/hola.js Como puedes observar, para que este archivo funcione correctamente como API endpoint es necesario exportar una función manejador (handler) con los parámetros req y res. Si queremos tener acceso a los diferentes métodos HTTP en nuestro manejador podemos usar req.method dentro del mismo, por ejemplo:\nexport default function manejador(req, res) { switch (req.method) { case \u0026#34;GET\u0026#34;: // Nuestra lógica de código para el método GET... break; case \u0026#34;PATCH\u0026#34;: // Nuestra lógica de código para el método PATCH... break; case \u0026#34;DELETE\u0026#34;: // Nuestra lógica de código para el método DELETE... break; default: res.status(405).json({ mensaje: `El método HTTP ${req.method} no esta disponible en esta ruta`, }); break; } } Si ya estás familiarizado con Express.js probablemente encuentres muchas similitudes en cuanto a sintaxis.\nBlog Oficial de Next # link : https://nextjs.org/docs/api-routes/introduction\nRUD de comentarios para un blog # Rutas:\nCrear comentario: POST /api/comment Actualizar comentario: PATCH /api/comment/:id Eliminar comentario: DELETE /api/comment/:id Obtener un comentario: GET /api/comment/:id Obtener todos los comentarios: GET /api/comment/ video Api con Next. JS # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/11laravel/redux/","section":"Levels","summary":"Rutas API # Next.","title":"Rutas API"},{"content":"API con Laravel 3 # Crear una API con Laravel es una forma común de desarrollar aplicaciones web que se comunican con otras aplicaciones o servicios a través de endpoints de API. A continuación, se muestra una lección completa sobre cómo crear una API utilizando Laravel:\nPaso 1: Configurar un proyecto Laravel Comienza por configurar un nuevo proyecto Laravel utilizando el comando composer create-project. Abre una terminal y ejecuta el siguiente comando:\ncomposer create-project --prefer-dist laravel/laravel nombre-proyecto Esto creará un nuevo proyecto Laravel en un directorio llamado \u0026ldquo;nombre-proyecto\u0026rdquo;.\nPaso 2: Configurar la base de datos Accede al archivo .env en la raíz de tu proyecto y configura la conexión a la base de datos. Asegúrate de tener una base de datos creada y configurada correctamente en tu entorno de desarrollo.\nPaso 3: Crear migraciones y modelos Utiliza las migraciones de Laravel para crear la estructura de la base de datos. Puedes crear una migración ejecutando el siguiente comando en la terminal:\nphp artisan make:migration nombre_migracion --create=nombre_tabla Esto creará un archivo de migración en el directorio database/migrations. Abre el archivo de migración y define los campos de la tabla.\nUna vez que hayas creado las migraciones, ejecuta el siguiente comando para migrar las tablas a la base de datos:\nphp artisan migrate Después de crear las migraciones, crea los modelos correspondientes utilizando el comando make:model:\nphp artisan make:model NombreModelo Esto generará un archivo de modelo en el directorio app/Models.\nPaso 4: Crear rutas y controladores Define las rutas y los controladores para tu API. Abre el archivo routes/api.php y define las rutas de la API. Puedes utilizar los métodos Route::get(), Route::post(), Route::put(), Route::delete(), entre otros, para definir las diferentes rutas y los controladores que manejarán esas rutas.\nCrea un controlador utilizando el comando make:controller:\nphp artisan make:controller NombreControlador --api Esto generará un archivo de controlador en el directorio app/Http/Controllers.\nEn el controlador, define los métodos para manejar las diferentes operaciones CRUD (crear, leer, actualizar y eliminar) en tu API.\nPaso 5: Implementar la lógica de la API En los métodos del controlador, utiliza los modelos y los métodos proporcionados por Laravel para implementar la lógica de tu API. Por ejemplo, puedes utilizar el método create() del modelo para crear registros en la base de datos, o el método all() para obtener todos los registros.\nUtiliza las respuestas JSON de Laravel para devolver las respuestas de la API en formato JSON. Puedes hacerlo utilizando el método response()-\u0026gt;json().\nPaso 6: Proteger la API (opcional) Si deseas agregar autenticación a tu API, Laravel proporciona varias opciones, como Laravel Passport para autenticación basada en tokens o Laravel Sanctum para autenticación basada en tokens de sesión.\nPuedes seguir la documentación de Laravel Passport o Laravel Sanctum para configurar la autenticación en tu API.\nPaso 7: Probar la API Una vez que hayas configurado y desarrollado tu API, puedes\nVideo API con Laravel 1 # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/10laravel/webpack/","section":"Levels","summary":"API con Laravel 3 # Crear una API con Laravel es una forma común de desarrollar aplicaciones web que se comunican con otras aplicaciones o servicios a través de endpoints de API.","title":"API con Laravel"},{"content":"SSG vs SSR # Pre-renderizado # Next.js pre-renderiza cada página por defecto. Generando el HTML por adelantado en lugar de dejarle todo el trabajo al JavaScript del cliente. Esto se traduce en importantes mejoras de rendimiento y SEO. Cada HTML generado se asocia con un mínimo de código de JavaScript requerido para esa página. Cuando una página es cargada por el navegador, su código JavaScript se ejecuta y hace la página plenamente interactiva. Este proceso es llamado hidratación. Tipos de Pre-renderizado Existen dos formas de pre-renderizado en Next.js: Static Site Generation y Server-side Rendering. La diferencia principal radica en cuando se genera el HTML para la página. •\tSSG (Static Site Generation): El HTML se genera antes de cada petición, como al momento de crear la build. •\tSSR (Server-side Rendering): El HTML se genera en el servidor durante cada petición. Static Site Generation Si nuestra página no requiere datos de una fuente externa, Next.js se encargará de generarla de forma estática al crear la build. Por ejemplo:\nexport default function Perfil() { return \u0026lt;div\u0026gt;Perfil\u0026lt;/div\u0026gt;; } En cambio, si el contenido o rutas de la página dependen de una fuente externa, necesitaremos usar dos funciones especiales de Next.js: getStaticProps y getStaticPaths. Ejemplo 1: Digamos que tu página necesita una lista de posts publicados en tu blog desde un CMS. // TODO: Hacer fetch a los `posts` antes de que se pre-renderice la página export default function Blog({ posts }) { return ( \u0026lt;ul\u0026gt; {posts.map((post) =\u0026gt; ( \u0026lt;li key={post.id}\u0026gt;{post.titulo}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } En el mismo archivo tenemos que exportar la función asíncrona getStaticProps, esta función es llamada al momento de crear la build y te permite pasar los datos recopilados a la página en forma de props.\nexport async function getStaticProps() { // Hacer fetch al endpoint que contiene los `posts` const res = await fetch(\u0026#34;https://.../posts\u0026#34;); const posts = await res.json(); return { props: { posts } }; } export default function Blog({ posts }) { // Renderizar posts... } Ejemplo 2: Queremos pre-renderizar posts individuales usando rutas dinámicas. Empezamos creando un archivo con ruta dinámica llamado pages/posts/[id].js, este nos permitirá acceder a nuestros posts según su id, con enlaces como: /posts/1, /posts/2, etc.\nexport default function Post({ post }) { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{post.titulo}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{post.contenido}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } Podemos indicar a Next.js las rutas dinámicas que queremos pre-renderizar usando la función getStaticPaths.\nexport async function getStaticPaths() { // Hacer fetch al endpoint que contiene los `posts` const res = await fetch(\u0026#34;https://.../posts\u0026#34;); const posts = await res.json(); // Obtener rutas a pre-renderizar basado en el `id` de los posts const rutas = posts.map((post) =\u0026gt; `/posts/${post.id}`); return { paths: rutas, fallback: false }; } Nota: { fallback: false } hace que las rutas no incluidas devuelvan una página 404. Finalmente, utilizamos getStaticProps para conseguir los datos del post según el id proporcionado en el objeto params.\nexport async function getStaticPaths() { // ... } export async function getStaticProps({ params }) { // params contiene el `id` del post. const res = await fetch(`https://.../posts/${params.id}`); const post = await res.json(); // Pasar datos del post hacia la página en forma de props return { props: { post } }; } export default function Post({ post }) { // Renderizar post... } Server-side Rendering # Muchas veces los datos de nuestra página deben ser constantemente actualizados o tal vez necesitemos interactuar con una API haciendo consultas variadas y complejas. Para casos como estos, Next.js nos permite usar Server-side Rendering (SSR) en nuestras aplicaciones de React. Cuando una página utiliza Server-side rendering, el HTML de la misma se genera en el servidor durante cada petición. Para ello, necesitamos exportar la función asíncrona getServerSideProps, la cual recopila los datos y los pasa a la página. // Esta función es llamada durante cada petición\nexport async function getServerSideProps() { // Recopilar datos desde una API externa const res = await fetch(`https://.../datos`); const datos = await res.json(); // Pasar datos hacia la pagina en forma de props return { props: { datos } }; } export default function Pagina({ datos }) { // Renderizar datos... } Como puedes observar, getServerSideProps y getStaticProp cuentan con una sintaxis y funcionamiento similar, pero se diferencian principalmente por el momento en que son ejecutadas.\nServer Side Render vs. Static Site Generation # Link de Blog : https://leonidasesteban.com/blog/ssg\nVideo SSG vs SSR # ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia10/webpack/","section":"Levels","summary":"SSG vs SSR # Pre-renderizado # Next.","title":"SSG vs SSR"},{"content":"SSG vs SSR # Pre-renderizado # Next.js pre-renderiza cada página por defecto. Generando el HTML por adelantado en lugar de dejarle todo el trabajo al JavaScript del cliente. Esto se traduce en importantes mejoras de rendimiento y SEO. Cada HTML generado se asocia con un mínimo de código de JavaScript requerido para esa página. Cuando una página es cargada por el navegador, su código JavaScript se ejecuta y hace la página plenamente interactiva. Este proceso es llamado hidratación. Tipos de Pre-renderizado Existen dos formas de pre-renderizado en Next.js: Static Site Generation y Server-side Rendering. La diferencia principal radica en cuando se genera el HTML para la página. •\tSSG (Static Site Generation): El HTML se genera antes de cada petición, como al momento de crear la build. •\tSSR (Server-side Rendering): El HTML se genera en el servidor durante cada petición. Static Site Generation Si nuestra página no requiere datos de una fuente externa, Next.js se encargará de generarla de forma estática al crear la build. Por ejemplo:\nexport default function Perfil() { return \u0026lt;div\u0026gt;Perfil\u0026lt;/div\u0026gt;; } En cambio, si el contenido o rutas de la página dependen de una fuente externa, necesitaremos usar dos funciones especiales de Next.js: getStaticProps y getStaticPaths. Ejemplo 1: Digamos que tu página necesita una lista de posts publicados en tu blog desde un CMS. // TODO: Hacer fetch a los `posts` antes de que se pre-renderice la página export default function Blog({ posts }) { return ( \u0026lt;ul\u0026gt; {posts.map((post) =\u0026gt; ( \u0026lt;li key={post.id}\u0026gt;{post.titulo}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } En el mismo archivo tenemos que exportar la función asíncrona getStaticProps, esta función es llamada al momento de crear la build y te permite pasar los datos recopilados a la página en forma de props.\nexport async function getStaticProps() { // Hacer fetch al endpoint que contiene los `posts` const res = await fetch(\u0026#34;https://.../posts\u0026#34;); const posts = await res.json(); return { props: { posts } }; } export default function Blog({ posts }) { // Renderizar posts... } Ejemplo 2: Queremos pre-renderizar posts individuales usando rutas dinámicas. Empezamos creando un archivo con ruta dinámica llamado pages/posts/[id].js, este nos permitirá acceder a nuestros posts según su id, con enlaces como: /posts/1, /posts/2, etc.\nexport default function Post({ post }) { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{post.titulo}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{post.contenido}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } Podemos indicar a Next.js las rutas dinámicas que queremos pre-renderizar usando la función getStaticPaths.\nexport async function getStaticPaths() { // Hacer fetch al endpoint que contiene los `posts` const res = await fetch(\u0026#34;https://.../posts\u0026#34;); const posts = await res.json(); // Obtener rutas a pre-renderizar basado en el `id` de los posts const rutas = posts.map((post) =\u0026gt; `/posts/${post.id}`); return { paths: rutas, fallback: false }; } Nota: { fallback: false } hace que las rutas no incluidas devuelvan una página 404. Finalmente, utilizamos getStaticProps para conseguir los datos del post según el id proporcionado en el objeto params.\nexport async function getStaticPaths() { // ... } export async function getStaticProps({ params }) { // params contiene el `id` del post. const res = await fetch(`https://.../posts/${params.id}`); const post = await res.json(); // Pasar datos del post hacia la página en forma de props return { props: { post } }; } export default function Post({ post }) { // Renderizar post... } Server-side Rendering # Muchas veces los datos de nuestra página deben ser constantemente actualizados o tal vez necesitemos interactuar con una API haciendo consultas variadas y complejas. Para casos como estos, Next.js nos permite usar Server-side Rendering (SSR) en nuestras aplicaciones de React. Cuando una página utiliza Server-side rendering, el HTML de la misma se genera en el servidor durante cada petición. Para ello, necesitamos exportar la función asíncrona getServerSideProps, la cual recopila los datos y los pasa a la página. // Esta función es llamada durante cada petición\nexport async function getServerSideProps() { // Recopilar datos desde una API externa const res = await fetch(`https://.../datos`); const datos = await res.json(); // Pasar datos hacia la pagina en forma de props return { props: { datos } }; } export default function Pagina({ datos }) { // Renderizar datos... } Como puedes observar, getServerSideProps y getStaticProp cuentan con una sintaxis y funcionamiento similar, pero se diferencian principalmente por el momento en que son ejecutadas.\nServer Side Render vs. Static Site Generation # Link de Blog : https://leonidasesteban.com/blog/ssg\nVideo SSG vs SSR # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/10laravel/webpack/","section":"Levels","summary":"SSG vs SSR # Pre-renderizado # Next.","title":"SSG vs SSR"},{"content":"CSS en Next.js # Existen muchas formas de darle estilo a tu aplicación en Next.js, puedes importar archivos de hojas de estilo directamente gracias a la compatibilidad con los Módulos de CSS. Para ello el archivo debe nombrarse de la siguiente manera: [nombre].module.css. Los Módulos de CSS mantienen un ámbito local creando clases únicas automáticamente, por lo que te permite usar los mismos nombres de clases en diferentes archivos sin que tengas que preocuparte por colisiones. Por ejemplo, para crear un componente botón reusable, primero creamos componentes/Boton.module.css con el siguiente contenido:\n.peligro { color: white; background-color: red; } componentes/Boton.module.css # Y un archivo componentes/Boton.js donde importar y usar el módulo CSS antes creado.\nimport estilos from \u0026#34;./Boton.module.css\u0026#34;; export default function Boton() { return ( \u0026lt;button type=\u0026#34;button\u0026#34; className={estilos.peligro}\u0026gt; Borrar \u0026lt;/button\u0026gt; ); } componentes/Boton.js # Nota: La clase peligro es una propiedad del objeto estilos importado. Así de fácil es usar los Módulos de CSS en Next.js, recuerda que también tenemos más opciones de estilo a nuestra disposición, tales como Sass, Less o CSS en JavaScript. Recursos estáticos La carpeta public es utilizada en Next.js para servir todos nuestros recursos estáticos (imágenes, iconos, robots, entre otros). Puedes importar archivos dentro de la carpeta public usando (/) como URL base. Por ejemplo, para acceder a una imagen guardada en public/hero.jpg escribimos un código como el siguiente:\nexport default function Home() { return ( \u0026lt;div\u0026gt; \u0026lt;img src=\u0026#34;/hero.jpg\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } pages/index.js Nota: No cambies el nombre de la carpeta public por ningún otro, es la única que puede servir recursos estáticos.\nvideo CCS CON NEXT # Creando sitios estáticos con Next.js # Next.js nos permite crear aplicaciones de React fácilmente con server render y sin configuración. En su versión 3 (actualmente beta) incluyen una nueva característica y es poder crear sitios estáticos.\n¿Qué es un sitio estático? Básicamente poder generar archivos .html en disco y que podamos luego llevar a producción fácilmente con Github Pages, Surge, Now, AWS S3, etc. Una ventaja de los sitios estáticos es que al ser un simple archivo en disco entrar a una página es super rápido, a comparación de un sitio dinámico que requiere hacer peticiones a un API o a una BD y luego generar el HTML dinámicamente con los datos obtenidos y a diferencia de una típica SPA no enviamos un HTML vacío, si no que el HTML que tenemos en disco ya tiene el contenido que necesitamos. Iniciando el proyecto\nComo siempre, vamos a iniciar nuestro proyecto y obtener un package.json ya sea que usen npm o yarn.\nnpm init --yes # o con yarn yarn init --yes Instalando dependencias # Luego vamos a instalar las dependencias de nuestro proyecto, para eso vamos a correr uno de estos scripts.\nnpm i next@beta react react-dom # o con yarn yarn add next@beta react react-dom Estamos usando una versión beta por lo que algunas cosas se pueden romper: si eso ocurre traten con otra versión beta inferior para ver si se arregla. Recuerden, usen las beta en producción bajo su propio riesgo.\nInstalar dependencias # Una vez hecho esto vamos a crear la página de Next.js que vamos a exportar en nuestra aplicación. Para eso vamos a crear un archivo pages/index.js con este código.\nimport { Component } from \u0026#39;react\u0026#39; import Head from \u0026#39;next/head\u0026#39; export default class extends Component { static async getInitialProps({ query }) { // vamos a cambiar el título dinámicamente dependiendo de un dato en la query return { title: query.title || \u0026#39;home page\u0026#39; } } render() { return ( \u0026lt;main\u0026gt; \u0026lt;Head\u0026gt; \u0026lt;title\u0026gt;{this.props.title}\u0026lt;/title\u0026gt; \u0026lt;/Head\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{this.props.title}\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt; Esta es nuestra página, el contenido es siempre el mismo, pero el título cambia. \u0026lt;/p\u0026gt; \u0026lt;/main\u0026gt; ) } } Esa es nuestra página. Como vemos vamos a obtener el title desde el querystring de la URL y vamos a modificar el título de la página tanto en la etiqueta como en la etiqueta \u003ch1 /\u003e con el valor de este. Por defecto mostramos el título home page si no está definido.\n\u003ch1 id=\"iniciar-servidor-en-desarrollo\" class=\"relative group\"\u003eIniciar servidor en desarrollo \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#iniciar-servidor-en-desarrollo\" aria-label=\"Ancla\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e \u003cp\u003eVamos ahora a probar que esto funcione en desarrollo, para eso simplemente vamos a definir estos scripts en el package.json.\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;dev\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;next\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;build\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;next build\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;start\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;next start\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLuego vamos a inicar nuestra aplicación con el siguiente script:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003enpm\u003c/span\u003e \u003cspan class=\"nx\"\u003erun\u003c/span\u003e \u003cspan class=\"nx\"\u003edev\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e#\u003c/span\u003e \u003cspan class=\"nx\"\u003eo\u003c/span\u003e \u003cspan class=\"nx\"\u003econ\u003c/span\u003e \u003cspan class=\"nx\"\u003eyarn\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eyarn\u003c/span\u003e \u003cspan class=\"nx\"\u003edev\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEso nos va a correr un servidor HTTP en el puerto 3000, si entramos entonces a localhost:3000 nos debe mostrar la pagina.\n\u003ch1 id=\"video-de-sitios-estaticos\" class=\"relative group\"\u003evideo de Sitios Estaticos \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#video-de-sitios-estaticos\" aria-label=\"Ancla\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia09/librerias/","section":"Levels","summary":"CSS en Next.","title":"CSS en Next.js y Recursos Estaticos"},{"content":"CSS en Next.js # Existen muchas formas de darle estilo a tu aplicación en Next.js, puedes importar archivos de hojas de estilo directamente gracias a la compatibilidad con los Módulos de CSS. Para ello el archivo debe nombrarse de la siguiente manera: [nombre].module.css. Los Módulos de CSS mantienen un ámbito local creando clases únicas automáticamente, por lo que te permite usar los mismos nombres de clases en diferentes archivos sin que tengas que preocuparte por colisiones. Por ejemplo, para crear un componente botón reusable, primero creamos componentes/Boton.module.css con el siguiente contenido:\n.peligro { color: white; background-color: red; } componentes/Boton.module.css # Y un archivo componentes/Boton.js donde importar y usar el módulo CSS antes creado.\nimport estilos from \u0026#34;./Boton.module.css\u0026#34;; export default function Boton() { return ( \u0026lt;button type=\u0026#34;button\u0026#34; className={estilos.peligro}\u0026gt; Borrar \u0026lt;/button\u0026gt; ); } componentes/Boton.js # Nota: La clase peligro es una propiedad del objeto estilos importado. Así de fácil es usar los Módulos de CSS en Next.js, recuerda que también tenemos más opciones de estilo a nuestra disposición, tales como Sass, Less o CSS en JavaScript. Recursos estáticos La carpeta public es utilizada en Next.js para servir todos nuestros recursos estáticos (imágenes, iconos, robots, entre otros). Puedes importar archivos dentro de la carpeta public usando (/) como URL base. Por ejemplo, para acceder a una imagen guardada en public/hero.jpg escribimos un código como el siguiente:\nexport default function Home() { return ( \u0026lt;div\u0026gt; \u0026lt;img src=\u0026#34;/hero.jpg\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } pages/index.js Nota: No cambies el nombre de la carpeta public por ningún otro, es la única que puede servir recursos estáticos.\nvideo CCS CON NEXT # Creando sitios estáticos con Next.js # Next.js nos permite crear aplicaciones de React fácilmente con server render y sin configuración. En su versión 3 (actualmente beta) incluyen una nueva característica y es poder crear sitios estáticos.\n¿Qué es un sitio estático? Básicamente poder generar archivos .html en disco y que podamos luego llevar a producción fácilmente con Github Pages, Surge, Now, AWS S3, etc. Una ventaja de los sitios estáticos es que al ser un simple archivo en disco entrar a una página es super rápido, a comparación de un sitio dinámico que requiere hacer peticiones a un API o a una BD y luego generar el HTML dinámicamente con los datos obtenidos y a diferencia de una típica SPA no enviamos un HTML vacío, si no que el HTML que tenemos en disco ya tiene el contenido que necesitamos. Iniciando el proyecto\nComo siempre, vamos a iniciar nuestro proyecto y obtener un package.json ya sea que usen npm o yarn.\nnpm init --yes # o con yarn yarn init --yes Instalando dependencias # Luego vamos a instalar las dependencias de nuestro proyecto, para eso vamos a correr uno de estos scripts.\nnpm i next@beta react react-dom # o con yarn yarn add next@beta react react-dom Estamos usando una versión beta por lo que algunas cosas se pueden romper: si eso ocurre traten con otra versión beta inferior para ver si se arregla. Recuerden, usen las beta en producción bajo su propio riesgo.\nInstalar dependencias # Una vez hecho esto vamos a crear la página de Next.js que vamos a exportar en nuestra aplicación. Para eso vamos a crear un archivo pages/index.js con este código.\nimport { Component } from \u0026#39;react\u0026#39; import Head from \u0026#39;next/head\u0026#39; export default class extends Component { static async getInitialProps({ query }) { // vamos a cambiar el título dinámicamente dependiendo de un dato en la query return { title: query.title || \u0026#39;home page\u0026#39; } } render() { return ( \u0026lt;main\u0026gt; \u0026lt;Head\u0026gt; \u0026lt;title\u0026gt;{this.props.title}\u0026lt;/title\u0026gt; \u0026lt;/Head\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{this.props.title}\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt; Esta es nuestra página, el contenido es siempre el mismo, pero el título cambia. \u0026lt;/p\u0026gt; \u0026lt;/main\u0026gt; ) } } Esa es nuestra página. Como vemos vamos a obtener el title desde el querystring de la URL y vamos a modificar el título de la página tanto en la etiqueta como en la etiqueta \u003ch1 /\u003e con el valor de este. Por defecto mostramos el título home page si no está definido.\n\u003ch1 id=\"iniciar-servidor-en-desarrollo\" class=\"relative group\"\u003eIniciar servidor en desarrollo \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#iniciar-servidor-en-desarrollo\" aria-label=\"Ancla\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e \u003cp\u003eVamos ahora a probar que esto funcione en desarrollo, para eso simplemente vamos a definir estos scripts en el package.json.\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;dev\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;next\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;build\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;next build\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s2\"\u003e\u0026#34;start\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;next start\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLuego vamos a inicar nuestra aplicación con el siguiente script:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003enpm\u003c/span\u003e \u003cspan class=\"nx\"\u003erun\u003c/span\u003e \u003cspan class=\"nx\"\u003edev\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e#\u003c/span\u003e \u003cspan class=\"nx\"\u003eo\u003c/span\u003e \u003cspan class=\"nx\"\u003econ\u003c/span\u003e \u003cspan class=\"nx\"\u003eyarn\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eyarn\u003c/span\u003e \u003cspan class=\"nx\"\u003edev\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEso nos va a correr un servidor HTTP en el puerto 3000, si entramos entonces a localhost:3000 nos debe mostrar la pagina.\n\u003ch1 id=\"video-de-sitios-estaticos\" class=\"relative group\"\u003evideo de Sitios Estaticos \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#video-de-sitios-estaticos\" aria-label=\"Ancla\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/09laravel/librerias/","section":"Levels","summary":"CSS en Next.","title":"CSS en Next.js y Recursos Estaticos"},{"content":"NavLinks Laravel 2 # En Laravel, los enlaces de navegación, o \u0026ldquo;NavLinks\u0026rdquo;, se utilizan para generar enlaces HTML de manera conveniente en tus vistas. Estos enlaces se utilizan típicamente para crear la navegación de tu aplicación, permitiendo a los usuarios moverse entre diferentes páginas.\nLaravel proporciona una forma sencilla de generar NavLinks utilizando el helper route(). El helper route() toma el nombre de la ruta como argumento y genera automáticamente el enlace correspondiente basado en la configuración de rutas de tu aplicación.\nAquí tienes un ejemplo de cómo generar un NavLink en Laravel:\n\u0026lt;a href=\u0026#34;{{ route(\u0026#39;nombre.ruta\u0026#39;) }}\u0026#34;\u0026gt;Texto del enlace\u0026lt;/a\u0026gt; Reemplaza 'nombre.ruta' con el nombre de la ruta que deseas enlazar y 'Texto del enlace' con el texto que quieres mostrar en el enlace.\nAdemás de utilizar el helper route(), Laravel también proporciona el helper url() que puedes utilizar para generar enlaces absolutos en lugar de enlaces basados en rutas. Aquí tienes un ejemplo:\n\u0026lt;a href=\u0026#34;{{ url(\u0026#39;/ruta\u0026#39;) }}\u0026#34;\u0026gt;Texto del enlace\u0026lt;/a\u0026gt; Reemplaza '/ruta' con la URL específica a la que deseas enlazar.\nAdemás de los helpers route() y url(), también puedes utilizar los métodos route() y url() de la instancia del objeto Illuminate\\Routing\\UrlGenerator para generar enlaces en tus controladores u otros lugares de tu aplicación.\nAquí tienes un ejemplo de cómo utilizar el método route() en un controlador:\npublic function index() { $enlace = app(\u0026#39;url\u0026#39;)-\u0026gt;route(\u0026#39;nombre.ruta\u0026#39;); // ... } Reemplaza 'nombre.ruta' con el nombre de la ruta correspondiente.\nRecuerda que para que los enlaces funcionen correctamente, debes asegurarte de haber definido las rutas correspondientes en el archivo routes/web.php o en otro archivo de rutas de tu aplicación.\nCon estos conceptos básicos, puedes utilizar los NavLinks de Laravel para crear fácilmente la navegación en tu aplicación y enlazar a diferentes rutas o URLs.\nVideo Navlinks # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/09laravel/librerias/","section":"Levels","summary":"NavLinks Laravel 2 # En Laravel, los enlaces de navegación, o \u0026ldquo;NavLinks\u0026rdquo;, se utilizan para generar enlaces HTML de manera conveniente en tus vistas.","title":"NavLinks Laravel"},{"content":"Enlazando páginas laravel # Enlazando páginas laravel # Laravel MiMiddleware # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/08laravel/git/","section":"Levels","summary":"Enlazando páginas laravel # Enlazando páginas laravel # Laravel MiMiddleware # ","title":""},{"content":"Enlazando páginas # Para obtener una navegación fluida entre las páginas de nuestra aplicación, necesitamos importar el componente Link y usarlo de la siguiente manera:\nimport Link from \u0026#34;next/link\u0026#34;; export default function Home() { return ( \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;Link href=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;a\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;/Link\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;Link href=\u0026#34;/perfil\u0026#34;\u0026gt; \u0026lt;a\u0026gt;Mi perfil\u0026lt;/a\u0026gt; \u0026lt;/Link\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;Link href=\u0026#34;/blog/post/hola-mundo\u0026#34;\u0026gt; \u0026lt;a\u0026gt;Post\u0026lt;/a\u0026gt; \u0026lt;/Link\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ); } pages/index.js En el ejemplo anterior podemos observar que hay múltiples enlaces, cada uno cuenta con un componente Link que recibe una propiedad href indicando la ruta a la que dirige. Link envuelve un elemento Anchor a que contiene el texto de nuestro enlace. Enlazando Rutas Dinámicas También puedes utilizar interpolación para crear la ruta, lo que resulta útil para los segmentos de ruta dinámicos. Por ejemplo, para mostrar una lista de posts que se han pasado al componente como propiedad: import Link from \u0026ldquo;next/link\u0026rdquo;;\nexport default function Posts({ posts }) { return ( \u0026lt;ul\u0026gt; {posts.map((post) =\u0026gt; ( \u0026lt;li key={post.id}\u0026gt; \u0026lt;Link href={`/blog/post/${post.id}`}\u0026gt; \u0026lt;a\u0026gt;{post.titulo}\u0026lt;/a\u0026gt; \u0026lt;/Link\u0026gt; \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } O usando un objeto URL: import Link from \u0026ldquo;next/link\u0026rdquo;;\nexport default function Posts({ posts }) { return ( \u0026lt;ul\u0026gt; {posts.map((post) =\u0026gt; ( \u0026lt;li key={post.id}\u0026gt; \u0026lt;Link href={{ pathname: \u0026#34;/blog/post/[id]\u0026#34;, query: { id: post.id }, }} \u0026gt; \u0026lt;a\u0026gt;{post.titulo}\u0026lt;/a\u0026gt; \u0026lt;/Link\u0026gt; \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } Como puedes observar, en el código anterior utilizamos el hook useRouter de Next.js para acceder al objeto router, dicho objeto contiene propiedades muy útiles, las partes dinámicas de cada ruta se almacenan en router.query Como se mencionó anteriormente, Next.js utiliza un enfoque basado en páginas para crear rutas. Concretamente, esto significa que en cada proyecto de Next.js existe una pagescarpeta. Dentro de esta carpeta especial, cada archivo y carpeta constituye una nueva ruta. En la pagescarpeta, la primera ruta raíz es index.js, que representa la página de inicio en la /URL. También puede nombrar su archivo y crear una ruta estática (es decir, about.jspara la /aboutruta). De manera similar, las carpetas también se pueden usar para crear rutas anidadas. Por ejemplo,\ncrear una carpeta con un nombre supporty un archivo dentro faq.jscreará la ruta /support/faq. Aquí hay un diagrama para ilustrar mejor esto: Las rutas dinámicas también son compatibles. Al poner corchetes en el nombre de su archivo o carpeta, puede crear una ruta dinámica. Por ejemplo, /blog/[article-id].jsadmitirá múltiples rutas como\n/blog/1, /blog/nextjs-dynamic-routing, etc. Limitaciones del enrutador Next.js # Desafortunadamente, este enfoque tiene una limitación importante. Es decir, a pesar de que las rutas anidadas comparten una ruta principal, no puede compartir el estado o el diseño entre ellas. Por ejemplo, tome la autenticación. En React, utilizando la biblioteca de enrutador de reacción , puede crear rutas personalizadas. Por ejemplo, podría crear una ruta protegida para verificar si el usuario ha iniciado sesión. Si el usuario no ha iniciado sesión, la ruta lo redirigirá, por ejemplo, a la página de inicio de sesión o registro. Luego, puede asignar esta ruta protegida a cualquier ruta /authenticationen su enrutador. Al hacer esto, las rutas anidadas no tienen que preocuparse por la autenticación, ya que la ruta principal se encargará de ello. Desafortunadamente, este escenario no es posible con Next.js. Puede crear un componente de ruta personalizado, pero tendrá que ajustarlo alrededor de cada página protegida individualmente. El mismo problema se aplica a los diseños. Si su aplicación tiene un tablero, varias páginas compartirán un diseño similar (navegación, pie de página, etc.). Tal como está, la única forma de aplicar un diseño a varias páginas a la vez es hacerlo en el nivel de la aplicación. Este diseño se aplicaría a toda su aplicación. Desafortunadamente, si tiene varios diseños, debe definirlos por página.\nCambios en el enrutador Next.js # Sabiendo todo esto, el equipo de Vercel decidió corregir estas limitaciones. Cambios en la creación de rutas Para empezar, de manera similar a la pagescarpeta, habrá una nueva carpeta llamada app. Esto es para proporcionar compatibilidad con versiones anteriores y permitir que los desarrolladores migren lentamente al nuevo enrutador. Entonces, la estructura de carpetas seguirá determinando nuevas rutas. Esto significa que una dashboardcarpeta dentro appestaría vinculada a las /dashboardrutas. Sin embargo, donde se pone interesante son los archivos dentro de esas rutas. El enrutador anterior asumía que cada archivo dentro de /pagesera una nueva ruta. Esto, por cierto, hizo que los desarrolladores separaran sus componentes React de páginas y no páginas (es decir, Navbar, Header, Footer). Poner un archivo como Navbar.jscon la página de inicio, también conocido como /pages/index.js, habría hecho que el enrutador creyera que Navbares una nueva ruta y no un simple componente secundario. Como resultado, muchos desarrolladores tuvieron que crear una componentscarpeta y separar sus diferentes componentes. Sin embargo, el nuevo enrutador asume que cada archivo NO es una ruta a menos que se indique explícitamente. Para crear una nueva ruta, por lo tanto, debe crear una page.jsdentro de la carpeta. Por lo tanto, nuestro ejemplo de proyecto anterior se vería así con el nuevo enrutador: Las rutas dinámicas también son compatibles. Con este nuevo formato, para tener una /blog/[article-id]URL por ejemplo, necesitarías una /app/blog/[article-id]/page.jsestructura de carpetas. En resumen, aquí hay una estructura de carpetas y sus rutas correspondientes: /app/blog/[article-id]/page.js→/blog/[article-id] /app/blog/[category-id]/page.js→/blog/[category-id] /app/blog/[category-id]/[article-id]/page.js→/blog/[category-id]/[article-id] Diseños anidados Los diseños también recibieron una actualización. Anteriormente, podía crear diseños en un archivo separado y luego importar el diseño a su página. Por ejemplo, aquí hay una página de tablero:\nimport DashboardLayout from '../components/DashboardLayout' export default function DashboardPage() { /* The content for your dashboard page */ } DashboardPage.getLayout = function getLayout(page) { return ( \u0026lt;DashboardLayout\u0026gt; {page} \u0026lt;/DashboardLayout\u0026gt; ) } Puede importar varios diseños a su página si necesita anidarlos. Sin embargo, dado que esto se hace por página, cada página anidada en su tablero tendría que importar los diseños y anidarlos. ¡Afortunadamente, esto está cambiando! Con el nuevo enrutador, podrá especificar un diseño para la página de su tablero y cualquier página anidada recibirá automáticamente este diseño. Todo lo que tiene que hacer es crear un layout.jsarchivo en la carpeta para que este diseño se aplique a todas las rutas en esta carpeta.\nMás concretamente, aquí hay un ejemplo: # En este ejemplo, layout.jsse creó un archivo en el nivel raíz, también conocido como en la appcarpeta. Este diseño se aplica automáticamente a cualquier ruta en la aplicación. Esta aplicación también tiene dos secciones: tablero y soporte. Dado que cada uno de estos posee su estilo, layout.jsse crea un archivo para aplicar el estilo específico para sus rutas. Además del diseño raíz, esto significa que cualquier ruta debajo /dashboardrecibirá el diseño de la aplicación y el del tablero. Como resultado, ya no tiene que especificar qué diseño usa, ya que los archivos pages.jslo hacen automáticamente .layout.js A diferencia del enrutador actual de Next.js, que solo le permitía obtener datos a nivel de página, también podrá obtener datos de los diseños. Podrá usar getStaticPropsy getServerPropsrecuperar datos y construir su diseño. Como resultado, sus /dashboardpáginas podrán obtener datos de múltiples componentes (el diseño de la aplicación, el diseño del tablero y la página misma).\nCómo crear un HOC (componente de orden superior) que puede redirigir condicionalmente a un usuario en función de su estado de inicio o cierre de sesión. En Next.js, de forma predeterminada, todas sus rutas se tratan de la misma manera. Si bien su aplicación específica puede incluir páginas o rutas que están destinadas solo para usuarios que iniciaron sesión, Next.js no proporciona una forma de aislar estas páginas en función del estado de autenticación de un usuario.\nEsto es de esperar ya que Next.js está diseñado para manejar un conjunto de tareas simple y bien definido. Si bien se puede usar como front-end para una aplicación, como en el repetitivo Next.js de CheatCode, tradicionalmente se usa para generar sitios de marketing estáticos o sitios respaldados por un CMS sin cabeza. Afortunadamente, resolver este problema no es demasiado complejo. Para solucionarlo, vamos a implementar dos componentes: authenticatedRouteque será una función que devuelve un componente React envuelto con una verificación condicional del estado de autenticación del usuario y una redirección si un usuario no está disponible. publicRouteque será una función que devuelve un componente React envuelto con una verificación condicional para el estado de autenticación del usuario y una redirección si un usuario está presente. Implementación de un componente de ruta autenticado Primero, construyamos el esqueleto de nuestro HOC y discutamos cómo va a funcionar:\n/components/AuthenticatedRoute/index.js import React from \u0026#34;react\u0026#34;; const authenticatedRoute = (Component = null, options = {}) =\u0026gt; { // We\u0026#39;ll handle wrapping the component here. }; export default authenticatedRoute; Aquí, exportamos una función simple de JavaScript que toma dos argumentos: React Componentcomo el primer argumento y un objeto de optionscomo el segundo. representa el Componentcomponente de la página protegida que queremos representar condicionalmente. Cuando vayamos a poner esto en uso, haremos algo como esto:\n/pages/\u0026lt;algunapágina\u0026gt;/index.js import authenticatedRoute from \u0026#39;../../components/AuthenticatedRoute\u0026#39;; const MyComponent = () =\u0026gt; { [...] }; export default authenticatedRoute(MyComponent, { pathAfterFailure: \u0026#39;/login\u0026#39; }) En el futuro, completemos nuestro HOC con el componente contenedor principal: /components/AuthenticatedRoute/index.js import React from \u0026#34;react\u0026#34;; const authenticatedRoute = (Component = null, options = {}) =\u0026gt; { class AuthenticatedRoute extends React.Component { state = { loading: true, }; render() { const { loading } = this.state; if (loading) { return \u0026lt;div /\u0026gt;; } return \u0026lt;Component {...this.props} /\u0026gt;; } } return AuthenticatedRoute; }; export default authenticatedRoute; Aquí, hemos llenado authenticatedRouteel cuerpo de nuestra función con un componente React basado en clases. La idea aquí es que queremos utilizar el estado y, a continuación, la componentDidMountfunción de la clase para que podamos decidir si queremos representar el pasado Componento redirigir al usuario fuera de él.\n/components/AuthenticatedRoute/index.js import React from \u0026#34;react\u0026#34;; import Router from \u0026#34;next/router\u0026#34;; const authenticatedRoute = (Component = null, options = {}) =\u0026gt; { class AuthenticatedRoute extends React.Component { state = { loading: true, }; componentDidMount() { if (this.props.isLoggedIn) { this.setState({ loading: false }); } else { Router.push(options.pathAfterFailure || \u0026#34;/login\u0026#34;); } } render() { const { loading } = this.state; if (loading) { return \u0026lt;div /\u0026gt;; } return \u0026lt;Component {...this.props} /\u0026gt;; } } return AuthenticatedRoute; }; export default authenticatedRoute; Ahora, con nuestro componentDidMountagregado, podemos ver implementado nuestro comportamiento principal. En el interior, todo lo que queremos saber es \u0026ldquo;¿hay un usuario conectado o no?\u0026rdquo; Si hay un usuario conectado, queremos decir \u0026ldquo;adelante y renderice el pasado Component\u0026rdquo;. Podemos ver que esto tiene lugar en el render()método del AuthenticatedRoutecomponente. Aquí, estamos diciendo, siempre que loadingsea true, simplemente devuelva un vacío (o no muestre nada al usuario). Si no estamos cargando, simplemente ejecute la returndeclaración en la parte inferior del archivo render(). Lo que esto logra es decir \u0026ldquo;hasta que sepamos que tenemos un usuario conectado, no mostrar nada, y si tenemos un usuario conectado, mostrarles la página a la que intentan acceder\u0026rdquo;. De vuelta en componentDidMount()la elsedeclaración, decimos \u0026ldquo;bien, no parece que el usuario haya iniciado sesión, así que vamos a redirigirlo\u0026rdquo;. Para hacer la redirección en este ejemplo, estamos usando el enrutador integrado Next.js para hacer la redirección por nosotros, pero puede usar cualquier enrutador JavaScript o React que desee (por ejemplo, si estuviéramos usando React Router, haría this.props.history.push(options.pathAfterFailure || \u0026lsquo;/login\u0026rsquo;)_ ¿Tener sentido? Entonces, si tenemos un usuario, muéstrale el componente. Si no tenemos un usuario, redirigirlo a otra ruta. Determinar el estado de inicio de sesión Ahora, técnicamente hablando, esto es todo lo que tenemos que hacer. Pero es posible que se pregunte \u0026ldquo;¿cómo sabemos si el usuario ha iniciado sesión?\u0026rdquo; Aquí es donde entra en juego su propia aplicación. En este ejemplo, estamos usando CheatCode Next.js Boilerplate que depende de que un usuario autenticado (si está disponible) esté presente en una tienda Redux global. Para hacer todo esto un poco más concreto, echemos un vistazo a esa configuración ahora:\n/components/AuthenticatedRoute/index.js import React from \u0026#34;react\u0026#34;; import Router from \u0026#34;next/router\u0026#34;; import { connect } from \u0026#34;react-redux\u0026#34;; const authenticatedRoute = (Component = null, options = {}) =\u0026gt; { class AuthenticatedRoute extends React.Component { state = { loading: true, }; componentDidMount() { if (this.props.isLoggedIn) { this.setState({ loading: false }); } else { Router.push(options.pathAfterFailure || \u0026#34;/login\u0026#34;); } } render() { const { loading } = this.state; if (loading) { return \u0026lt;div /\u0026gt;; } return \u0026lt;Component {...this.props} /\u0026gt;; } } return connect((state) =\u0026gt; ({ isLoggedIn: state?.authenticated \u0026amp;\u0026amp; !!state?.user, }))(AuthenticatedRoute); }; export default authenticatedRoute; El gran cambio que hemos hecho aquí es importar el connect()método del react-reduxpaquete (ya instalado en el repetitivo) y luego llamar a esa función, pasándole una mapStateToPropsfunción y luego envolviéndola alrededor de nuestro componente. Para ser claros, esta parte:\n/components/AuthenticatedRoute/index.js return connect((state) =\u0026gt; ({ isLoggedIn: state?.authenticated \u0026amp;\u0026amp; !!state?.user, }))(AuthenticatedRoute); Aquí, la función que pasamos como primer argumento connect()es la mapStateToPropsfunción (como se nombra en la react-reduxdocumentación). Esta función toma en cuenta el estado global actual de la aplicación proporcionada por el código modelo de /pages/_app.jsCheatCode Next.js. Al usar ese estado, como su nombre lo indica, asigna ese estado a un componente de React que se transmitirá a nuestro componente definido justo encima. Si miramos de cerca, aquí, estamos configurando un accesorio llamado isLoggedIn, verificando si el authenticatedvalor en nuestro estado es truey si tenemos o no un userobjeto en estado. si lo hacemos? ¡El usuario ha iniciado sesión! Si no, isLoggedInes falso. Si mira hacia atrás en la componentDidMount()función, aquí es donde estamos poniendo isLoggedInen uso el nuevo accesorio.\nUso de otras fuentes de autenticación Si no está utilizando CheatCode Next.js Boilerplate, la forma en que llega al estado autenticado de su usuario depende de su aplicación. Un ejemplo rápido y sucio de usar otra API se vería así:\nimport React from \u0026#34;react\u0026#34;; import Router from \u0026#34;next/router\u0026#34;; import { connect } from \u0026#34;react-redux\u0026#34;; import { myAuthenticationAPI } from \u0026#39;my-authentication-api\u0026#39;; const authenticatedRoute = (Component = null, options = {}) =\u0026gt; { class AuthenticatedRoute extends React.Component { state = { loading: true, }; async componentDidMount() { const isLoggedIn = await myAuthenticationAPI.isLoggedIn(); if (isLoggedIn) { this.setState({ loading: false }); } else { Router.push(options.pathAfterFailure || \u0026#34;/login\u0026#34;); } } render() { const { loading } = this.state; if (loading) { return \u0026lt;div /\u0026gt;; } return \u0026lt;Component {...this.props} /\u0026gt;; } } return AuthenticatedRoute; }; export default authenticatedRoute; En este ejemplo, casi todo es idéntico, pero en lugar de anticipar un valor de autenticación proveniente de una tienda de Redux, simplemente llamamos a nuestra API de autenticación (por ejemplo, Firebase) directamente, confiando en el valor de retorno de esa llamada como nuestro isLoggedInestado.\nImplementar un componente de ruta pública Ahora, algunas buenas noticias: nuestro publicRoutecomponente es idéntico al que vimos anteriormente con un pequeño cambio:\n/components/PublicRoute/index.js import React from \u0026#34;react\u0026#34;; import Router from \u0026#34;next/router\u0026#34;; import { connect } from \u0026#34;react-redux\u0026#34;; const publicRoute = (Component = null, options = {}) =\u0026gt; { class PublicRoute extends React.Component { state = { loading: true, }; componentDidMount() { if (!this.props.isLoggedIn) { this.setState({ loading: false }); } else { Router.push(options.pathAfterFailure || \u0026#34;/documents\u0026#34;); } } render() { const { loading } = this.state; if (loading) { return \u0026lt;div /\u0026gt;; } return \u0026lt;Component {...this.props} /\u0026gt;; } } return connect((state) =\u0026gt; ({ isLoggedIn: state?.authenticated \u0026amp;\u0026amp; !!state?.user, }))(PublicRoute); }; export default publicRoute; ¿Puedes distinguirlo? Arriba en el componentDidMounthemos agregado una !para decir \u0026ldquo;si el usuario no ha iniciado sesión, continúe y renderice el componente. Si está conectado, rediríjalo\u0026rdquo;. Literalmente la lógica inversa a nuestra authenticatedRoute. El punto aquí es que queremos usar el publicRoute()componente en rutas similares /logino /signuppara redirigir a los usuarios ya autenticados fuera de esas páginas. Esto asegura que no tengamos problemas con la base de datos más tarde, como usuarios duplicados o sesiones de múltiples usuarios.\n","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia08/git/","section":"Levels","summary":"Enlazando páginas # Para obtener una navegación fluida entre las páginas de nuestra aplicación, necesitamos importar el componente Link y usarlo de la siguiente manera:","title":"Enlazando Paginas Con Next.js"},{"content":"Laravel middlewares 1 # En Laravel, los middlewares son componentes clave que permiten agregar capas de lógica entre las solicitudes entrantes y las respuestas salientes de una aplicación. Proporcionan una forma conveniente de filtrar, modificar o manipular las solicitudes HTTP antes de que sean manejadas por los controladores y de procesar las respuestas antes de que sean enviadas de vuelta al cliente.\nLos middlewares en Laravel son clases que implementan la interfaz Middleware o la interfaz MiddlewareInterface, dependiendo de la versión de Laravel que estés utilizando. Estas clases tienen un método principal llamado handle que acepta la solicitud entrante y un cierre de argumento de siguiente paso ($next), que se invoca para pasar la solicitud al siguiente middleware o al controlador final.\nPuedes crear tus propios middlewares en Laravel utilizando el comando de Artisan make:middleware. Por ejemplo, si deseas crear un middleware llamado VerificarEdadMiddleware, puedes ejecutar el siguiente comando en la línea de comandos:\nphp artisan make:middleware VerificarEdadMiddleware Esto generará una clase de middleware en la ubicación app/Http/Middleware/VerificarEdadMiddleware.php. En el método handle de esta clase, puedes escribir la lógica que deseas aplicar antes de pasar la solicitud al siguiente paso o incluso abortar la solicitud si se cumplen ciertas condiciones.\nUna vez que hayas creado un middleware, puedes utilizarlo en tus rutas o en grupos de rutas para aplicar la lógica específica del middleware a esas rutas. Puedes hacerlo utilizando el método middleware en tus definiciones de ruta o utilizando el middleware global en el archivo app/Http/Kernel.php.\nPor ejemplo, para aplicar el middleware VerificarEdadMiddleware a una ruta, puedes hacer lo siguiente:\nRoute::get(\u0026#39;/perfil\u0026#39;, function () { // })-\u0026gt;middleware(\u0026#39;VerificarEdadMiddleware\u0026#39;); Esto asegurará que antes de que se ejecute la función anónima de la ruta, la solicitud pasará por el middleware VerificarEdadMiddleware y se ejecutará la lógica definida en su método handle.\nAdemás de los middlewares personalizados, Laravel también incluye una serie de middlewares integrados que realizan tareas comunes, como autenticación, verificación CSRF, etc. Estos middlewares se pueden encontrar en el directorio app/Http/Middleware y se pueden utilizar de manera similar a los middlewares personalizados.\nEn resumen, los middlewares en Laravel son componentes flexibles que te permiten agregar y aplicar lógica de procesamiento a las solicitudes y respuestas HTTP en tu aplicación. Son una parte fundamental del flujo de solicitud y te brindan un gran control sobre el manejo de las solicitudes entrantes y las respuestas salientes.\nClases de middlewares # En Laravel, existen diferentes clases de middlewares disponibles que puedes utilizar según tus necesidades. Estas clases de middlewares están destinadas a realizar tareas comunes, como la autenticación, la verificación CSRF, la comprobación de roles y permisos, y más. A continuación, se presentan algunas de las clases de middlewares integrados en Laravel:\nAuthenticate: Este middleware se utiliza para autenticar a los usuarios. Verifica si el usuario ha iniciado sesión antes de permitir el acceso a rutas o controladores específicos.\nAuthorize: Este middleware se utiliza para autorizar a los usuarios. Verifica si el usuario tiene los roles y permisos necesarios para acceder a una determinada ruta o controlador.\nEncryptCookies: Este middleware se encarga de cifrar las cookies de la aplicación para garantizar la seguridad de los datos almacenados en ellas.\nVerifyCsrfToken: Este middleware protege tu aplicación contra ataques CSRF (Cross-Site Request Forgery) al verificar si el token CSRF en la solicitud coincide con el token almacenado en la sesión.\nTrimStrings: Este middleware se utiliza para recortar automáticamente los espacios en blanco de las cadenas de texto en las solicitudes entrantes. Es útil para mantener la consistencia en los datos recibidos.\nRedirectIfAuthenticated: Este middleware redirige automáticamente a los usuarios autenticados a una ruta específica, como la página de inicio, para evitar que accedan a rutas de autenticación como el formulario de inicio de sesión o registro.\nThrottleRequests: Este middleware limita la cantidad de solicitudes que un usuario puede hacer en un período de tiempo determinado. Es útil para prevenir ataques de fuerza bruta o solicitudes excesivas a la aplicación.\nEstas son solo algunas de las clases de middlewares integrados en Laravel. Puedes encontrar más clases de middlewares en el directorio app/Http/Middleware de tu proyecto Laravel. Además, puedes crear tus propias clases de middlewares personalizados para adaptarlos a tus necesidades específicas utilizando el comando make:middleware de Artisan.\nLaravel MiMiddleware # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/08laravel/git/","section":"Levels","summary":"Laravel middlewares 1 # En Laravel, los middlewares son componentes clave que permiten agregar capas de lógica entre las solicitudes entrantes y las respuestas salientes de una aplicación.","title":"Laravel middlewares"},{"content":"Características de Next.js # A continuación explicaremos las características de Next.js y lo que puedes ganar utilizando Next.js en tu proyecto.\nEnrutamiento # El enrutamiento es una de las características esenciales de Next.js. Next.js utiliza el sistema de enrutamiento basado en archivos de las páginas para estructurar cómo será el enrutamiento de tu aplicación. Cada archivo y carpeta creada dentro de la carpeta pages se convierte automáticamente en ruta en Next.js.\nEl sistema de enrutamiento de Next.js se divide en 3 tipos diferentes, y a continuación exploraremos cada uno de ellos.\nEnrutamiento de Índice # La carpeta pages tiene automáticamente index.js, que se convierte en la ruta de la página de inicio /. También puedes definir una página index.js para todas tus rutas en cualquier carpeta. Por ejemplo, puedes definir pages/profiles/index.js, que se asignará automáticamente a la página /profiles.\nMira este ejemplo, por ejemplo:\npages index.js profile index.js [user].js La estructura de páginas anterior mapeará las carpetas y archivos a una estructura de URL. Por ejemplo, / para las pages/index.js, /profile/ para las pages/profile/index.js, y /profile/user para las pages/profile/user.js, respectivamente.\nRutas Anidadas # Las rutas anidadas se crean dentro de una ruta padre. Para crear una ruta anidada, tienes que crear una ruta/carpeta padre dentro de la carpeta pages y añadir carpetas o archivos dentro para crear una ruta anidada.\nEcha un vistazo a este ejemplo:\npages index.js dashboard index.js user.js En el script anterior, los archivos user.js e index.js están anidados con la ruta padre del panel de control, lo que significa que sólo se puede acceder a las URLs con la ruta del panel de control.\nRutas Dinámicas # Se consigue mediante rutas dinámicas. Las rutas dinámicas son siempre indeterminadas. Pueden generarse mediante llamadas a la API o asignar un ID o slug a la URL.\nPara crear una ruta dinámica en Next.js, añade un corchete [id].js alrededor del nombre del archivo o del directorio. Puedes nombrar el archivo o el directorio con cualquier nombre de tu elección, pero debes adjuntar un corchete [] para que sea dinámico.\nEcha un vistazo a este ejemplo:\npages dashboard [user].js profile El script anterior hace que el [usuario].js sea dinámico, lo que significa que se debe acceder a la página del perfil con /dashboard/2/profile o /dashboard/johndoe/profile.\nEn la documentación oficial, puedes aprender más y los diferentes trucos para crear un sistema de enrutamiento más avanzado en Next.js.\nServir Archivos Estáticos # En Next.js, el servicio de archivos estáticos o activos como iconos, fuentes autoalojadas o imágenes se realiza a través de la carpeta public, la única fuente de verdad para los activos estáticos.\nLa carpeta public no debe ser renombrada según los documentos de Next.js. Servir activos estáticos a través de la carpeta public es muy sencillo, según la configuración de Next.js. Renderización Previa\nUna de las enormes características de Next.js es el pre-renderizado, que hace que Next.js funcione muy bien y muy rápido. Next.js pre-renderiza cada página generando de antemano el HTML de cada página junto con el JavaScript mínimo que necesitan para ejecutarse a través de un proceso conocido como Hidratación.\nHay dos formas de pre-renderizado en Next.js: # Renderización del lado del servidor (SSR) Generación estática (SG) La diferencia crucial entre SG y SSR es cómo se obtienen los datos. En el caso de SG, los datos se obtienen en el momento de la construcción y se reutilizan en cada solicitud (lo que hace que sea más rápido porque se puede almacenar en caché), mientras que en SSR, los datos se obtienen en cada solicitud.\nPáginas y Rutas # Una de las particularidades de Next.js es que esta construido alrededor del concepto de páginas. Una página es un componente de React exportado desde la carpeta pages. Las páginas están asociadas con una ruta basada en el nombre del archivo. Por ejemplo pages/perfil.js resultará en la ruta /perfil.\nexport default function Perfil() { return \u0026lt;div\u0026gt;¡Bienvenido a mi perfil!\u0026lt;/div\u0026gt;; } *** pages/perfil.js *** Prueba el código anterior por tu cuenta y visita localhost:3000/perfil para ver los resultados. Rutas Index Los archivos con nombre index dirigen hacia la raíz del directorio que lo contiene.\n•\tpages/index.js → / •\tpages/blog/index.js → /blog Rutas Anidadas Supongamos que queremos acceder a la siguiente ruta: /blog/post/:id Necesitaremos anidar las carpetas de la siguiente manera: |- pages |- index.js |- blog |- post |- [id].js # id dinámico para cada post *** Páginas con Rutas Dinámicas *** También podemos utilizar rutas dinámicas si agregamos corchetes al nombre del archivo. Por ejemplo, si creamos un archivo llamado pages/post/[id].js podremos acceder a el en las rutas post/1, post/2, y así sucesivamente.\nimport { useRouter } from \u0026#34;next/router\u0026#34;; export default function Post() { const router = useRouter(); const { id } = router.query; return \u0026lt;p\u0026gt;Post: {id}\u0026lt;/p\u0026gt;; } pages/post/[id].js ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia07/debug/","section":"Levels","summary":"Características de Next.","title":"Caracterìsticas de Next.js"},{"content":"Migraciones # En Laravel, las migraciones son una forma conveniente y controlada de administrar los cambios en la estructura de la base de datos. Las migraciones te permiten crear, modificar o eliminar tablas y columnas de manera fácil y consistente, y también te ayudan a colaborar en equipo y mantener un historial de versiones de tu esquema de base de datos.\nA continuación, te mostraré los pasos básicos para trabajar con migraciones en Laravel:\nCrear una migración: Puedes generar una nueva migración utilizando el comando Artisan make:migration. Por ejemplo, para crear una migración para crear una nueva tabla, puedes ejecutar el siguiente comando en tu terminal:\nphp artisan make:migration create_nueva_tabla --create=nombre_tabla Esto creará un nuevo archivo de migración en el directorio database/migrations.\nDefinir la estructura de la tabla: Abre el archivo de migración recién creado y utiliza los métodos de la clase Schema para definir la estructura de la tabla. Por ejemplo, puedes utilizar métodos como create(), addColumn(), dropColumn(), etc. para especificar las columnas y las modificaciones de la tabla.\n\u0026lt;?php use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema; class CreateNuevaTabla extends Migration { public function up() { Schema::create(\u0026#39;nombre_tabla\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;nombre\u0026#39;); $table-\u0026gt;integer(\u0026#39;edad\u0026#39;); $table-\u0026gt;timestamps(); }); } public function down() { Schema::dropIfExists(\u0026#39;nombre_tabla\u0026#39;); } } En este ejemplo, se crea una nueva tabla llamada nombre_tabla con las columnas id, nombre, edad y las columnas timestamps para registrar la fecha y hora de creación y actualización de los registros.\nEjecutar las migraciones: Una vez que hayas definido la migración, puedes ejecutarla para aplicar los cambios en la base de datos. Utiliza el comando Artisan migrate para ejecutar todas las migraciones pendientes:\nphp artisan migrate Esto ejecutará todas las migraciones que aún no se hayan aplicado.\nRollback y reset de migraciones: Si necesitas revertir o deshacer los cambios realizados por una o todas las migraciones, puedes utilizar los comandos migrate:rollback y migrate:reset respectivamente.\nphp artisan migrate:rollback Este comando deshará la última migración.\nphp artisan migrate:reset Este comando deshará todas las migraciones y eliminará todas las tablas de la base de datos.\nEstos son los conceptos básicos para trabajar con migraciones en Laravel. Las migraciones te permiten mantener un control y seguimiento de los cambios en la estructura de la base de datos de tu aplicación, facilitando el trabajo en equipo y la gestión del esquema de la base de datos.\nAppService Provider Laravel # El archivo AppServiceProvider en Laravel es una clase que se encuentra en el directorio app/Providers y proporciona un punto de entrada para configurar y registrar enlaces de servicio en la aplicación. Es una de las clases de proveedores incluidas por defecto en Laravel y juega un papel importante en la configuración inicial de la aplicación.\nEl AppServiceProvider tiene dos métodos principales que puedes utilizar:\nregister(): Este método se utiliza para registrar enlaces de servicio y realizar enlaces de dependencia en la aplicación. Puedes utilizarlo para enlazar interfaces con implementaciones concretas de clases.\npublic function register() { $this-\u0026gt;app-\u0026gt;bind(Interface::class, ConcreteClass::class); } En este ejemplo, se registra una implementación concreta ConcreteClass para la interfaz Interface. Esto permite que en otros lugares de la aplicación se inyecte automáticamente la instancia de ConcreteClass cuando se solicite una instancia de Interface.\nboot(): Este método se ejecuta después de que todos los servicios se hayan registrado y está destinado a la configuración adicional de la aplicación. Puedes utilizarlo para definir rutas, vistas, eventos, enlaces de base de datos, etc.\npublic function boot() { Route::middleware(\u0026#39;web\u0026#39;) -\u0026gt;namespace(\u0026#39;App\\Http\\Controllers\u0026#39;) -\u0026gt;group(function () { Route::get(\u0026#39;/\u0026#39;, \u0026#39;HomeController@index\u0026#39;); }); } En este ejemplo, se define una ruta para la página de inicio de la aplicación. La función group() permite agrupar varias rutas bajo un middleware y un espacio de nombres específicos.\nEl AppServiceProvider también es un buen lugar para definir enlaces de base de datos, configuraciones de cache, configuraciones de log, eventos, etc. Puedes personalizar este proveedor según tus necesidades y agregar más lógica en los métodos register() y boot().\nEs importante destacar que el AppServiceProvider es cargado automáticamente por Laravel durante el inicio de la aplicación, por lo que no es necesario registrar manualmente este proveedor en el archivo config/app.php.\nRecuerda que, además del AppServiceProvider, Laravel también incluye otros proveedores útiles como RouteServiceProvider, EventServiceProvider, AuthServiceProvider, entre otros, que te permiten personalizar y configurar diferentes aspectos de tu aplicación.\nMiddleware # En Laravel, el middleware es una capa de software que se encuentra entre la solicitud entrante y la respuesta enviada por la aplicación. Actúa como un filtro o una tubería a través de la cual pasan las solicitudes antes de ser procesadas por la aplicación. El middleware permite realizar acciones específicas en una solicitud, como autenticación, validación, registro de actividad, etc., antes de que la solicitud llegue a su destino final.\nLaravel incluye varios middlewares predefinidos, como el middleware de autenticación, el middleware de verificación CSRF (Cross-Site Request Forgery), el middleware de enrutamiento, entre otros. Además, puedes crear tus propios middlewares personalizados según tus necesidades.\nA continuación, te mostraré los pasos básicos para trabajar con middleware en Laravel:\nCreación de un middleware: Puedes generar un nuevo middleware utilizando el comando Artisan make:middleware. Por ejemplo, para crear un middleware llamado MiMiddleware, ejecuta el siguiente comando en tu terminal:\nphp artisan make:middleware MiMiddleware Esto creará un nuevo archivo de middleware en el directorio app/Http/Middleware.\nDefinición del middleware: Abre el archivo de middleware recién creado y, en el método handle(), implementa la lógica que deseas ejecutar en cada solicitud que pase a través de este middleware. Puedes realizar acciones como verificar la autenticación del usuario, validar datos, agregar encabezados personalizados, etc.\n\u0026lt;?php namespace App\\Http\\Middleware; use Closure; class MiMiddleware { public function handle($request, Closure $next) { // Lógica del middleware return $next($request); } } El método handle() recibe la solicitud actual y una clausura $next, que representa la siguiente capa de middleware o el controlador final. Debes asegurarte de llamar a la clausura $next para permitir que la solicitud continúe su flujo normal.\nRegistro del middleware: Para que Laravel utilice el middleware, debes registrarlo en la aplicación. Puedes hacerlo en el archivo app/Http/Kernel.php. En este archivo, encontrarás un arreglo llamado $middleware que contiene la lista de middlewares globales que se aplicarán a todas las solicitudes.\nprotected $middleware = [ // ... \\App\\Http\\Middleware\\MiMiddleware::class, ]; Agrega la referencia al middleware recién creado en este arreglo. Ten en cuenta que la posición en el arreglo determina el orden de ejecución de los middlewares. Si necesitas aplicar el middleware solo a rutas específicas, puedes utilizar el middleware de ruta en lugar del middleware global.\nAsignación del middleware a rutas: Puedes asignar el middleware a rutas específicas en el archivo routes/web.php o routes/api.php. Puedes hacerlo utilizando los métodos middleware() o group().\nRoute::get(\u0026#39;/ruta\u0026#39;, function () { // Lógica de la ruta })-\u0026gt;middleware(\u0026#39;MiMiddleware\u0026#39;); En este ejemplo, el middleware MiMiddleware se aplicará solo a la ruta /ruta.\nEstos son los pasos básicos para trabajar con middleware en Laravel. El middleware te permite realizar tareas específicas en las solicitudes antes de que lleguen a su destino final, lo\nLaravel Migraciones # Laravel MiMiddleware # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/07laravel/debug/","section":"Levels","summary":"Migraciones # En Laravel, las migraciones son una forma conveniente y controlada de administrar los cambios en la estructura de la base de datos.","title":"Migraciones"},{"content":"Migraciones # En Laravel, las migraciones son una forma conveniente y controlada de administrar los cambios en la estructura de la base de datos. Las migraciones te permiten crear, modificar o eliminar tablas y columnas de manera fácil y consistente, y también te ayudan a colaborar en equipo y mantener un historial de versiones de tu esquema de base de datos.\nA continuación, te mostraré los pasos básicos para trabajar con migraciones en Laravel:\nCrear una migración: Puedes generar una nueva migración utilizando el comando Artisan make:migration. Por ejemplo, para crear una migración para crear una nueva tabla, puedes ejecutar el siguiente comando en tu terminal:\nphp artisan make:migration create_nueva_tabla --create=nombre_tabla Esto creará un nuevo archivo de migración en el directorio database/migrations.\nDefinir la estructura de la tabla: Abre el archivo de migración recién creado y utiliza los métodos de la clase Schema para definir la estructura de la tabla. Por ejemplo, puedes utilizar métodos como create(), addColumn(), dropColumn(), etc. para especificar las columnas y las modificaciones de la tabla.\n\u0026lt;?php use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema; class CreateNuevaTabla extends Migration { public function up() { Schema::create(\u0026#39;nombre_tabla\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;nombre\u0026#39;); $table-\u0026gt;integer(\u0026#39;edad\u0026#39;); $table-\u0026gt;timestamps(); }); } public function down() { Schema::dropIfExists(\u0026#39;nombre_tabla\u0026#39;); } } En este ejemplo, se crea una nueva tabla llamada nombre_tabla con las columnas id, nombre, edad y las columnas timestamps para registrar la fecha y hora de creación y actualización de los registros.\nEjecutar las migraciones: Una vez que hayas definido la migración, puedes ejecutarla para aplicar los cambios en la base de datos. Utiliza el comando Artisan migrate para ejecutar todas las migraciones pendientes:\nphp artisan migrate Esto ejecutará todas las migraciones que aún no se hayan aplicado.\nRollback y reset de migraciones: Si necesitas revertir o deshacer los cambios realizados por una o todas las migraciones, puedes utilizar los comandos migrate:rollback y migrate:reset respectivamente.\nphp artisan migrate:rollback Este comando deshará la última migración.\nphp artisan migrate:reset Este comando deshará todas las migraciones y eliminará todas las tablas de la base de datos.\nEstos son los conceptos básicos para trabajar con migraciones en Laravel. Las migraciones te permiten mantener un control y seguimiento de los cambios en la estructura de la base de datos de tu aplicación, facilitando el trabajo en equipo y la gestión del esquema de la base de datos.\nAppService Provider Laravel # El archivo AppServiceProvider en Laravel es una clase que se encuentra en el directorio app/Providers y proporciona un punto de entrada para configurar y registrar enlaces de servicio en la aplicación. Es una de las clases de proveedores incluidas por defecto en Laravel y juega un papel importante en la configuración inicial de la aplicación.\nEl AppServiceProvider tiene dos métodos principales que puedes utilizar:\nregister(): Este método se utiliza para registrar enlaces de servicio y realizar enlaces de dependencia en la aplicación. Puedes utilizarlo para enlazar interfaces con implementaciones concretas de clases.\npublic function register() { $this-\u0026gt;app-\u0026gt;bind(Interface::class, ConcreteClass::class); } En este ejemplo, se registra una implementación concreta ConcreteClass para la interfaz Interface. Esto permite que en otros lugares de la aplicación se inyecte automáticamente la instancia de ConcreteClass cuando se solicite una instancia de Interface.\nboot(): Este método se ejecuta después de que todos los servicios se hayan registrado y está destinado a la configuración adicional de la aplicación. Puedes utilizarlo para definir rutas, vistas, eventos, enlaces de base de datos, etc.\npublic function boot() { Route::middleware(\u0026#39;web\u0026#39;) -\u0026gt;namespace(\u0026#39;App\\Http\\Controllers\u0026#39;) -\u0026gt;group(function () { Route::get(\u0026#39;/\u0026#39;, \u0026#39;HomeController@index\u0026#39;); }); } En este ejemplo, se define una ruta para la página de inicio de la aplicación. La función group() permite agrupar varias rutas bajo un middleware y un espacio de nombres específicos.\nEl AppServiceProvider también es un buen lugar para definir enlaces de base de datos, configuraciones de cache, configuraciones de log, eventos, etc. Puedes personalizar este proveedor según tus necesidades y agregar más lógica en los métodos register() y boot().\nEs importante destacar que el AppServiceProvider es cargado automáticamente por Laravel durante el inicio de la aplicación, por lo que no es necesario registrar manualmente este proveedor en el archivo config/app.php.\nRecuerda que, además del AppServiceProvider, Laravel también incluye otros proveedores útiles como RouteServiceProvider, EventServiceProvider, AuthServiceProvider, entre otros, que te permiten personalizar y configurar diferentes aspectos de tu aplicación.\nMiddleware # En Laravel, el middleware es una capa de software que se encuentra entre la solicitud entrante y la respuesta enviada por la aplicación. Actúa como un filtro o una tubería a través de la cual pasan las solicitudes antes de ser procesadas por la aplicación. El middleware permite realizar acciones específicas en una solicitud, como autenticación, validación, registro de actividad, etc., antes de que la solicitud llegue a su destino final.\nLaravel incluye varios middlewares predefinidos, como el middleware de autenticación, el middleware de verificación CSRF (Cross-Site Request Forgery), el middleware de enrutamiento, entre otros. Además, puedes crear tus propios middlewares personalizados según tus necesidades.\nA continuación, te mostraré los pasos básicos para trabajar con middleware en Laravel:\nCreación de un middleware: Puedes generar un nuevo middleware utilizando el comando Artisan make:middleware. Por ejemplo, para crear un middleware llamado MiMiddleware, ejecuta el siguiente comando en tu terminal:\nphp artisan make:middleware MiMiddleware Esto creará un nuevo archivo de middleware en el directorio app/Http/Middleware.\nDefinición del middleware: Abre el archivo de middleware recién creado y, en el método handle(), implementa la lógica que deseas ejecutar en cada solicitud que pase a través de este middleware. Puedes realizar acciones como verificar la autenticación del usuario, validar datos, agregar encabezados personalizados, etc.\n\u0026lt;?php namespace App\\Http\\Middleware; use Closure; class MiMiddleware { public function handle($request, Closure $next) { // Lógica del middleware return $next($request); } } El método handle() recibe la solicitud actual y una clausura $next, que representa la siguiente capa de middleware o el controlador final. Debes asegurarte de llamar a la clausura $next para permitir que la solicitud continúe su flujo normal.\nRegistro del middleware: Para que Laravel utilice el middleware, debes registrarlo en la aplicación. Puedes hacerlo en el archivo app/Http/Kernel.php. En este archivo, encontrarás un arreglo llamado $middleware que contiene la lista de middlewares globales que se aplicarán a todas las solicitudes.\nprotected $middleware = [ // ... \\App\\Http\\Middleware\\MiMiddleware::class, ]; Agrega la referencia al middleware recién creado en este arreglo. Ten en cuenta que la posición en el arreglo determina el orden de ejecución de los middlewares. Si necesitas aplicar el middleware solo a rutas específicas, puedes utilizar el middleware de ruta en lugar del middleware global.\nAsignación del middleware a rutas: Puedes asignar el middleware a rutas específicas en el archivo routes/web.php o routes/api.php. Puedes hacerlo utilizando los métodos middleware() o group().\nRoute::get(\u0026#39;/ruta\u0026#39;, function () { // Lógica de la ruta })-\u0026gt;middleware(\u0026#39;MiMiddleware\u0026#39;); En este ejemplo, el middleware MiMiddleware se aplicará solo a la ruta /ruta.\nEstos son los pasos básicos para trabajar con middleware en Laravel. El middleware te permite realizar tareas específicas en las solicitudes antes de que lleguen a su destino final, lo\nLaravel Migraciones # Laravel MiMiddleware # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/07laravel/debug/","section":"Levels","summary":"Migraciones # En Laravel, las migraciones son una forma conveniente y controlada de administrar los cambios en la estructura de la base de datos.","title":"Migraciones"},{"content":"Laravel # Introduccion Laravel # Laravel es un framework de desarrollo de aplicaciones web PHP de código abierto y altamente popular. Fue creado por Taylor Otwell en 2011 con el objetivo de proporcionar una forma elegante y eficiente de construir aplicaciones web robustas y escalables.\nA continuación, te presento una introducción a Laravel y algunos de los conceptos clave asociados a este framework:\nCaracterísticas principales de Laravel:\nElegante sintaxis: Laravel utiliza una sintaxis limpia y expresiva que facilita el desarrollo y mejora la legibilidad del código. Enrutamiento potente: Proporciona un sistema de enrutamiento flexible y fácil de usar para definir las rutas de la aplicación. Motor de plantillas: Incluye un potente motor de plantillas llamado Blade, que facilita la creación de vistas y la gestión de la presentación de la aplicación. ORM (Object-Relational Mapping): Laravel utiliza Eloquent ORM, que simplifica la interacción con la base de datos al permitirte trabajar con modelos y relaciones en lugar de escribir consultas SQL directamente. Migraciones de base de datos: Proporciona una forma conveniente de controlar los cambios en la estructura de la base de datos mediante migraciones, lo que facilita la colaboración en equipo y la gestión de versiones. Seguridad integrada: Laravel incluye características de seguridad como protección contra ataques de Cross-Site Scripting (XSS) y ataques de falsificación de solicitudes entre sitios (CSRF). Pruebas automatizadas: Viene con herramientas integradas para realizar pruebas unitarias y de integración de forma sencilla y eficiente. Instalación de Laravel: Para comenzar a utilizar Laravel, primero debes instalarlo en tu entorno de desarrollo. Puedes hacerlo siguiendo los siguientes pasos:\nAsegúrate de tener instalado PHP, Composer y Laravel Valet (si estás utilizando macOS) o Laravel Homestead (si estás utilizando otro sistema operativo). Abre una terminal y ejecuta el siguiente comando para instalar Laravel a través de Composer: composer global require laravel/installer Una vez que la instalación haya finalizado, puedes crear un nuevo proyecto Laravel ejecutando el siguiente comando: laravel new nombre-proyecto Esto creará una nueva carpeta con el nombre del proyecto en el directorio actual y descargará todas las dependencias de Laravel. Primeros pasos con Laravel: Una vez que hayas instalado Laravel, podrás comenzar a construir tu aplicación web. Algunos de los conceptos clave a tener en cuenta son:\nRutas: Define las rutas de tu aplicación en el archivo routes/web.php para asociar URL específicas con controladores o funciones de devolución de llamada. Controladores: Los controladores son responsables de procesar las solicitudes y realizar acciones específicas. Puedes crear controladores en la carpeta app/Http/Controllers. Vistas: Las vistas son las plantillas que se utilizan para mostrar la interfaz de usuario de tu aplicación. Se encuentran en la carpeta resources/views y generalmente utilizan el motor de plantillas Blade. Modelos: Los modelos representan las tablas de la base de datos y proporcionan métodos para interactuar con los datos. Puedes crear modelos en la carpeta `app Estrucuta Laravel # La estructura de un proyecto Laravel sigue una convención bien definida y organizada. A continuación, te mostraré la estructura básica de un proyecto Laravel:\n- app - Console - Exceptions - Http - Controllers - Middleware - Requests - Models - Providers - bootstrap - config - database - public - resources - js - lang - sass - views - routes - storage - tests - vendor Aquí tienes una descripción de las carpetas principales:\napp: Contiene la lógica de la aplicación, incluyendo controladores, modelos y clases relacionadas.\nConsole: Contiene comandos de consola personalizados que puedes crear. Exceptions: Contiene clases para manejar excepciones personalizadas. Http: Contiene controladores, middlewares y solicitudes HTTP. Controllers: Aquí puedes definir tus controladores que manejan las solicitudes HTTP y realizan acciones. Middleware: Contiene middlewares que procesan las solicitudes HTTP antes o después de ser manejadas por los controladores. Requests: Puedes crear clases de solicitud personalizadas para validar los datos enviados en las solicitudes. Models: Aquí puedes definir tus modelos que representan las tablas de la base de datos y proporcionan métodos para interactuar con los datos. Providers: Contiene clases de proveedores que registran los servicios de la aplicación. bootstrap: Contiene archivos de inicialización y configuración para arrancar la aplicación.\nconfig: Contiene los archivos de configuración de la aplicación, como las conexiones de base de datos, el archivo de rutas, etc.\ndatabase: Aquí puedes encontrar las migraciones de base de datos y los archivos de semillas para configurar y poblar la base de datos.\npublic: Es la carpeta raíz accesible públicamente. Contiene el archivo index.php que actúa como punto de entrada de la aplicación.\nresources: Contiene los recursos de la aplicación, como las vistas, los archivos de lenguaje, los archivos de estilo y los archivos JavaScript.\njs: Puedes colocar tus archivos JavaScript aquí. lang: Contiene archivos de lenguaje para la internacionalización de la aplicación. sass: Aquí puedes almacenar tus archivos Sass para los estilos de la aplicación. views: Contiene las vistas de la aplicación que se renderizan y muestran al usuario. routes: Aquí puedes definir las rutas de la aplicación, que establecen la relación entre una URL y el controlador o la acción que debe ejecutarse.\nstorage: Es el directorio de almacenamiento de la aplicación y contiene archivos generados dinámicamente, como archivos de registro, caché, sesiones, etc.\ntests: Contiene los archivos de prueba para probar tu aplicación.\nvendor: Aquí se encuentran las dependencias de Composer y las bibliotecas de terceros utilizadas en el proyecto.\nEsta es solo una descripción básica de la estructura de un proyecto Laravel. A medida que trabajes con Laravel, explorarás más en profundidad cada una de estas carpetas y cómo se utilizan en el desarrollo de tu aplicación.\nLaravel video # Laravel estrucuta # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/06laravel/founda/","section":"Levels","summary":"Laravel # Introduccion Laravel # Laravel es un framework de desarrollo de aplicaciones web PHP de código abierto y altamente popular.","title":"Introduccion Laravel"},{"content":"Laravel # Introduccion Laravel # Laravel es un framework de desarrollo de aplicaciones web PHP de código abierto y altamente popular. Fue creado por Taylor Otwell en 2011 con el objetivo de proporcionar una forma elegante y eficiente de construir aplicaciones web robustas y escalables.\nA continuación, te presento una introducción a Laravel y algunos de los conceptos clave asociados a este framework:\nCaracterísticas principales de Laravel:\nElegante sintaxis: Laravel utiliza una sintaxis limpia y expresiva que facilita el desarrollo y mejora la legibilidad del código. Enrutamiento potente: Proporciona un sistema de enrutamiento flexible y fácil de usar para definir las rutas de la aplicación. Motor de plantillas: Incluye un potente motor de plantillas llamado Blade, que facilita la creación de vistas y la gestión de la presentación de la aplicación. ORM (Object-Relational Mapping): Laravel utiliza Eloquent ORM, que simplifica la interacción con la base de datos al permitirte trabajar con modelos y relaciones en lugar de escribir consultas SQL directamente. Migraciones de base de datos: Proporciona una forma conveniente de controlar los cambios en la estructura de la base de datos mediante migraciones, lo que facilita la colaboración en equipo y la gestión de versiones. Seguridad integrada: Laravel incluye características de seguridad como protección contra ataques de Cross-Site Scripting (XSS) y ataques de falsificación de solicitudes entre sitios (CSRF). Pruebas automatizadas: Viene con herramientas integradas para realizar pruebas unitarias y de integración de forma sencilla y eficiente. Instalación de Laravel: Para comenzar a utilizar Laravel, primero debes instalarlo en tu entorno de desarrollo. Puedes hacerlo siguiendo los siguientes pasos:\nAsegúrate de tener instalado PHP, Composer y Laravel Valet (si estás utilizando macOS) o Laravel Homestead (si estás utilizando otro sistema operativo). Abre una terminal y ejecuta el siguiente comando para instalar Laravel a través de Composer: composer global require laravel/installer Una vez que la instalación haya finalizado, puedes crear un nuevo proyecto Laravel ejecutando el siguiente comando: laravel new nombre-proyecto Esto creará una nueva carpeta con el nombre del proyecto en el directorio actual y descargará todas las dependencias de Laravel. Primeros pasos con Laravel: Una vez que hayas instalado Laravel, podrás comenzar a construir tu aplicación web. Algunos de los conceptos clave a tener en cuenta son:\nRutas: Define las rutas de tu aplicación en el archivo routes/web.php para asociar URL específicas con controladores o funciones de devolución de llamada. Controladores: Los controladores son responsables de procesar las solicitudes y realizar acciones específicas. Puedes crear controladores en la carpeta app/Http/Controllers. Vistas: Las vistas son las plantillas que se utilizan para mostrar la interfaz de usuario de tu aplicación. Se encuentran en la carpeta resources/views y generalmente utilizan el motor de plantillas Blade. Modelos: Los modelos representan las tablas de la base de datos y proporcionan métodos para interactuar con los datos. Puedes crear modelos en la carpeta `app Estrucuta Laravel # La estructura de un proyecto Laravel sigue una convención bien definida y organizada. A continuación, te mostraré la estructura básica de un proyecto Laravel:\n- app - Console - Exceptions - Http - Controllers - Middleware - Requests - Models - Providers - bootstrap - config - database - public - resources - js - lang - sass - views - routes - storage - tests - vendor Aquí tienes una descripción de las carpetas principales:\napp: Contiene la lógica de la aplicación, incluyendo controladores, modelos y clases relacionadas.\nConsole: Contiene comandos de consola personalizados que puedes crear. Exceptions: Contiene clases para manejar excepciones personalizadas. Http: Contiene controladores, middlewares y solicitudes HTTP. Controllers: Aquí puedes definir tus controladores que manejan las solicitudes HTTP y realizan acciones. Middleware: Contiene middlewares que procesan las solicitudes HTTP antes o después de ser manejadas por los controladores. Requests: Puedes crear clases de solicitud personalizadas para validar los datos enviados en las solicitudes. Models: Aquí puedes definir tus modelos que representan las tablas de la base de datos y proporcionan métodos para interactuar con los datos. Providers: Contiene clases de proveedores que registran los servicios de la aplicación. bootstrap: Contiene archivos de inicialización y configuración para arrancar la aplicación.\nconfig: Contiene los archivos de configuración de la aplicación, como las conexiones de base de datos, el archivo de rutas, etc.\ndatabase: Aquí puedes encontrar las migraciones de base de datos y los archivos de semillas para configurar y poblar la base de datos.\npublic: Es la carpeta raíz accesible públicamente. Contiene el archivo index.php que actúa como punto de entrada de la aplicación.\nresources: Contiene los recursos de la aplicación, como las vistas, los archivos de lenguaje, los archivos de estilo y los archivos JavaScript.\njs: Puedes colocar tus archivos JavaScript aquí. lang: Contiene archivos de lenguaje para la internacionalización de la aplicación. sass: Aquí puedes almacenar tus archivos Sass para los estilos de la aplicación. views: Contiene las vistas de la aplicación que se renderizan y muestran al usuario. routes: Aquí puedes definir las rutas de la aplicación, que establecen la relación entre una URL y el controlador o la acción que debe ejecutarse.\nstorage: Es el directorio de almacenamiento de la aplicación y contiene archivos generados dinámicamente, como archivos de registro, caché, sesiones, etc.\ntests: Contiene los archivos de prueba para probar tu aplicación.\nvendor: Aquí se encuentran las dependencias de Composer y las bibliotecas de terceros utilizadas en el proyecto.\nEsta es solo una descripción básica de la estructura de un proyecto Laravel. A medida que trabajes con Laravel, explorarás más en profundidad cada una de estas carpetas y cómo se utilizan en el desarrollo de tu aplicación.\nLaravel video # Laravel estrucuta # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/06laravel/founda/","section":"Levels","summary":"Laravel # Introduccion Laravel # Laravel es un framework de desarrollo de aplicaciones web PHP de código abierto y altamente popular.","title":"Introduccion Laravel"},{"content":"NEXT.JS # Framework de JavaScript # Next.js se ha convertido en el framework de React para usar en producción, y ha quedado claro que con Next.js se pueden crear y desplegar rápidamente aplicaciones a gran escala y listas para usar en producción con Next.js.\nNext.js viene con características que garantizan que tu aplicación pase de cero a producción en muy poco tiempo, a la vez que ofrece una curva de aprendizaje fácil, simplicidad y potentes herramientas a tu disposición.\nNext.js amplía la biblioteca React original de Facebook y el paquete create-react-app para proporcionar un framework React extensible, fácil de usar y a prueba de producción.\n¿Qué Es Next.js? # Next.js es un framework de React que te permite construir sitios web y aplicaciones web estáticas supercargadas, amigables con el SEO y extremadamente orientadas al usuario, utilizando el framework de React. Next.js es conocido por la mejor experiencia de los desarrolladores a la hora de construir aplicaciones listas para usar en producción con todas las características que necesitas.\nDispone de renderizado híbrido estático y de servidor, compatibilidad con TypeScript, agrupación inteligente, precarga de rutas y mucho más, sin necesidad de configuración adicional.\nPor Qué Usar Next.js # Esta sección explorará por qué deberías aprender Next.js. También veremos las diferentes aplicaciones que puedes construir con Next.js.\nOptimizaciones de Imagen # Next.js proporciona optimizaciones de imagen automáticas con construcciones instantáneas. La optimización de imágenes es una potente función preintegrada en Next.js porque la gestión y optimización de imágenes requiere muchas configuraciones, y la optimización manual de imágenes puede suponer un peaje en tu tiempo productivo.\nInternacionalización # Otra gran característica añadida a Next.js es la internacionalización. La creación de una aplicación empresarial puede ser fácilmente utilizada y traducida a diferentes idiomas en todo el mundo. Esta característica es una gran incorporación a Next.js y hace que Next.js sea reconocido internacionalmente porque se necesita menos configuración para conseguir la internalización.\nAnálisis de Next.js # Next.js proporciona un panel de control analítico que puede configurarse para mostrar datos precisos de los visitantes y perspectivas de la página desde el primer momento. Con esta función, puedes crear rápidamente un panel de control analítico y obtener información valiosa sobre tus visitantes e información de la página sin necesidad de programación o configuración adicional.\nLo Que Puedes Construir # En Next.js, no hay límite para el tipo de aplicaciones que puedes desarrollar. Puedes desarrollar diferentes tipos de aplicaciones utilizando Next.js. Además, cualquier aplicación que elijas crear con Next.js seguirá teniendo todas las ventajas y características de Next.js sin necesidad de configuraciones adicionales por tu parte.\nA continuación se muestra la lista de tipos de aplicaciones que puedes crear con Next.js:\nMVP (Producto Mínimo Viable) Sitios web Jamstack Portales web Páginas web individuales Sitios web estáticos Productos SaaS Sitios web de comercio electrónico y de venta al por menor Paneles de control Aplicaciones web complejas y exigentes Interfaces de usuario interactivas ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia06/founda/","section":"Levels","summary":"NEXT.JS # Framework de JavaScript # Next.","title":"Introduccion Next.js"},{"content":"Consultas base de Datos php # Para realizar consultas a una base de datos desde PHP, necesitas utilizar una extensión como MySQLi o PDO que te permita conectarte y manipular la base de datos. A continuación, te muestro un ejemplo básico utilizando la extensión MySQLi:\nConexión a la base de datos: Primero, debes establecer una conexión con la base de datos utilizando la función mysqli_connect(). Aquí tienes un ejemplo:\n$servername = \u0026#34;localhost\u0026#34;; $username = \u0026#34;usuario\u0026#34;; $password = \u0026#34;contraseña\u0026#34;; $dbname = \u0026#34;nombre_base_datos\u0026#34;; $conn = mysqli_connect($servername, $username, $password, $dbname); if (!$conn) { die(\u0026#34;Error de conexión: \u0026#34; . mysqli_connect_error()); } Consulta SELECT: Para realizar una consulta SELECT a la base de datos, utilizas la función mysqli_query() para ejecutar la consulta y obtener un conjunto de resultados. Luego, puedes utilizar funciones como mysqli_fetch_assoc() o mysqli_fetch_array() para obtener los datos de cada fila. Aquí tienes un ejemplo:\n$sql = \u0026#34;SELECT * FROM usuarios\u0026#34;; $resultado = mysqli_query($conn, $sql); if (mysqli_num_rows($resultado) \u0026gt; 0) { while ($fila = mysqli_fetch_assoc($resultado)) { echo \u0026#34;ID: \u0026#34; . $fila[\u0026#34;id\u0026#34;] . \u0026#34;, Nombre: \u0026#34; . $fila[\u0026#34;nombre\u0026#34;] . \u0026#34;, Email: \u0026#34; . $fila[\u0026#34;email\u0026#34;] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } } else { echo \u0026#34;No se encontraron registros.\u0026#34;; } En este ejemplo, se seleccionan todos los registros de la tabla \u0026ldquo;usuarios\u0026rdquo; y se muestran los datos de cada fila.\nConsulta INSERT, UPDATE y DELETE: Para realizar consultas de inserción (INSERT), actualización (UPDATE) o eliminación (DELETE), utilizas la función mysqli_query() para ejecutar la consulta. Aquí tienes ejemplos:\n// Consulta INSERT $sql = \u0026#34;INSERT INTO usuarios (nombre, email) VALUES (\u0026#39;Juan\u0026#39;, \u0026#39;juan@example.com\u0026#39;)\u0026#34;; if (mysqli_query($conn, $sql)) { echo \u0026#34;Registro insertado correctamente.\u0026#34;; } else { echo \u0026#34;Error al insertar el registro: \u0026#34; . mysqli_error($conn); } // Consulta UPDATE $sql = \u0026#34;UPDATE usuarios SET nombre = \u0026#39;Pedro\u0026#39; WHERE id = 1\u0026#34;; if (mysqli_query($conn, $sql)) { echo \u0026#34;Registro actualizado correctamente.\u0026#34;; } else { echo \u0026#34;Error al actualizar el registro: \u0026#34; . mysqli_error($conn); } // Consulta DELETE $sql = \u0026#34;DELETE FROM usuarios WHERE id = 1\u0026#34;; if (mysqli_query($conn, $sql)) { echo \u0026#34;Registro eliminado correctamente.\u0026#34;; } else { echo \u0026#34;Error al eliminar el registro: \u0026#34; . mysqli_error($conn); } Estos son ejemplos básicos de cómo realizar consultas a una base de datos desde PHP utilizando MySQLi. Recuerda cerrar la conexión a la base de datos utilizando la función mysqli_close() cuando hayas terminado. También es importante tener en cuenta las buenas prácticas de seguridad, como utilizar consultas preparadas o escapar los datos para evitar ataques de inyección SQL.\nGet y Post en PHP # En PHP, puedes utilizar las superglobales $_GET y $_POST para acceder a los datos enviados desde un formulario HTML o desde la URL.\n$_GET: La superglobal $_GET se utiliza para acceder a los datos enviados a través de los parámetros de la URL. Los datos enviados a través de $_GET son visibles en la URL y tienen la siguiente estructura: http://example.com?parametro1=valor1\u0026amp;parametro2=valor2. Aquí tienes un ejemplo:\n// URL: http://example.com?nombre=Juan\u0026amp;edad=25 $nombre = $_GET[\u0026#39;nombre\u0026#39;]; $edad = $_GET[\u0026#39;edad\u0026#39;]; echo \u0026#34;Hola, $nombre. Tu edad es $edad años.\u0026#34;; En este ejemplo, se obtienen los valores de los parámetros nombre y edad desde la URL y se utilizan para mostrar un mensaje.\n$_POST: La superglobal $_POST se utiliza para acceder a los datos enviados a través de un formulario HTML utilizando el método POST. Los datos enviados a través de $_POST no son visibles en la URL y se envían en el cuerpo de la solicitud HTTP. Aquí tienes un ejemplo:\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;procesar.php\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;nombre\u0026#34; placeholder=\u0026#34;Nombre\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; name=\u0026#34;edad\u0026#34; placeholder=\u0026#34;Edad\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Enviar\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; // procesar.php $nombre = $_POST[\u0026#39;nombre\u0026#39;]; $edad = $_POST[\u0026#39;edad\u0026#39;]; echo \u0026#34;Hola, $nombre. Tu edad es $edad años.\u0026#34;; En este ejemplo, los datos ingresados en el formulario se envían al archivo procesar.php utilizando el método POST. En procesar.php, se obtienen los valores de los campos nombre y edad utilizando $_POST y se muestra un mensaje.\nEs importante tener en cuenta que tanto $_GET como $_POST contienen los datos tal como son enviados, por lo que es recomendable utilizar funciones de saneamiento y validación para evitar problemas de seguridad y errores en el código.\nConsultas base de Datos php video # Get y Post en PHP video # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/05php/rout/","section":"Levels","summary":"Consultas base de Datos php # Para realizar consultas a una base de datos desde PHP, necesitas utilizar una extensión como MySQLi o PDO que te permita conectarte y manipular la base de datos.","title":"Consultas base de Datos php"},{"content":"Consultas base de Datos php # Para realizar consultas a una base de datos desde PHP, necesitas utilizar una extensión como MySQLi o PDO que te permita conectarte y manipular la base de datos. A continuación, te muestro un ejemplo básico utilizando la extensión MySQLi:\nConexión a la base de datos: Primero, debes establecer una conexión con la base de datos utilizando la función mysqli_connect(). Aquí tienes un ejemplo:\n$servername = \u0026#34;localhost\u0026#34;; $username = \u0026#34;usuario\u0026#34;; $password = \u0026#34;contraseña\u0026#34;; $dbname = \u0026#34;nombre_base_datos\u0026#34;; $conn = mysqli_connect($servername, $username, $password, $dbname); if (!$conn) { die(\u0026#34;Error de conexión: \u0026#34; . mysqli_connect_error()); } Consulta SELECT: Para realizar una consulta SELECT a la base de datos, utilizas la función mysqli_query() para ejecutar la consulta y obtener un conjunto de resultados. Luego, puedes utilizar funciones como mysqli_fetch_assoc() o mysqli_fetch_array() para obtener los datos de cada fila. Aquí tienes un ejemplo:\n$sql = \u0026#34;SELECT * FROM usuarios\u0026#34;; $resultado = mysqli_query($conn, $sql); if (mysqli_num_rows($resultado) \u0026gt; 0) { while ($fila = mysqli_fetch_assoc($resultado)) { echo \u0026#34;ID: \u0026#34; . $fila[\u0026#34;id\u0026#34;] . \u0026#34;, Nombre: \u0026#34; . $fila[\u0026#34;nombre\u0026#34;] . \u0026#34;, Email: \u0026#34; . $fila[\u0026#34;email\u0026#34;] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } } else { echo \u0026#34;No se encontraron registros.\u0026#34;; } En este ejemplo, se seleccionan todos los registros de la tabla \u0026ldquo;usuarios\u0026rdquo; y se muestran los datos de cada fila.\nConsulta INSERT, UPDATE y DELETE: Para realizar consultas de inserción (INSERT), actualización (UPDATE) o eliminación (DELETE), utilizas la función mysqli_query() para ejecutar la consulta. Aquí tienes ejemplos:\n// Consulta INSERT $sql = \u0026#34;INSERT INTO usuarios (nombre, email) VALUES (\u0026#39;Juan\u0026#39;, \u0026#39;juan@example.com\u0026#39;)\u0026#34;; if (mysqli_query($conn, $sql)) { echo \u0026#34;Registro insertado correctamente.\u0026#34;; } else { echo \u0026#34;Error al insertar el registro: \u0026#34; . mysqli_error($conn); } // Consulta UPDATE $sql = \u0026#34;UPDATE usuarios SET nombre = \u0026#39;Pedro\u0026#39; WHERE id = 1\u0026#34;; if (mysqli_query($conn, $sql)) { echo \u0026#34;Registro actualizado correctamente.\u0026#34;; } else { echo \u0026#34;Error al actualizar el registro: \u0026#34; . mysqli_error($conn); } // Consulta DELETE $sql = \u0026#34;DELETE FROM usuarios WHERE id = 1\u0026#34;; if (mysqli_query($conn, $sql)) { echo \u0026#34;Registro eliminado correctamente.\u0026#34;; } else { echo \u0026#34;Error al eliminar el registro: \u0026#34; . mysqli_error($conn); } Estos son ejemplos básicos de cómo realizar consultas a una base de datos desde PHP utilizando MySQLi. Recuerda cerrar la conexión a la base de datos utilizando la función mysqli_close() cuando hayas terminado. También es importante tener en cuenta las buenas prácticas de seguridad, como utilizar consultas preparadas o escapar los datos para evitar ataques de inyección SQL.\nGet y Post en PHP # En PHP, puedes utilizar las superglobales $_GET y $_POST para acceder a los datos enviados desde un formulario HTML o desde la URL.\n$_GET: La superglobal $_GET se utiliza para acceder a los datos enviados a través de los parámetros de la URL. Los datos enviados a través de $_GET son visibles en la URL y tienen la siguiente estructura: http://example.com?parametro1=valor1\u0026amp;parametro2=valor2. Aquí tienes un ejemplo:\n// URL: http://example.com?nombre=Juan\u0026amp;edad=25 $nombre = $_GET[\u0026#39;nombre\u0026#39;]; $edad = $_GET[\u0026#39;edad\u0026#39;]; echo \u0026#34;Hola, $nombre. Tu edad es $edad años.\u0026#34;; En este ejemplo, se obtienen los valores de los parámetros nombre y edad desde la URL y se utilizan para mostrar un mensaje.\n$_POST: La superglobal $_POST se utiliza para acceder a los datos enviados a través de un formulario HTML utilizando el método POST. Los datos enviados a través de $_POST no son visibles en la URL y se envían en el cuerpo de la solicitud HTTP. Aquí tienes un ejemplo:\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;procesar.php\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;nombre\u0026#34; placeholder=\u0026#34;Nombre\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; name=\u0026#34;edad\u0026#34; placeholder=\u0026#34;Edad\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Enviar\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; // procesar.php $nombre = $_POST[\u0026#39;nombre\u0026#39;]; $edad = $_POST[\u0026#39;edad\u0026#39;]; echo \u0026#34;Hola, $nombre. Tu edad es $edad años.\u0026#34;; En este ejemplo, los datos ingresados en el formulario se envían al archivo procesar.php utilizando el método POST. En procesar.php, se obtienen los valores de los campos nombre y edad utilizando $_POST y se muestra un mensaje.\nEs importante tener en cuenta que tanto $_GET como $_POST contienen los datos tal como son enviados, por lo que es recomendable utilizar funciones de saneamiento y validación para evitar problemas de seguridad y errores en el código.\nConsultas base de Datos php video # Get y Post en PHP video # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/05optimizaciones/rout/","section":"Levels","summary":"Consultas base de Datos php # Para realizar consultas a una base de datos desde PHP, necesitas utilizar una extensión como MySQLi o PDO que te permita conectarte y manipular la base de datos.","title":"Consultas base de Datos php"},{"content":"¿Qué es React Router? # React Router es una colección de componentes de navegación la cual podemos usar como ya lo mencione tanto en web o en móvil con React Native. Con esta librearía vamos a obtener un enrutamiento dinámico gracias a los componentes, en otras palabras tenemos unas rutas que renderizan un componente.\nBeneficios de React Router # Establecer rutas en nuestra aplicación ej: Home, About, User. # Realizar redirecciones # Acceso al historial del navegador # Manejo de rutas con parámetros # Páginas para el manejo de errores como 404 Componentes pilares de React Router # BrowserRouter # Este componente es el encargado de envolver nuestra aplicación dándonos acceso al API historial de HTML5 (pushState, replaceState y el evento popstate) para mantener su UI sincronizada con la URL.\nSwitch # Este componente es el encargado de que solo se renderice el primer hijo Route o Redirect que coincide con la ubicación. Si no usar este componente todos los componentes Route o Redirect se van a renderizar mientras cumplan con la condición establecida.\nRoute # Con Route podemos definir las rutas de nuestra aplicación, quizás sea el componente más importante de React Router para llegar a comprender todo el manejo de esta librería. Cuando definimos una ruta con Route le indicamos que componente debe renderizar.\nEste componente cuanta con algunas propiedades.\nPath: # la ruta donde debemos renderizar nuestro componente podemos pasar un string o un array de string.\nExact: # Solo vamos a mostrar nuestro componente cuando la ruta sea exacta. Ej: /home === /home.\nStrict: # Solo vamos a mostrar nuestro componente si al final de la ruta tiene un slash. Ej: /home/ === /home/\nSensitive: # Si le pasamos true vamos a tener en cuenta las mayúsculas y las minúsculas de nuestras rutas. Ej: /Home === /Home\nComponent: # Le pasamos un componente para renderizar solo cuando la ubicación coincide. En este caso el componente se monta y se desmonta no se actualiza.\nRender: # Le pasamos una función para montar el componente en línea.\nRequisitos # Tener instalado node.js puede usar nvm para gestionar varias versiones de node.js, yo voy a usar la versión v10.15.3, npm o yarn manejo básico de la terminal, un editor de código como VScode, tener conocimiento básico de React.\nCreando nuestro proyecto # Para crear nuestro proyecto como lo mencione antes vamos a usar create-react-app para eso ejecutamos el siguiente comando en la terminal.\nnpx create-react-app routes-react\nEsperamos que instale y cree nuestro proyecto y accedemos desde la terminal con: cd routes-react\nAbrimos nuestro editor de código si estas usando VScode puede usar la terminal parado en la raíz de nuestro proyecto usamos code . para abrirlo desde VScode.\nSi queremos probar nuestro proyecto podemos correr npm start o yarn start desde la terminal. Hasta el momento tenemos un proyecto de react listo para modificar y agregar nuestros componentes e instalar React Router.\nInstalación de React Router # Para instalar la librería solo tenemos que ir a la terminal estar ubicados en la raíz de nuestro proyecto y ejecutar el siguiente comando.\nnpm install react-router-dom\nyarn add react-router-dom Trabajando con React Router\nTeniendo todo listo ahora si vamos a nuestro editor de código y abrimos el archivo App.js que está ubicado en src/App.js acá vamos a limpiar muchas cosas hasta que al final tengamos algo como el siguiente código.\nimport React from \u0026lsquo;react\u0026rsquo;; import \u0026lsquo;./App.css\u0026rsquo;; import { BrowserRouter as Router, Route } from \u0026ldquo;react-router-dom\u0026rdquo;; import Home from \u0026lsquo;./pages/Home\u0026rsquo;\nfunction App() { return ( ); }\nexport default App;\nImportamos nuestro componente BrowserRouter le damos un nombre Router también importamos Route de react-router-dom. Envolvemos nuestra aplicación con Router y definimos nuestra primera ruta en este caso nuestro home le indicamos que debe ser exacta la ruta y que haga render de nuestro componente Home pero donde esta nuestro componente Home bueno vamos a crearlo.\n// Home.js import React from \u0026lsquo;react\u0026rsquo;\nconst Home = () =\u0026gt; (\nHello Home ) export default Home\nEste es nuestro componente Home que está dentro de una carpeta llamada pages/Home y solo tenemos un h3 con un texto. Si vamos al navegador a http://localhost:3000/ vamos a ver solo el texto. Hello Home\nAhora vamos a crear otras páginas y una página para manejar el error 404.\n// App.js import React from \u0026lsquo;react\u0026rsquo;; import \u0026lsquo;./App.css\u0026rsquo;; import { BrowserRouter as Router, Route, } from \u0026ldquo;react-router-dom\u0026rdquo;; import Home from \u0026lsquo;./pages/Home\u0026rsquo; import About from \u0026lsquo;./pages/About\u0026rsquo; import PageNotFound from \u0026lsquo;./pages/PageNotFound\u0026rsquo;\nfunction App() { return ( ); }\nexport default App;\nSi vamos al navegador después de agregar estas nuevas rutas vamos a tener un pequeño problema y es que también vamos a tener el render de nuestro componente PageNotFound para solucionar esto lo que tenemos que hacer es envolver nuestras rutas con el componente Switch. Hello PageNotFound\n","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia05/rout/","section":"Levels","summary":"¿Qué es React Router?","title":"React Router"},{"content":"Componentes con estado / sin estado # Para comenzar queremos analizar estos dos conceptos en contraposición. Cuando empezamos con React pueden provocar dudas, pero realmente es sencillo. Básicamente, la diferencia entre componentes con o sin estado estriba en que los componentes con estado permiten mantener datos propios a lo largo del tiempo e implementar comportamientos en sus diferentes métodos del ciclo de vida. Componentes sin estado\nLos componentes sin estado no guardan ninguna información y por ello no necesitan de datos locales. Todos los componentes implementados hasta el momento eran stateless, sin estado. Eso no significa que no puedan personalizar su comportamiento, lo que se consigue con la ayuda de las propiedades de los componentes. Estas propiedades que nos pasan se podrán incluso transformar al producir una salida, de modo que sea acorde con las necesidades, pero no se guardará ningún valor y el componente no tendrá un ciclo de vida. Nota: El ciclo de vida de los componentes es algo que todavía no hemos abordado. Más adelante hablaremos de él, porque entenderlo es muy importante en React. Ejemplo de componente sin estado\nPara que quede más claro, esto sería una implementación de componente sin estado que recibe un timestamp como propiedad y genera una vista donde ese instante se muestra convertido en una fecha en español.\nimport React from \u0026#39;react\u0026#39;; export default function (props) { var date = new Date(parseInt(props.timestamp, 10)); var fecha = date.getDate() + \u0026#39;/\u0026#39; + (date.getMonth() + 1) + \u0026#39;/\u0026#39; + date.getFullYear(); return ( \u0026lt;span\u0026gt;{fecha}\u0026lt;/span\u0026gt; ); } Este componente se podría usar importándolo y luego colocando la etiqueta correspondiente. Me parece interesante mostrar cómo se usaría porque el componente en sí, tal como se ha definido, no tiene nombre. El nombre se lo asignamos a la hora de importarlo. Nota: El estilo anterior para la creación del componente se conoce en React como \u0026ldquo;stateless function component\u0026rdquo;. Es una alternativa a la creación del componente a partir de una clase, que solo podemos usar para los componentes sin estado.\nimport React, { Component } from \u0026#39;react\u0026#39; import TimestampToDate from \u0026#39;./utils/TimestampToDate\u0026#39; class App extends Component { render() { return ( \u0026lt;TimestampToDate timestamp={1475700297974} /\u0026gt; ); } } Otro detalle interesante aquí es la forma como le pasamos un valor numérico a un componente. Dentro del componente la propiedad timestamp se esperaría que fuera un entero y para que así sea tenemos que indicarle el valor sin comillas. Lo metemos entre llaves porque si no le colocas comillas JSX te obliga a que sea una expresión Javascript. Esa expresión se evalúa como un número entero.\nCon este ejemplo queremos dejar claro que las propiedades de los componentes se pueden manipular para transformarlas en cualquier otro dato. Pero atención, en los componentes stateless las propiedades debemos tratarlas como valores de solo lectura, para evitar posibles situaciones inesperadas.. Si queremos manipular las propiedades y transformarlas en otra cosa lo más normal es guardemos los datos nuevos generados como variables, o estado si fuera necesario. Incluso, si solo se trata de una transformación sencilla para visualizar en la vista, podrías incluirla como una expresión Javascript embebida entre llaves dentro del JSX, aunque por claridad del código es preferible crear variables locales para generar esos cambios, como en el ejemplo anterior. En todo caso, quédate con que las propiedades deben trabajar como solo lectura. Componentes con estado\nLos componentes con estado son aquellos que almacenan datos de manera local al componente. Estos datos pueden variar variar a lo largo del tiempo bajo diversas circunstancias, por ejemplo por la interacción del usuario con el componente. Este tipo de componentes tienen algunas particularidades y posibilidades por encima de los componentes sin estadao que veremos a continuación.\nUn ejemplo de componente con estado podría ser un contador. Ese contador puede incrementarse o decrementarse. Incluso podrían pasarnos como propiedad el valor inicial del contador, pero el valor actual de la cuenta lo guardaremos en el estado. Otro ejemplo podría ser un componente que se conecte con un API Rest. A este componente le podemos pasar como propiedad la URL del API y una serie de parámetros para realizar la solicitud al servidor. Una vez que recibamos los datos lo común será almacenarlos como estado del componente, para usarlos como sea necesario.\nEl componente podrá además reaccionar al cambio de estado, de modo que actualice su vista cuando sea necesario. Eso lo veremos cuando analicemos el ciclo de vida de los componentes. Código necesario para implementar componente con estado\nSeguro que estarás deseando ver ya un componente con estado. Enseguida nos ponemos con ello, pero quiero que veamos antes el código de \u0026ldquo;boilerplate\u0026rdquo; para crear un componente con estado.\nimport React from \u0026#39;react\u0026#39; export default class Contador extends React.Component { constructor(...args) { super(...args) } render() { return ( \u0026lt;div\u0026gt;Esto aun no tiene estado!\u0026lt;/div\u0026gt; ) } } Lo primero decir que este componente todavía no tiene un estado implementado, es solo un código de partida para ver un par de cosas.\nComo primer detalle no estamos importando implícitamente la clase Component, para hacer el extends. No es problema porque depende de React. Así que ahora estamos haciendo \u0026ldquo;extends React.Component\u0026rdquo;, lo que es perfectamente válido. Esto no tiene mucho que ver con el tema que nos ocupa, de los estados, pero así vemos más variantes de codificación.\nMás relevante en el código anterior es el constructor. En este boilerplate la verdad es que el constructor no sirve para nada, porque realmente no hemos inicializado nada (como sabes, los constructores resumen las tareas de inicialización de los objetos). En este caso simplemente estamos llamando al constructor de la clase padre, super(), pasándole los mismos argumentos que nos pasaron a nosotros. Nota: Eso de \u0026ldquo;\u0026hellip;args\u0026rdquo; es una desestructuración, algo que nos viene de ES6, que permite en este caso recibir todos los argumentos o parámetros enviados a una función, sin necesidad de indicarlos uno a uno. Puedes obtener más información en el Manual de ES6, artículos del operador Rest y el operador Spread.\nGeneralmente en los componentes que tienen estado necesitamos inicializarlo, por lo que el sitio más correcto sería el constructor. Si realizamos un constructor tenemos que asegurarnos que se invoque al constructor de la clase padre, que realiza una serie de tareas genéricas para todos los componentes de React. Como esa invocación hay que hacerla explícita al sobreescribir el constructor, nos obliga a escribir la llamada a super(). Enseguida veremos cómo inicializar el estado, pero he querido mostrar ese código, aún sin la inicialización, para comentar este detalle del constructor.\nEn el boilerplate encuentras también el método render(), que ya sabemos que es el que nos sirve para definir la representación del componente. Ejemplo de componente con estado\nAhora veamos ya una implementación de un componente completo con estado. En nuestro ejemplo vamos a crear el típico del contador. El valor actual del contador será nuestro estado y lo tendremos que inicializar en el constructor.\nimport React from \u0026#39;react\u0026#39; export default class Contador extends React.Component { constructor(...args) { super(...args) this.state = { contador: 0 } } render() { return ( \u0026lt;div\u0026gt;Cuenta actual: {this.state.contador}\u0026lt;/div\u0026gt; ) } } Ahora nuestro constructor ya tiene sentido, porque está realizando la inicialización de la propiedad \u0026ldquo;state\u0026rdquo; del componente. Como puedes ver el estado es un objeto, en el que ponemos tantos atributos como sea necesarios guardar como estado.\nA la hora de renderizar el componente, por supuesto, podremos usar el estado para mostrar la salida. En este caso puedes ver cómo se vuelca el estado en la vista, con la expresión {this.state.contador}. Algo muy parecido a lo que hacíamos con las propiedades, solo que ahora los datos nos llegan del estado.\nSolo nos falta implementar un botón para incrementar ese contador para ello tenemos que entrar en un tema nuevo, que son los eventos. Veamos el siguiente código.\nimport React from \u0026#39;react\u0026#39; export default class Contador extends React.Component { constructor(...args) { super(...args) this.state = { contador: 0 } } incrementar() { this.setState({ contador: this.state.contador + 1 }) } render() { return ( \u0026lt;div\u0026gt; \u0026lt;span\u0026gt;Cuenta actual: {this.state.contador}\u0026lt;/span\u0026gt; \u0026lt;button onClick={this.incrementar.bind(this)}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ) } } Ahora tenemos un botón y al hacer clic sobre él se invocará a la función incrementar(). Sin querer entrar en demasiados detalles sobre eventos, pues no es el asunto de este artículo, cabe decir que se pueden definir como si fueran atributos de los elementos o componentes. Como valor le colocamos su manejador de eventos. Además el \u0026ldquo;bind(this)\u0026rdquo; lo hacemos para bindear el contexto. Sobre eventos hablaremos más adelante.\nLo que es interesante, para lo que respecta al estado, está en el manejador de evento incrementar(). Este usa el método setState() para modificar el estado. El detalle que no se te puede escapar es que, para manipular el estado no se debe modificar \u0026ldquo;a pelo\u0026rdquo; (a mano) la propiedad this.state, sino que tenemos que hacerlo a través de this.setState(). El motivo es que setState(), además de alterar el estado, desencadena toda una serie de acciones implementadas en el core de React, que se encargan de realizar todo el trabajo por debajo para que ese cambio de estado tenga una representación en la vista.\nDicho de otra manera, en el momento que cambiemos el estado con setState(), se pone en ejecución el motor de React para que se actualice el DOM virtual, se compare con el DOM del navegador y por último se actualicen aquellos elementos que sea necesario (porque realmente hayan cambiado). Si no usamos setState() todas esas operativas no se producirían y los componentes empezarían a funcionar de manera no deseada. Asincronía en la manipulación del estado\nHay un detalle extra que no queremos dejar pasar, sobre la asincronía en el manejo del estado por parte de React. Resulta que React, por motivos de rendimiento, puede llegar a acumular varias llamadas a setState, para procesarlas en un mismo instante.\nLo anterior significa que this.state puede ser actualizado de manera asíncrona. Es decir, this.setState() puede no ejecutarse inmediatamente, sino esperar a que React juzgue oportuno hacer las actualizaciones del estado. Esto podría resultar en una situación complicada de resolver, cuando el cálculo del nuevo valor del estado necesita basarse en el estado que haya anteriormente.\nincrementar() { this.setState({ contador: this.state.contador + 1 }) } En el código del método incrementar anterior, nos basamos en el estado actual del contador, para incrementarlo en una unidad. Sin embargo, si no sabemos realmente cuándo se va a ejecutar this.setState. Por ello, podría ocurrir que ese incremento se realice a partir de un valor del estado que no era realmente el válido.\nPara resolver esta situación en React se puede usar un mecanismo de manipulación del estado basado en una función. Veamos el código para clarificarlo un poco.\nincrementar() { this.setState(prevState =\u0026gt; { return { counter: prevState.counter + 1}; }); }\nComo puedes ver, en lugar de enviarle un objeto a setState() le estamos enviando una función. Esa función es capaz de recibir como parámetro el estado actual. Entonces, el nuevo estado lo calculo en función del estado actual.\nSi habías probado ejemplos anteriores en los que no habías tenido problemas con el cálculo del estado es normal. Aunque sea asíncrona la actualización del estado es muy rápida, por lo que es fácil no percibir ningún comportamiento anómalo. Simplemente tenlo en cuenta como una buena práctica en React. Conclusión\nDe momento hemos dado bastante información sobre el estado de los componentes, hemos podido distinguir componentes con estado y componentes sin estado, y aunque todavía nos quedan cosas que aprender, hemos podido ver ejemplos para hacernos una idea de cada tipo de componente.\nEn futuros artículos tenemos que abordar otros asuntos clave, como la inicialización de propiedades y estado ante diversos estilos de codificación, así como el ciclo de vida de los componentes, que es necesario conocer a fondo para resolver muchas de las necesidades de desarrollo en React.\nvideo Componentes # ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia04/vistas/","section":"Levels","summary":"Componentes con estado / sin estado # Para comenzar queremos analizar estos dos conceptos en contraposición.","title":"Componentes con estado"},{"content":"Funciones y Estructuras de Datos con PHP # En PHP, puedes utilizar funciones predefinidas y también crear tus propias funciones para realizar tareas específicas. Además, hay diversas estructuras de datos incorporadas que te permiten organizar y manipular información de manera eficiente. A continuación, te muestro ejemplos de funciones comunes y estructuras de datos en PHP:\nFunciones: Puedes utilizar funciones predefinidas de PHP y crear tus propias funciones para modularizar tu código y reutilizarlo en diferentes partes de tu programa. Aquí tienes ejemplos:\n// Función predefinida: strlen() $longitud = strlen(\u0026#34;Hola, mundo\u0026#34;); // Devuelve la longitud de una cadena // Función predefinida: strtolower() $cadena = \u0026#34;Hola, mundo\u0026#34;; $cadenaMinusculas = strtolower($cadena); // Convierte una cadena a minúsculas // Función personalizada: suma() function suma($a, $b) { return $a + $b; } $resultado = suma(5, 3); // Llama a la función personalizada echo $longitud; // Salida: 11 echo $cadenaMinusculas; // Salida: hola, mundo echo $resultado; // Salida: 8 Estructuras de Datos: PHP proporciona diferentes estructuras de datos integradas para organizar y manipular información de manera eficiente. Aquí tienes ejemplos de algunas estructuras de datos comunes:\nArrays: Los arrays son estructuras de datos que pueden contener múltiples elementos en una sola variable.\n// Array numérico $numeros = [1, 2, 3, 4, 5]; // Array asociativo $persona = [ \u0026#34;nombre\u0026#34; =\u0026gt; \u0026#34;Juan\u0026#34;, \u0026#34;edad\u0026#34; =\u0026gt; 30, \u0026#34;ciudad\u0026#34; =\u0026gt; \u0026#34;México\u0026#34; ]; echo $numeros[0]; // Acceder a un elemento del array numérico (Salida: 1) echo $persona[\u0026#34;nombre\u0026#34;]; // Acceder a un elemento del array asociativo (Salida: Juan) Listas Enlazadas: PHP no tiene una estructura de datos específica llamada \u0026ldquo;listas enlazadas\u0026rdquo; incorporada en su biblioteca estándar, pero puedes crear una lista enlazada utilizando clases personalizadas.\nclass Nodo { public $valor; public $siguiente; public function __construct($valor) { $this-\u0026gt;valor = $valor; $this-\u0026gt;siguiente = null; } } $nodo1 = new Nodo(1); $nodo2 = new Nodo(2); $nodo3 = new Nodo(3); $nodo1-\u0026gt;siguiente = $nodo2; $nodo2-\u0026gt;siguiente = $nodo3; echo $nodo1-\u0026gt;valor; // Salida: 1 echo $nodo1-\u0026gt;siguiente-\u0026gt;valor; // Salida: 2 echo $nodo1-\u0026gt;siguiente-\u0026gt;siguiente-\u0026gt;valor; // Salida: 3 Estos son solo ejemplos básicos de funciones y estructuras de datos en PHP. PHP ofrece una amplia variedad de funciones y estructuras de datos predefinidas, así como la capacidad de crear tus propias funciones y estructuras personalizadas según tus necesidades. Puedes explorar la documentación oficial de PHP para obtener más información sobre las funciones y estructuras de datos disponibles.\nProgramacion Orientada a Objetos # En PHP, puedes utilizar la programación orientada a objetos (POO) para estructurar y organizar tu código de manera más eficiente. La POO se basa en el concepto de objetos, que son instancias de clases, y permite la encapsulación, la herencia y el polimorfismo. A continuación, te muestro un ejemplo básico de cómo utilizar la programación orientada a objetos en PHP:\nClases y Objetos: Una clase es una plantilla o un plano para crear objetos. Define propiedades y métodos que los objetos de esa clase tendrán. Para crear un objeto, utilizamos el operador new. Aquí tienes un ejemplo:\nclass Persona { public $nombre; public $edad; public function saludar() { echo \u0026#34;Hola, mi nombre es \u0026#34; . $this-\u0026gt;nombre; } } $persona1 = new Persona(); $persona1-\u0026gt;nombre = \u0026#34;Juan\u0026#34;; $persona1-\u0026gt;edad = 30; $persona1-\u0026gt;saludar(); // Salida: Hola, mi nombre es Juan En este ejemplo, la clase Persona tiene dos propiedades: $nombre y $edad, y un método llamado saludar() que muestra un mensaje de saludo.\nEncapsulación: La encapsulación se refiere a la protección de las propiedades y métodos dentro de una clase para evitar su acceso directo desde fuera de la clase. Puedes utilizar los modificadores de acceso como public, private y protected para controlar la visibilidad de las propiedades y métodos. Aquí tienes un ejemplo:\nclass Persona { private $nombre; public $edad; public function setNombre($nombre) { $this-\u0026gt;nombre = $nombre; } public function getNombre() { return $this-\u0026gt;nombre; } } $persona1 = new Persona(); $persona1-\u0026gt;setNombre(\u0026#34;Juan\u0026#34;); $persona1-\u0026gt;edad = 30; echo $persona1-\u0026gt;getNombre(); // Salida: Juan En este ejemplo, la propiedad $nombre está declarada como private, lo que significa que solo se puede acceder a ella desde dentro de la clase utilizando los métodos setNombre() y getNombre(). La propiedad $edad está declarada como public, lo que permite acceder a ella directamente desde fuera de la clase.\nHerencia: La herencia te permite crear nuevas clases basadas en una clase existente. La clase derivada hereda las propiedades y métodos de la clase base y puede agregar sus propios métodos o propiedades adicionales. Aquí tienes un ejemplo:\nclass Persona { public $nombre; public function saludar() { echo \u0026#34;Hola, mi nombre es \u0026#34; . $this-\u0026gt;nombre; } } class Estudiante extends Persona { public $grado; public function estudiar() { echo \u0026#34;Soy estudiante de grado \u0026#34; . $this-\u0026gt;grado; } } $estudiante1 = new Estudiante(); $estudiante1-\u0026gt;nombre = \u0026#34;Juan\u0026#34;; $estudiante1-\u0026gt;grado = \u0026#34;10mo\u0026#34;; $estudiante1-\u0026gt;saludar(); // Salida: Hola, mi nombre es Juan $estudiante1-\u0026gt;estudiar(); // Salida: Soy estudiante de grado 10mo En este ejemplo, la clase Estudiante hereda de la clase Persona y agrega su propia propiedad $grado y su método `estudiar()\nFunciones y Estructuras de Datos con PHP # Programacion orientada a objetos php # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/04php/vistas/","section":"Levels","summary":"Funciones y Estructuras de Datos con PHP # En PHP, puedes utilizar funciones predefinidas y también crear tus propias funciones para realizar tareas específicas.","title":"Funciones y Estructuras de Datos con PHP"},{"content":"Funciones y Estructuras de Datos con PHP # En PHP, puedes utilizar funciones predefinidas y también crear tus propias funciones para realizar tareas específicas. Además, hay diversas estructuras de datos incorporadas que te permiten organizar y manipular información de manera eficiente. A continuación, te muestro ejemplos de funciones comunes y estructuras de datos en PHP:\nFunciones: Puedes utilizar funciones predefinidas de PHP y crear tus propias funciones para modularizar tu código y reutilizarlo en diferentes partes de tu programa. Aquí tienes ejemplos:\n// Función predefinida: strlen() $longitud = strlen(\u0026#34;Hola, mundo\u0026#34;); // Devuelve la longitud de una cadena // Función predefinida: strtolower() $cadena = \u0026#34;Hola, mundo\u0026#34;; $cadenaMinusculas = strtolower($cadena); // Convierte una cadena a minúsculas // Función personalizada: suma() function suma($a, $b) { return $a + $b; } $resultado = suma(5, 3); // Llama a la función personalizada echo $longitud; // Salida: 11 echo $cadenaMinusculas; // Salida: hola, mundo echo $resultado; // Salida: 8 Estructuras de Datos: PHP proporciona diferentes estructuras de datos integradas para organizar y manipular información de manera eficiente. Aquí tienes ejemplos de algunas estructuras de datos comunes:\nArrays: Los arrays son estructuras de datos que pueden contener múltiples elementos en una sola variable.\n// Array numérico $numeros = [1, 2, 3, 4, 5]; // Array asociativo $persona = [ \u0026#34;nombre\u0026#34; =\u0026gt; \u0026#34;Juan\u0026#34;, \u0026#34;edad\u0026#34; =\u0026gt; 30, \u0026#34;ciudad\u0026#34; =\u0026gt; \u0026#34;México\u0026#34; ]; echo $numeros[0]; // Acceder a un elemento del array numérico (Salida: 1) echo $persona[\u0026#34;nombre\u0026#34;]; // Acceder a un elemento del array asociativo (Salida: Juan) Listas Enlazadas: PHP no tiene una estructura de datos específica llamada \u0026ldquo;listas enlazadas\u0026rdquo; incorporada en su biblioteca estándar, pero puedes crear una lista enlazada utilizando clases personalizadas.\nclass Nodo { public $valor; public $siguiente; public function __construct($valor) { $this-\u0026gt;valor = $valor; $this-\u0026gt;siguiente = null; } } $nodo1 = new Nodo(1); $nodo2 = new Nodo(2); $nodo3 = new Nodo(3); $nodo1-\u0026gt;siguiente = $nodo2; $nodo2-\u0026gt;siguiente = $nodo3; echo $nodo1-\u0026gt;valor; // Salida: 1 echo $nodo1-\u0026gt;siguiente-\u0026gt;valor; // Salida: 2 echo $nodo1-\u0026gt;siguiente-\u0026gt;siguiente-\u0026gt;valor; // Salida: 3 Estos son solo ejemplos básicos de funciones y estructuras de datos en PHP. PHP ofrece una amplia variedad de funciones y estructuras de datos predefinidas, así como la capacidad de crear tus propias funciones y estructuras personalizadas según tus necesidades. Puedes explorar la documentación oficial de PHP para obtener más información sobre las funciones y estructuras de datos disponibles.\nProgramacion Orientada a Objetos # En PHP, puedes utilizar la programación orientada a objetos (POO) para estructurar y organizar tu código de manera más eficiente. La POO se basa en el concepto de objetos, que son instancias de clases, y permite la encapsulación, la herencia y el polimorfismo. A continuación, te muestro un ejemplo básico de cómo utilizar la programación orientada a objetos en PHP:\nClases y Objetos: Una clase es una plantilla o un plano para crear objetos. Define propiedades y métodos que los objetos de esa clase tendrán. Para crear un objeto, utilizamos el operador new. Aquí tienes un ejemplo:\nclass Persona { public $nombre; public $edad; public function saludar() { echo \u0026#34;Hola, mi nombre es \u0026#34; . $this-\u0026gt;nombre; } } $persona1 = new Persona(); $persona1-\u0026gt;nombre = \u0026#34;Juan\u0026#34;; $persona1-\u0026gt;edad = 30; $persona1-\u0026gt;saludar(); // Salida: Hola, mi nombre es Juan En este ejemplo, la clase Persona tiene dos propiedades: $nombre y $edad, y un método llamado saludar() que muestra un mensaje de saludo.\nEncapsulación: La encapsulación se refiere a la protección de las propiedades y métodos dentro de una clase para evitar su acceso directo desde fuera de la clase. Puedes utilizar los modificadores de acceso como public, private y protected para controlar la visibilidad de las propiedades y métodos. Aquí tienes un ejemplo:\nclass Persona { private $nombre; public $edad; public function setNombre($nombre) { $this-\u0026gt;nombre = $nombre; } public function getNombre() { return $this-\u0026gt;nombre; } } $persona1 = new Persona(); $persona1-\u0026gt;setNombre(\u0026#34;Juan\u0026#34;); $persona1-\u0026gt;edad = 30; echo $persona1-\u0026gt;getNombre(); // Salida: Juan En este ejemplo, la propiedad $nombre está declarada como private, lo que significa que solo se puede acceder a ella desde dentro de la clase utilizando los métodos setNombre() y getNombre(). La propiedad $edad está declarada como public, lo que permite acceder a ella directamente desde fuera de la clase.\nHerencia: La herencia te permite crear nuevas clases basadas en una clase existente. La clase derivada hereda las propiedades y métodos de la clase base y puede agregar sus propios métodos o propiedades adicionales. Aquí tienes un ejemplo:\nclass Persona { public $nombre; public function saludar() { echo \u0026#34;Hola, mi nombre es \u0026#34; . $this-\u0026gt;nombre; } } class Estudiante extends Persona { public $grado; public function estudiar() { echo \u0026#34;Soy estudiante de grado \u0026#34; . $this-\u0026gt;grado; } } $estudiante1 = new Estudiante(); $estudiante1-\u0026gt;nombre = \u0026#34;Juan\u0026#34;; $estudiante1-\u0026gt;grado = \u0026#34;10mo\u0026#34;; $estudiante1-\u0026gt;saludar(); // Salida: Hola, mi nombre es Juan $estudiante1-\u0026gt;estudiar(); // Salida: Soy estudiante de grado 10mo En este ejemplo, la clase Estudiante hereda de la clase Persona y agrega su propia propiedad $grado y su método `estudiar()\nFunciones y Estructuras de Datos con PHP # Programacion orientada a objetos php # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/04navegaciones/vistas/","section":"Levels","summary":"Funciones y Estructuras de Datos con PHP # En PHP, puedes utilizar funciones predefinidas y también crear tus propias funciones para realizar tareas específicas.","title":"Funciones y Estructuras de Datos con PHP"},{"content":"Cómo definir un evento de manera declarativa en React # Los eventos en React se definen generalmente de manera declarativa, en el código de la vista o template, producido con JSX en el método render().\nPara definirlo tenemos que indicar dos cosas: Primero el tipo de evento que queremos implementar y luego el método que hará las veces de manejador de evento.\nNota: # un manejador de evento no es más que la función que se encarga de definir la funcionalidad que tiene que ejecutarse cuando se dispara un evento render() { return ( \u0026lt;p\u0026gt; \u0026lt;button onClick={this.toggleSlider}\u0026gt;Mostrar / Ocultar Slider\u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; ); } Como puedes apreciar en el código anterior, el método render devuelve el tempate, escrito con el lenguaje con JSX. Dentro del template tenemos un botón, el cuál tiene definido un evento \u0026ldquo;click\u0026rdquo;.\nNota: Es importante darse cuenta que el método asignado a onClick no tiene los paréntesis al final. No estamos queriendo ejecutar una función, sino indicar qué función se debe asociar como manejador de eventos. Por eso no se le colocan los paréntesis. # Las declaraciones de eventos en React tienen siempre esa forma: el prefijo \u0026ldquo;on\u0026rdquo;, seguido del tipo de evento que queremos capturar (onClick, onInput…). Como valor, colocamos una referencia al método del componente encargado de procesar el evento correspondiente. Por tanto, al hacer clic sobre el botón, se ejecutará el método toggleSlider().\nLuego tendremos que definir el manejador, como cualquier otro método del componente.\ntoggleSlider() { alert(\u0026#39;Has hecho clic\u0026#39;); } Bindear el contexto para acceder a this # Al implementar un manejador de evento es habitual que queramos acceder a las propiedades o métodos del propio componente. Por ejemplo, en el método toggleSlider() queremos cambiar el estado del componente y por tanto necesitamos manipularlo con this.setState().\nSin embargo aquí nos encontramos con una dificultad que viene del propio lenguaje Javascript no de React específicamente. En las funciones no es posible acceder a this como referencia al objeto sobre el que se invoca el método. Es por ello que necesitamos bindear el contexto.\nEste sería el código real del método toggleSlider(), que simplemente tiene que negar una propiedad boleana del estado del componente.\ntoggleSlider() { this.setState(prevState =\u0026gt; { return { showSlider: !prevState.showSlider }; }); } Como puedes ver, nos basamos en el estado anterior para calcular el nuevo estado. Por todas partes estamos usando \u0026ldquo;this\u0026rdquo; con la intención de acceder al propio componente que ha recibido el mensaje toggleSlider(). El problema aquí, como decíamos, es que \u0026ldquo;this\u0026rdquo; puede no contener esa referencia.\nNota: puedes ver más sobre el tratamiento del estado y this.setState en el artículo del estado de componentes en react. # Para solucionarlo existen varios mecanismos en React. El más recomendable es binderar el contexto directamente en el constructor del componente.\nLo consigo simplemente así:\nconstructor(props) { super(props); this.state = { showSlider: false } this.toggleSlider = this.toggleSlider.bind(this); } En este constructor estamos haciendo diversas tareas, la primera es la inicialización del estado, pero lo que nos interesa a nosotros es la parte donde se hace this.toggleSlider = this.toggleSlider.bind(this);\nNota: Gracias a la llamada a .bind(this) sobre una función o método, le estamos indicando a Javascript qué es lo que queremos que valga \u0026ldquo;this\u0026rdquo; dentro del método. Esto es algo que seguramente, si tienes experiencia en Javascript, ya habrás hecho en muchas otras ocasiones. # Otras alternativas de bindear this # También podemos hacer este bindeo de this (como contexto para en handler) a la hora de declarar el evento, en el template. El código nos quedaría más o menos así.\n\u0026lt;button onClick={this.toggleSlider.bind(this)}\u0026gt;Mostrar / Ocultar Slider\u0026lt;/button\u0026gt; También podríamos obtener el mismo resultado usando una arrow function, que es capaz de mantener el contexto de this, con un código como este:\n\u0026lt;button onClick={(e) =\u0026gt; this.toggleSlider(e)}\u0026gt;Mostrar / Ocultar Slider\u0026lt;/button\u0026gt; Aunque estas opciones nos ensucien algo el template, tienen la ventaja de ahorrarnos algo de ceremonia en el constructor del componente. Sin embargo, en términos de rendimiento resultan una solución peor. El problema de estas alternativas es que, cada vez que se renderiza el componente, se le pasa una nueva función como manejador de evento, donde se tiene que bindear el contexto nuevamente. Incluso, si la función se está pasando hacia componentes hijos, forzaría un redibujado adicional del componente hijo, lo que posiblemente nos lleve a una disminución del rendimiento que podrá notarse en aplicaciones grandes.\nPasar parámetros a manejadores de eventos # En los métodos de React asociados como manejadores de eventos podemos pasar parámetros. Puede ser útil cuando quieres personalizar el comportamiento del manejador, mediante el paso de datos que tienes desde el template.\nSería algo tan sencillo como bindear los otros datos que deseas enviar al método que hace de manejador de eventos. De la siguiente manera:\n\u0026lt;pre class=\u0026#34;language-markup\u0026#34;\u0026gt;\u0026lt;code\u0026gt;\u0026amp;lt;button onClick={(e) =\u0026amp;gt; this.toggleSlider(e)}\u0026amp;gt;Mostrar / Ocultar Slider\u0026amp;lt;/button\u0026amp;gt;\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; Ahora, dentro de nuestro método showText() podemos recibir el dato de esta forma.\nshowText(item, e) { console.log(e, item); } Esto nos mostrará dos datos en la consola, el \u0026ldquo;item\u0026rdquo; es aquella variable extra que estamos pasando al manejador. Por su parte, el parámetro \u0026ldquo;e\u0026rdquo; es el objeto evento de Javascript.\nPrevenir el comportamiento por defecto de un evento # Algo también muy típico que querrás realizar en un componente al trabajar con eventos es prevenir el comportamiento predeterminado. Por ejemplo, ante un clic en un enlace, podemos evitar que el navegador se vaya a la URL definida en el href del enlace.\nPara ello en Javascript nativo tendríamos dos opciones. La primera sería devolver \u0026ldquo;false\u0026rdquo; (return false) en el código del manejador. Esta alternativa no es válida para React. La segunda opción, que será la que realmente funcione, es invocar al método nativo de Javascript preventDefault(), que pertenece al objeto evento.\nPor ejemplo, podríamos tener un enlace como este:\n\u0026lt;a onClick={this.clickRealizado} href=\u0026#34;http://escuela.it\u0026#34;\u0026gt;Haz clic\u0026lt;/a\u0026gt; Cuyo manejador de evento sería el siguiente:\nclickRealizado(e) { e.preventDefault(); console.log(\u0026#39;clickEnP\u0026#39;) } Gracias a e.preventDefault() al hacer clic sobre el enlace no provocará que el navegador se vaya de la página, hacia la web de EscuelaIT.\nConclusión sobre los eventos en React # Hemos conocido lo básico sobre los eventos en React, junto con algunas cosas no tan básicas, pero de necesario conocimiento para poder trabajar con esta librería.\nComo has podido comprobar, trabajar con eventos no es nada complejo, pero requiere saber las particularidades de la librería React para evitar problemas o situaciones poco deseadas, que a veces resulta difícil de debuguear.\nVIDEO DE EVENT HANDLER # ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia03/event/","section":"Levels","summary":"Cómo definir un evento de manera declarativa en React # Los eventos en React se definen generalmente de manera declarativa, en el código de la vista o template, producido con JSX en el método render().","title":"Eventos JS"},{"content":"Php Introducion Extensiones # En PHP, las extensiones son módulos adicionales que amplían la funcionalidad del lenguaje y proporcionan acceso a características específicas del sistema o servicios externos. Estas extensiones se pueden cargar dinámicamente en tiempo de ejecución para habilitar funcionalidades adicionales en tus aplicaciones PHP.\nPHP viene con un conjunto de extensiones incorporadas que proporcionan funcionalidades básicas, como manejo de cadenas, manipulación de archivos, conexión a bases de datos, entre otras. Sin embargo, también existen muchas extensiones adicionales que se pueden instalar y utilizar según tus necesidades específicas.\nAquí hay algunos ejemplos de extensiones populares en PHP:\nMySQLi: Esta extensión proporciona una interfaz mejorada para interactuar con bases de datos MySQL. Es una mejora del antiguo conjunto de funciones MySQL y ofrece características adicionales, como soporte para transacciones y consultas preparadas.\nPDO: La extensión PDO (PHP Data Objects) ofrece una capa de abstracción de base de datos en PHP. Te permite acceder a diferentes bases de datos mediante una interfaz unificada, lo que facilita la migración entre diferentes sistemas de gestión de bases de datos.\nGD: GD (Graphic Library) es una extensión que permite manipular imágenes en PHP. Proporciona funciones para crear, manipular y renderizar imágenes, como redimensionar, recortar, agregar texto y aplicar efectos.\ncURL: La extensión cURL permite realizar solicitudes HTTP y acceder a recursos remotos. Es útil para interactuar con servicios web, realizar llamadas a APIs y transferir datos a través de protocolos como HTTP, FTP, SMTP, entre otros.\nJSON: La extensión JSON proporciona funciones para trabajar con datos en formato JSON. Permite codificar y decodificar datos en JSON, lo que es útil para la comunicación con servicios web que utilizan este formato.\nEstos son solo algunos ejemplos, y existen muchas más extensiones disponibles para cubrir una amplia gama de necesidades, como encriptación, generación de PDF, manejo de XML, integración con redes sociales, entre otros.\nPuedes consultar la documentación oficial de PHP para obtener más información sobre las extensiones disponibles y cómo instalarlas y utilizarlas en tus proyectos.\nSintaxis PHP # La sintaxis de PHP es bastante sencilla y similar a otros lenguajes de programación. Aquí tienes algunos elementos básicos de la sintaxis de PHP:\nEtiquetas de apertura y cierre: Para iniciar el código PHP, se utiliza la etiqueta \u0026lt;?php y para cerrarlo se utiliza la etiqueta ?\u0026gt;. Dentro de estas etiquetas se escribe el código PHP. \u0026lt;?php // Código PHP aquí ?\u0026gt; Comentarios: Puedes agregar comentarios en tu código para hacerlo más legible. Los comentarios en PHP se pueden hacer de dos formas: de una sola línea utilizando // o en varias líneas usando /* */. // Esto es un comentario de una sola línea /* Esto es un comentario de múltiples líneas */ Variables: En PHP, las variables se declaran utilizando el símbolo de $ seguido del nombre de la variable. No es necesario declarar el tipo de dato. $nombre = \u0026#34;Juan\u0026#34;; $edad = 25; Impresión de texto: Puedes imprimir texto en pantalla utilizando la función echo o print. Ambas funciones se utilizan de manera similar. echo \u0026#34;Hola, mundo!\u0026#34;; print \u0026#34;Hola, mundo!\u0026#34;; Concatenación de cadenas: Para concatenar cadenas de texto, se utiliza el operador .. $nombre = \u0026#34;Juan\u0026#34;; $apellido = \u0026#34;Pérez\u0026#34;; $nombreCompleto = $nombre . \u0026#34; \u0026#34; . $apellido; echo $nombreCompleto; // Imprime \u0026#34;Juan Pérez\u0026#34; Estructuras de control: PHP proporciona estructuras de control como if, else, elseif, for, while, do-while, switch, entre otros, para controlar el flujo de ejecución del programa. $edad = 20; if ($edad \u0026gt;= 18) { echo \u0026#34;Eres mayor de edad\u0026#34;; } else { echo \u0026#34;Eres menor de edad\u0026#34;; } Funciones: Puedes definir y llamar funciones en PHP. function saludar($nombre) { echo \u0026#34;Hola, \u0026#34; . $nombre; } saludar(\u0026#34;Juan\u0026#34;); // Imprime \u0026#34;Hola, Juan\u0026#34; Estos son solo algunos ejemplos de la sintaxis básica de PHP. El lenguaje ofrece muchas más características, como arrays, bucles más avanzados, manejo de excepciones, clases y objetos, entre otros. Puedes consultar la documentación oficial de PHP para obtener más información sobre la sintaxis y las características del lenguaje.\nVariables y operadores PHP # En PHP, las variables se utilizan para almacenar y manipular datos. Aquí tienes ejemplos de cómo declarar variables y los diferentes tipos de operadores disponibles:\nVariables: En PHP, las variables se declaran utilizando el símbolo de $ seguido del nombre de la variable. No es necesario especificar el tipo de datos al declarar una variable, ya que PHP es un lenguaje de programación de tipo débil.\n$nombre = \u0026#34;Juan\u0026#34;; // Variable de tipo string $edad = 25; // Variable de tipo entero $precio = 10.5; // Variable de tipo float $esEstudiante = true; // Variable de tipo boolean Operadores aritméticos: PHP proporciona operadores aritméticos para realizar operaciones matemáticas básicas.\n$a = 10; $b = 5; $suma = $a + $b; // Suma: 15 $resta = $a - $b; // Resta: 5 $producto = $a * $b; // Multiplicación: 50 $division = $a / $b; // División: 2 $modulo = $a % $b; // Módulo: 0 (resto de la división) $exponente = $a ** $b; // Exponente: 100000 Operadores de asignación: Los operadores de asignación se utilizan para asignar valores a variables.\n$a = 10; $b = 5; $c = $a; // Asignación: $c tiene el valor de $a (10) $a += $b; // Suma y asignación: $a se incrementa en $b (15) $a -= $b; // Resta y asignación: $a se decrementa en $b (10) $a *= $b; // Multiplicación y asignación: $a se multiplica por $b (50) $a /= $b; // División y asignación: $a se divide por $b (2) $a %= $b; // Módulo y asignación: $a se asigna al resto de la división por $b (0) Operadores de concatenación: En PHP, el operador de concatenación . se utiliza para unir cadenas de texto.\n$nombre = \u0026#34;Juan\u0026#34;; $apellido = \u0026#34;Pérez\u0026#34;; $nombreCompleto = $nombre . \u0026#34; \u0026#34; . $apellido; // Concatenación de cadenas Operadores de comparación: Los operadores de comparación se utilizan para comparar valores y devuelven un resultado booleano.\n$a = 10; $b = 5; $igual = $a == $b; // Igualdad: false $diferente = $a != $b; // Desigualdad: true $mayor = $a \u0026gt; $b; // Mayor que: true $menor = $a \u0026lt; $b; // Menor que: false $mayorIgual = $a \u0026gt;= $b; // Mayor o igual que: true $menorIgual = $a \u0026lt;= $b; // Menor o igual que: false Estos son solo algunos ejemplos de variables y operadores en PHP. El lenguaje ofrece una amplia gama de operadores y funciones incorporadas que permiten realizar diversas operaciones y manipulaciones de datos. Puedes consultar la documentación\nCondicionales y Ciclos PHP # En PHP, puedes utilizar estructuras de control como condicionales y ciclos para controlar el flujo de ejecución de tu código. Aquí tienes ejemplos de cómo utilizar condicionales (if-else) y ciclos (for, while, do-while) en PHP:\nCondicionales (if-else): Las estructuras condicionales te permiten ejecutar diferentes bloques de código según una condición.\n$edad = 18; if ($edad \u0026gt;= 18) { echo \u0026#34;Eres mayor de edad.\u0026#34;; } else { echo \u0026#34;Eres menor de edad.\u0026#34;; } También puedes utilizar la estructura \u0026ldquo;elseif\u0026rdquo; para evaluar múltiples condiciones:\n$edad = 25; if ($edad \u0026lt; 18) { echo \u0026#34;Eres menor de edad.\u0026#34;; } elseif ($edad \u0026gt;= 18 \u0026amp;\u0026amp; $edad \u0026lt; 65) { echo \u0026#34;Eres adulto.\u0026#34;; } else { echo \u0026#34;Eres mayor de edad.\u0026#34;; } Ciclo for: El ciclo \u0026ldquo;for\u0026rdquo; te permite ejecutar un bloque de código un número específico de veces.\nfor ($i = 1; $i \u0026lt;= 5; $i++) { echo $i . \u0026#34; \u0026#34;; } // Salida: 1 2 3 4 5 Ciclo while: El ciclo \u0026ldquo;while\u0026rdquo; se ejecuta mientras una condición sea verdadera.\n$contador = 1; while ($contador \u0026lt;= 5) { echo $contador . \u0026#34; \u0026#34;; $contador++; } // Salida: 1 2 3 4 5 Ciclo do-while: El ciclo \u0026ldquo;do-while\u0026rdquo; se ejecuta al menos una vez y luego se repite mientras una condición sea verdadera.\n$contador = 1; do { echo $contador . \u0026#34; \u0026#34;; $contador++; } while ($contador \u0026lt;= 5); // Salida: 1 2 3 4 5 Ciclo foreach: El ciclo \u0026ldquo;foreach\u0026rdquo; se utiliza para iterar sobre elementos de un array o una colección.\n$nombres = [\u0026#34;Juan\u0026#34;, \u0026#34;María\u0026#34;, \u0026#34;Carlos\u0026#34;]; foreach ($nombres as $nombre) { echo $nombre . \u0026#34; \u0026#34;; } // Salida: Juan María Carlos Estos son solo ejemplos básicos de cómo utilizar condicionales y ciclos en PHP. Puedes combinar estas estructuras de control y utilizar operadores lógicos para construir lógica más compleja en tu código. Además, PHP también ofrece otras estructuras de control, como \u0026ldquo;switch\u0026rdquo; para casos múltiples y \u0026ldquo;break\u0026rdquo; para romper ciclos, que puedes utilizar según tus necesidades.\nSintaxis PHP # Variables y operadores PHP # Condicionales y Ciclos PHP # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/03php/event/","section":"Levels","summary":"Php Introducion Extensiones # En PHP, las extensiones son módulos adicionales que amplían la funcionalidad del lenguaje y proporcionan acceso a características específicas del sistema o servicios externos.","title":"Php Introducion Extensiones"},{"content":"Php Introducion Extensiones # En PHP, las extensiones son módulos adicionales que amplían la funcionalidad del lenguaje y proporcionan acceso a características específicas del sistema o servicios externos. Estas extensiones se pueden cargar dinámicamente en tiempo de ejecución para habilitar funcionalidades adicionales en tus aplicaciones PHP.\nPHP viene con un conjunto de extensiones incorporadas que proporcionan funcionalidades básicas, como manejo de cadenas, manipulación de archivos, conexión a bases de datos, entre otras. Sin embargo, también existen muchas extensiones adicionales que se pueden instalar y utilizar según tus necesidades específicas.\nAquí hay algunos ejemplos de extensiones populares en PHP:\nMySQLi: Esta extensión proporciona una interfaz mejorada para interactuar con bases de datos MySQL. Es una mejora del antiguo conjunto de funciones MySQL y ofrece características adicionales, como soporte para transacciones y consultas preparadas.\nPDO: La extensión PDO (PHP Data Objects) ofrece una capa de abstracción de base de datos en PHP. Te permite acceder a diferentes bases de datos mediante una interfaz unificada, lo que facilita la migración entre diferentes sistemas de gestión de bases de datos.\nGD: GD (Graphic Library) es una extensión que permite manipular imágenes en PHP. Proporciona funciones para crear, manipular y renderizar imágenes, como redimensionar, recortar, agregar texto y aplicar efectos.\ncURL: La extensión cURL permite realizar solicitudes HTTP y acceder a recursos remotos. Es útil para interactuar con servicios web, realizar llamadas a APIs y transferir datos a través de protocolos como HTTP, FTP, SMTP, entre otros.\nJSON: La extensión JSON proporciona funciones para trabajar con datos en formato JSON. Permite codificar y decodificar datos en JSON, lo que es útil para la comunicación con servicios web que utilizan este formato.\nEstos son solo algunos ejemplos, y existen muchas más extensiones disponibles para cubrir una amplia gama de necesidades, como encriptación, generación de PDF, manejo de XML, integración con redes sociales, entre otros.\nPuedes consultar la documentación oficial de PHP para obtener más información sobre las extensiones disponibles y cómo instalarlas y utilizarlas en tus proyectos.\nSintaxis PHP # La sintaxis de PHP es bastante sencilla y similar a otros lenguajes de programación. Aquí tienes algunos elementos básicos de la sintaxis de PHP:\nEtiquetas de apertura y cierre: Para iniciar el código PHP, se utiliza la etiqueta \u0026lt;?php y para cerrarlo se utiliza la etiqueta ?\u0026gt;. Dentro de estas etiquetas se escribe el código PHP. \u0026lt;?php // Código PHP aquí ?\u0026gt; Comentarios: Puedes agregar comentarios en tu código para hacerlo más legible. Los comentarios en PHP se pueden hacer de dos formas: de una sola línea utilizando // o en varias líneas usando /* */. // Esto es un comentario de una sola línea /* Esto es un comentario de múltiples líneas */ Variables: En PHP, las variables se declaran utilizando el símbolo de $ seguido del nombre de la variable. No es necesario declarar el tipo de dato. $nombre = \u0026#34;Juan\u0026#34;; $edad = 25; Impresión de texto: Puedes imprimir texto en pantalla utilizando la función echo o print. Ambas funciones se utilizan de manera similar. echo \u0026#34;Hola, mundo!\u0026#34;; print \u0026#34;Hola, mundo!\u0026#34;; Concatenación de cadenas: Para concatenar cadenas de texto, se utiliza el operador .. $nombre = \u0026#34;Juan\u0026#34;; $apellido = \u0026#34;Pérez\u0026#34;; $nombreCompleto = $nombre . \u0026#34; \u0026#34; . $apellido; echo $nombreCompleto; // Imprime \u0026#34;Juan Pérez\u0026#34; Estructuras de control: PHP proporciona estructuras de control como if, else, elseif, for, while, do-while, switch, entre otros, para controlar el flujo de ejecución del programa. $edad = 20; if ($edad \u0026gt;= 18) { echo \u0026#34;Eres mayor de edad\u0026#34;; } else { echo \u0026#34;Eres menor de edad\u0026#34;; } Funciones: Puedes definir y llamar funciones en PHP. function saludar($nombre) { echo \u0026#34;Hola, \u0026#34; . $nombre; } saludar(\u0026#34;Juan\u0026#34;); // Imprime \u0026#34;Hola, Juan\u0026#34; Estos son solo algunos ejemplos de la sintaxis básica de PHP. El lenguaje ofrece muchas más características, como arrays, bucles más avanzados, manejo de excepciones, clases y objetos, entre otros. Puedes consultar la documentación oficial de PHP para obtener más información sobre la sintaxis y las características del lenguaje.\nVariables y operadores PHP # En PHP, las variables se utilizan para almacenar y manipular datos. Aquí tienes ejemplos de cómo declarar variables y los diferentes tipos de operadores disponibles:\nVariables: En PHP, las variables se declaran utilizando el símbolo de $ seguido del nombre de la variable. No es necesario especificar el tipo de datos al declarar una variable, ya que PHP es un lenguaje de programación de tipo débil.\n$nombre = \u0026#34;Juan\u0026#34;; // Variable de tipo string $edad = 25; // Variable de tipo entero $precio = 10.5; // Variable de tipo float $esEstudiante = true; // Variable de tipo boolean Operadores aritméticos: PHP proporciona operadores aritméticos para realizar operaciones matemáticas básicas.\n$a = 10; $b = 5; $suma = $a + $b; // Suma: 15 $resta = $a - $b; // Resta: 5 $producto = $a * $b; // Multiplicación: 50 $division = $a / $b; // División: 2 $modulo = $a % $b; // Módulo: 0 (resto de la división) $exponente = $a ** $b; // Exponente: 100000 Operadores de asignación: Los operadores de asignación se utilizan para asignar valores a variables.\n$a = 10; $b = 5; $c = $a; // Asignación: $c tiene el valor de $a (10) $a += $b; // Suma y asignación: $a se incrementa en $b (15) $a -= $b; // Resta y asignación: $a se decrementa en $b (10) $a *= $b; // Multiplicación y asignación: $a se multiplica por $b (50) $a /= $b; // División y asignación: $a se divide por $b (2) $a %= $b; // Módulo y asignación: $a se asigna al resto de la división por $b (0) Operadores de concatenación: En PHP, el operador de concatenación . se utiliza para unir cadenas de texto.\n$nombre = \u0026#34;Juan\u0026#34;; $apellido = \u0026#34;Pérez\u0026#34;; $nombreCompleto = $nombre . \u0026#34; \u0026#34; . $apellido; // Concatenación de cadenas Operadores de comparación: Los operadores de comparación se utilizan para comparar valores y devuelven un resultado booleano.\n$a = 10; $b = 5; $igual = $a == $b; // Igualdad: false $diferente = $a != $b; // Desigualdad: true $mayor = $a \u0026gt; $b; // Mayor que: true $menor = $a \u0026lt; $b; // Menor que: false $mayorIgual = $a \u0026gt;= $b; // Mayor o igual que: true $menorIgual = $a \u0026lt;= $b; // Menor o igual que: false Estos son solo algunos ejemplos de variables y operadores en PHP. El lenguaje ofrece una amplia gama de operadores y funciones incorporadas que permiten realizar diversas operaciones y manipulaciones de datos. Puedes consultar la documentación\nCondicionales y Ciclos PHP # En PHP, puedes utilizar estructuras de control como condicionales y ciclos para controlar el flujo de ejecución de tu código. Aquí tienes ejemplos de cómo utilizar condicionales (if-else) y ciclos (for, while, do-while) en PHP:\nCondicionales (if-else): Las estructuras condicionales te permiten ejecutar diferentes bloques de código según una condición.\n$edad = 18; if ($edad \u0026gt;= 18) { echo \u0026#34;Eres mayor de edad.\u0026#34;; } else { echo \u0026#34;Eres menor de edad.\u0026#34;; } También puedes utilizar la estructura \u0026ldquo;elseif\u0026rdquo; para evaluar múltiples condiciones:\n$edad = 25; if ($edad \u0026lt; 18) { echo \u0026#34;Eres menor de edad.\u0026#34;; } elseif ($edad \u0026gt;= 18 \u0026amp;\u0026amp; $edad \u0026lt; 65) { echo \u0026#34;Eres adulto.\u0026#34;; } else { echo \u0026#34;Eres mayor de edad.\u0026#34;; } Ciclo for: El ciclo \u0026ldquo;for\u0026rdquo; te permite ejecutar un bloque de código un número específico de veces.\nfor ($i = 1; $i \u0026lt;= 5; $i++) { echo $i . \u0026#34; \u0026#34;; } // Salida: 1 2 3 4 5 Ciclo while: El ciclo \u0026ldquo;while\u0026rdquo; se ejecuta mientras una condición sea verdadera.\n$contador = 1; while ($contador \u0026lt;= 5) { echo $contador . \u0026#34; \u0026#34;; $contador++; } // Salida: 1 2 3 4 5 Ciclo do-while: El ciclo \u0026ldquo;do-while\u0026rdquo; se ejecuta al menos una vez y luego se repite mientras una condición sea verdadera.\n$contador = 1; do { echo $contador . \u0026#34; \u0026#34;; $contador++; } while ($contador \u0026lt;= 5); // Salida: 1 2 3 4 5 Ciclo foreach: El ciclo \u0026ldquo;foreach\u0026rdquo; se utiliza para iterar sobre elementos de un array o una colección.\n$nombres = [\u0026#34;Juan\u0026#34;, \u0026#34;María\u0026#34;, \u0026#34;Carlos\u0026#34;]; foreach ($nombres as $nombre) { echo $nombre . \u0026#34; \u0026#34;; } // Salida: Juan María Carlos Estos son solo ejemplos básicos de cómo utilizar condicionales y ciclos en PHP. Puedes combinar estas estructuras de control y utilizar operadores lógicos para construir lógica más compleja en tu código. Además, PHP también ofrece otras estructuras de control, como \u0026ldquo;switch\u0026rdquo; para casos múltiples y \u0026ldquo;break\u0026rdquo; para romper ciclos, que puedes utilizar según tus necesidades.\nSintaxis PHP # Variables y operadores PHP # Condicionales y Ciclos PHP # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/03taildwind/event/","section":"Levels","summary":"Php Introducion Extensiones # En PHP, las extensiones son módulos adicionales que amplían la funcionalidad del lenguaje y proporcionan acceso a características específicas del sistema o servicios externos.","title":"Php Introducion Extensiones"},{"content":"Components \u0026amp; Props # Un componente simple # Los componentes de React implementan un método llamado render() que recibe datos de entrada y retorna qué mostrar. Este ejemplo utiliza una sintaxis similar a XML llamada JSX. Puedes acceder a los datos de entrada que se pasan al componente mediante render() a través de this.props.\nJSX es opcional y no es requerido para usar React. Prueba Babel REPL para ver el código JavaScript sin procesar la compilación de JSX.\nclass HelloMessage extends React.Component { render() { return \u0026lt;div\u0026gt;Hola {this.props.name}\u0026lt;/div\u0026gt;; } } root.render(\u0026lt;HelloMessage name=\u0026#34;Taylor\u0026#34; /\u0026gt;); Resultado:\nHola Taylor Un componente con estado # Además de obtener datos de entrada (a los que accedes a través de this.props), un componente puede tener datos en su estado interno (a los que accedes a través de this.state). Cuando los datos del estado de un componente cambian, se vuelve a invocar render con los nuevos valores en this.state.\nclass Timer extends React.Component { constructor(props) { super(props); this.state = { seconds: 0 }; } tick() { this.setState(state =\u0026gt; ({ seconds: state.seconds + 1 })); } componentDidMount() { this.interval = setInterval(() =\u0026gt; this.tick(), 1000); } componentWillUnmount() { clearInterval(this.interval); } render() { return ( \u0026lt;div\u0026gt; Segundos: {this.state.seconds} \u0026lt;/div\u0026gt; ); } } root.render(\u0026lt;Timer /\u0026gt;); Resultado:\nSegundos: 5980 Una aplicación # Usando props y state, podemos integrar todo en una pequeña aplicación de tareas pendientes. Este ejemplo usa state para tener un control de la lista actual de objetos así como el texto que el usuario ha ingresado. A pesar de que los manejadores de eventos parecen ser renderizados en línea, serán recolectados e implementados usando delegación de eventos.\nclass TodoApp extends React.Component { constructor(props) { super(props); this.state = { items: [], text: \u0026#39;\u0026#39; }; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;Tareas pendientes\u0026lt;/h3\u0026gt; \u0026lt;TodoList items={this.state.items} /\u0026gt; \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label htmlFor=\u0026#34;new-todo\u0026#34;\u0026gt; ¿Qué se necesita hacer? \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;new-todo\u0026#34; onChange={this.handleChange} value={this.state.text} /\u0026gt; \u0026lt;button\u0026gt; Añadir #{this.state.items.length + 1} \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); } handleChange(e) { this.setState({ text: e.target.value }); } handleSubmit(e) { e.preventDefault(); if (this.state.text.length === 0) { return; } const newItem = { text: this.state.text, id: Date.now() }; this.setState(state =\u0026gt; ({ items: state.items.concat(newItem), text: \u0026#39;\u0026#39; })); } } class TodoList extends React.Component { render() { return ( \u0026lt;ul\u0026gt; {this.props.items.map(item =\u0026gt; ( \u0026lt;li key={item.id}\u0026gt;{item.text}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } } root.render(\u0026lt;TodoApp /\u0026gt;); Un componente usando plugins externos # React permite interactuar con otras bibliotecas y frameworks. Este ejemplo usa remarkable, una biblioteca externa de Markdown, que convierte los valores de \u0026lt; textarea \u0026gt; en tiempo real.\nclass MarkdownEditor extends React.Component { constructor(props) { super(props); this.md = new Remarkable(); this.handleChange = this.handleChange.bind(this); this.state = { value: \u0026#39;¡Hola **mundo**!\u0026#39; }; } handleChange(e) { this.setState({ value: e.target.value }); } getRawMarkup() { return { __html: this.md.render(this.state.value) }; } render() { return ( \u0026lt;div className=\u0026#34;MarkdownEditor\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Entrada\u0026lt;/h3\u0026gt; \u0026lt;label htmlFor=\u0026#34;markdown-content\u0026#34;\u0026gt; Introduce algún texto en markdown \u0026lt;/label\u0026gt; \u0026lt;textarea id=\u0026#34;markdown-content\u0026#34; onChange={this.handleChange} defaultValue={this.state.value} /\u0026gt; \u0026lt;h3\u0026gt;Salida\u0026lt;/h3\u0026gt; \u0026lt;div className=\u0026#34;content\u0026#34; dangerouslySetInnerHTML={this.getRawMarkup()} /\u0026gt; \u0026lt;/div\u0026gt; ); } } root.render(\u0026lt;MarkdownEditor /\u0026gt;); COMPONENTES # PROPS # ","date":"12 marzo 2023","permalink":"/platform/levels/level3_react/dia02/comp/","section":"Levels","summary":"Components \u0026amp; Props # Un componente simple # Los componentes de React implementan un método llamado render() que recibe datos de entrada y retorna qué mostrar.","title":"Components \u0026 Props"},{"content":"Servidores # XAMP # La estructura \u0026ldquo;XAMPP\u0026rdquo; se refiere a un paquete de software que incluye varios componentes necesarios para crear y gestionar un entorno de desarrollo web. \u0026ldquo;XAMPP\u0026rdquo; es un acrónimo que representa los siguientes componentes:\nX: se refiere al sistema operativo en el que se instalará XAMPP. Puede ser Windows, Linux, macOS o Solaris.\nA: representa el servidor web Apache. Apache es uno de los servidores web más populares y ampliamente utilizados en el mundo. Proporciona la infraestructura necesaria para alojar y servir sitios web.\nM: representa el sistema de gestión de bases de datos MySQL. MySQL es un sistema de gestión de bases de datos relacional ampliamente utilizado. Proporciona un entorno para almacenar, organizar y administrar datos utilizados por aplicaciones web.\nP: representa el lenguaje de programación PHP. PHP es un lenguaje de programación de código abierto especialmente diseñado para el desarrollo web. Se utiliza principalmente para crear aplicaciones web dinámicas e interactuar con bases de datos.\nP: representa el servidor de correo electrónico Postfix. Postfix es un servidor de correo electrónico de código abierto que permite el envío y recepción de correos electrónicos en un entorno de desarrollo local.\nXAMPP proporciona una forma conveniente de instalar y configurar estos componentes juntos, lo que permite a los desarrolladores crear y probar sus aplicaciones web en un entorno local antes de implementarlas en un servidor de producción en vivo.\nInstalar XAMP # Para instalar XAMPP en tu sistema, sigue estos pasos:\nDescarga el paquete de instalación: Visita el sitio web oficial de XAMPP (https://www.apachefriends.org/es/index.html) y descarga el paquete de instalación correspondiente a tu sistema operativo (Windows, Linux, macOS o Solaris).\nInicia el instalador: Una vez que la descarga haya finalizado, ejecuta el archivo de instalación. Si estás en Windows, simplemente haz doble clic en el archivo ejecutable. En Linux y macOS, es posible que necesites abrir una terminal, navegar hasta la ubicación del archivo y ejecutarlo desde allí.\nSelecciona los componentes: Durante el proceso de instalación, se te presentará una lista de componentes disponibles para instalar. Por lo general, Apache, MySQL, PHP y phpMyAdmin estarán seleccionados de forma predeterminada. Puedes mantener estas selecciones o desmarcar los componentes que no necesites. También puedes seleccionar otros complementos opcionales si lo deseas.\nSelecciona la ubicación de instalación: El instalador te pedirá que elijas una ubicación para instalar XAMPP. Puedes optar por utilizar la ubicación predeterminada o seleccionar una ruta personalizada.\nCompleta la instalación: Una vez que hayas seleccionado los componentes y la ubicación de instalación, simplemente sigue las instrucciones en pantalla para completar la instalación. El instalador copiará los archivos necesarios y configurará el entorno de XAMPP.\nInicia XAMPP: Después de completar la instalación, podrás iniciar XAMPP. En Windows, puedes encontrar un acceso directo en el escritorio o en el menú de inicio. En Linux y macOS, puedes abrir una terminal y ejecutar el comando correspondiente para iniciar XAMPP.\nVerifica la instalación: Una vez que XAMPP esté en funcionamiento, puedes abrir un navegador web y visitar \u0026ldquo;http://localhost\u0026rdquo; para ver la página de inicio de XAMPP. Desde allí, podrás acceder a las diferentes herramientas y servicios, como phpMyAdmin para administrar tu base de datos MySQL.\n¡Eso es todo! Ahora tienes XAMPP instalado en tu sistema y puedes comenzar a desarrollar y probar aplicaciones web localmente.\nConfiguraciones Locales y en la Nube # Las configuraciones locales y en la nube se refieren a dos formas diferentes de alojar y ejecutar aplicaciones web.\nConfiguración Local: En una configuración local, instalas y ejecutas todos los componentes necesarios, como el servidor web, la base de datos y el lenguaje de programación, en tu propio equipo o en un servidor local dentro de tu red. XAMPP es un ejemplo de una configuración local, donde puedes instalar y configurar Apache, MySQL y PHP en tu máquina para desarrollar y probar aplicaciones web en un entorno controlado. La configuración local es útil para el desarrollo y pruebas, ya que te permite trabajar sin una conexión a Internet y tener un control total sobre la configuración del entorno.\nConfiguración en la Nube: En una configuración en la nube, utilizas servicios y recursos proporcionados por proveedores de servicios en la nube, como Amazon Web Services (AWS), Microsoft Azure o Google Cloud Platform (GCP), para alojar y ejecutar tus aplicaciones web. En lugar de configurar y mantener tus propios servidores, puedes aprovechar la infraestructura en la nube para desplegar y escalar tus aplicaciones de manera más fácil y flexible. En una configuración en la nube, no es necesario preocuparse por la gestión de servidores físicos, ya que el proveedor de la nube se encarga de eso. También obtienes beneficios como la alta disponibilidad, la escalabilidad y la facilidad de implementación.\nAmbas configuraciones tienen sus ventajas y se utilizan en diferentes escenarios:\nLa configuración local es útil para el desarrollo y pruebas en entornos controlados, donde puedes realizar cambios y experimentar sin afectar una aplicación en producción. También es útil cuando no tienes acceso a Internet o cuando necesitas trabajar con datos confidenciales que no deben estar en la nube.\nLa configuración en la nube es adecuada para implementar aplicaciones en producción a gran escala, ya que te brinda flexibilidad, escalabilidad y confiabilidad. Además, los servicios en la nube ofrecen una amplia gama de herramientas y servicios adicionales que pueden facilitar el desarrollo, la implementación y la administración de tus aplicaciones.\nLa elección entre una configuración local y en la nube depende de tus necesidades específicas, los recursos disponibles y el contexto del proyecto. A menudo, los desarrolladores utilizan una combinación de ambas configuraciones, desarrollando y probando localmente y luego desplegando la aplicación en la nube para su producción.\nInstalar XAMP # Monta tu servidor web con Apache, PHP y MySQL # ","date":"12 marzo 2023","permalink":"/platform/levels/level4_php/02servidores/comp/","section":"Levels","summary":"Servidores # XAMP # La estructura \u0026ldquo;XAMPP\u0026rdquo; se refiere a un paquete de software que incluye varios componentes necesarios para crear y gestionar un entorno de desarrollo web.","title":"Xamp y Servidores"},{"content":"Servidores # XAMP # La estructura \u0026ldquo;XAMPP\u0026rdquo; se refiere a un paquete de software que incluye varios componentes necesarios para crear y gestionar un entorno de desarrollo web. \u0026ldquo;XAMPP\u0026rdquo; es un acrónimo que representa los siguientes componentes:\nX: se refiere al sistema operativo en el que se instalará XAMPP. Puede ser Windows, Linux, macOS o Solaris.\nA: representa el servidor web Apache. Apache es uno de los servidores web más populares y ampliamente utilizados en el mundo. Proporciona la infraestructura necesaria para alojar y servir sitios web.\nM: representa el sistema de gestión de bases de datos MySQL. MySQL es un sistema de gestión de bases de datos relacional ampliamente utilizado. Proporciona un entorno para almacenar, organizar y administrar datos utilizados por aplicaciones web.\nP: representa el lenguaje de programación PHP. PHP es un lenguaje de programación de código abierto especialmente diseñado para el desarrollo web. Se utiliza principalmente para crear aplicaciones web dinámicas e interactuar con bases de datos.\nP: representa el servidor de correo electrónico Postfix. Postfix es un servidor de correo electrónico de código abierto que permite el envío y recepción de correos electrónicos en un entorno de desarrollo local.\nXAMPP proporciona una forma conveniente de instalar y configurar estos componentes juntos, lo que permite a los desarrolladores crear y probar sus aplicaciones web en un entorno local antes de implementarlas en un servidor de producción en vivo.\nInstalar XAMP # Para instalar XAMPP en tu sistema, sigue estos pasos:\nDescarga el paquete de instalación: Visita el sitio web oficial de XAMPP (https://www.apachefriends.org/es/index.html) y descarga el paquete de instalación correspondiente a tu sistema operativo (Windows, Linux, macOS o Solaris).\nInicia el instalador: Una vez que la descarga haya finalizado, ejecuta el archivo de instalación. Si estás en Windows, simplemente haz doble clic en el archivo ejecutable. En Linux y macOS, es posible que necesites abrir una terminal, navegar hasta la ubicación del archivo y ejecutarlo desde allí.\nSelecciona los componentes: Durante el proceso de instalación, se te presentará una lista de componentes disponibles para instalar. Por lo general, Apache, MySQL, PHP y phpMyAdmin estarán seleccionados de forma predeterminada. Puedes mantener estas selecciones o desmarcar los componentes que no necesites. También puedes seleccionar otros complementos opcionales si lo deseas.\nSelecciona la ubicación de instalación: El instalador te pedirá que elijas una ubicación para instalar XAMPP. Puedes optar por utilizar la ubicación predeterminada o seleccionar una ruta personalizada.\nCompleta la instalación: Una vez que hayas seleccionado los componentes y la ubicación de instalación, simplemente sigue las instrucciones en pantalla para completar la instalación. El instalador copiará los archivos necesarios y configurará el entorno de XAMPP.\nInicia XAMPP: Después de completar la instalación, podrás iniciar XAMPP. En Windows, puedes encontrar un acceso directo en el escritorio o en el menú de inicio. En Linux y macOS, puedes abrir una terminal y ejecutar el comando correspondiente para iniciar XAMPP.\nVerifica la instalación: Una vez que XAMPP esté en funcionamiento, puedes abrir un navegador web y visitar \u0026ldquo;http://localhost\u0026rdquo; para ver la página de inicio de XAMPP. Desde allí, podrás acceder a las diferentes herramientas y servicios, como phpMyAdmin para administrar tu base de datos MySQL.\n¡Eso es todo! Ahora tienes XAMPP instalado en tu sistema y puedes comenzar a desarrollar y probar aplicaciones web localmente.\nConfiguraciones Locales y en la Nube # Las configuraciones locales y en la nube se refieren a dos formas diferentes de alojar y ejecutar aplicaciones web.\nConfiguración Local: En una configuración local, instalas y ejecutas todos los componentes necesarios, como el servidor web, la base de datos y el lenguaje de programación, en tu propio equipo o en un servidor local dentro de tu red. XAMPP es un ejemplo de una configuración local, donde puedes instalar y configurar Apache, MySQL y PHP en tu máquina para desarrollar y probar aplicaciones web en un entorno controlado. La configuración local es útil para el desarrollo y pruebas, ya que te permite trabajar sin una conexión a Internet y tener un control total sobre la configuración del entorno.\nConfiguración en la Nube: En una configuración en la nube, utilizas servicios y recursos proporcionados por proveedores de servicios en la nube, como Amazon Web Services (AWS), Microsoft Azure o Google Cloud Platform (GCP), para alojar y ejecutar tus aplicaciones web. En lugar de configurar y mantener tus propios servidores, puedes aprovechar la infraestructura en la nube para desplegar y escalar tus aplicaciones de manera más fácil y flexible. En una configuración en la nube, no es necesario preocuparse por la gestión de servidores físicos, ya que el proveedor de la nube se encarga de eso. También obtienes beneficios como la alta disponibilidad, la escalabilidad y la facilidad de implementación.\nAmbas configuraciones tienen sus ventajas y se utilizan en diferentes escenarios:\nLa configuración local es útil para el desarrollo y pruebas en entornos controlados, donde puedes realizar cambios y experimentar sin afectar una aplicación en producción. También es útil cuando no tienes acceso a Internet o cuando necesitas trabajar con datos confidenciales que no deben estar en la nube.\nLa configuración en la nube es adecuada para implementar aplicaciones en producción a gran escala, ya que te brinda flexibilidad, escalabilidad y confiabilidad. Además, los servicios en la nube ofrecen una amplia gama de herramientas y servicios adicionales que pueden facilitar el desarrollo, la implementación y la administración de tus aplicaciones.\nLa elección entre una configuración local y en la nube depende de tus necesidades específicas, los recursos disponibles y el contexto del proyecto. A menudo, los desarrolladores utilizan una combinación de ambas configuraciones, desarrollando y probando localmente y luego desplegando la aplicación en la nube para su producción.\nInstalar XAMP # Monta tu servidor web con Apache, PHP y MySQL # ","date":"12 marzo 2023","permalink":"/platform/levels/level5_laravel/02taildwind/comp/","section":"Levels","summary":"Servidores # XAMP # La estructura \u0026ldquo;XAMPP\u0026rdquo; se refiere a un paquete de software que incluye varios componentes necesarios para crear y gestionar un entorno de desarrollo web.","title":"Xamp y Servidores"},{"content":"React Js # ¿Que es React Js? # Una biblioteca de JavaScript para construir interfaces de usuario Comienza Haz el tutorial.\nDeclarativo # React te ayuda a crear interfaces de usuario interactivas de forma sencilla. Diseña vistas simples para cada estado en tu aplicación, y React se encargará de actualizar y renderizar de manera eficiente los componentes correctos cuando los datos cambien.\nLas vistas declarativas hacen que tu código sea más predecible, por lo tanto, fácil de depurar.\nBasado en componentes # Crea componentes encapsulados que manejen su propio estado, y conviértelos en interfaces de usuario complejas.\nYa que la lógica de los componentes está escrita en JavaScript y no en plantillas, puedes pasar datos de forma sencilla a través de tu aplicación y mantener el estado fuera del DOM.\nAprende una vez, escríbelo donde sea # En React no dejamos fuera al resto de tus herramientas tecnológicas, así que podrás desarrollar nuevas características sin necesidad de volver a escribir el código existente.\nReact puede también renderizar desde el servidor usando Node, así como potencializar aplicaciones móviles usando React Native.\n¿Que es React Js y como funciona? # Estructura # ¿Que es JSX? # Considera la declaración de esta variable:\nconst element = \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;; Esta curiosa sintaxis de etiquetas no es ni un string ni HTML.\nSe llama JSX, y es una extensión de la sintaxis de JavaScript. Recomendamos usarlo con React para describir cómo debería ser la interfaz de usuario. JSX puede recordarte a un lenguaje de plantillas, pero viene con todo el poder de JavaScript.\nJSX produce “elementos” de React. Exploraremos como renderizarlos en el DOM en la siguiente sección. A continuación puedes encontrar lo básico de JSX que será necesario para empezar.\n¿Por qué JSX? # React acepta el hecho de que la lógica de renderizado está intrínsecamente unida a la lógica de la interfaz de usuario: cómo se manejan los eventos, cómo cambia el estado con el tiempo y cómo se preparan los datos para su visualización.\nEn lugar de separar artificialmente tecnologías poniendo el maquetado y la lógica en archivos separados, React separa intereses con unidades ligeramente acopladas llamadas “componentes” que contienen ambas. Volveremos a los componentes en otra sección, pero si aún no te sientes cómodo maquetando en JS, esta charla podría convencerte de lo contrario.\nReact no requiere usar JSX, pero la mayoría de la gente lo encuentra útil como ayuda visual cuando trabajan con interfaz de usuario dentro del código Javascript. Esto también permite que React muestre mensajes de error o advertencia más útiles.\nInsertando expresiones en JSX # En el ejemplo a continuación, declaramos una variable llamada name y luego la usamos dentro del JSX envolviéndola dentro de llaves:\nconst name = \u0026#39;Josh Perez\u0026#39;; const element = \u0026lt;h1\u0026gt;Hello, {name}\u0026lt;/h1\u0026gt;; Puedes poner cualquier expresión de JavaScript dentro de llaves en JSX. Por ejemplo, 2 + 2, user.firstName, o formatName(user) son todas expresiones válidas de Javascript.\nEn el ejemplo a continuación, insertamos el resultado de llamar la función de JavaScript, formatName(user), dentro de un elemento \u0026lt;h1\u0026gt;.\nfunction formatName(user) { return user.firstName + \u0026#39; \u0026#39; + user.lastName; } const user = { firstName: \u0026#39;Harper\u0026#39;, lastName: \u0026#39;Perez\u0026#39; }; const element = ( \u0026lt;h1\u0026gt; Hello, {formatName(user)}! \u0026lt;/h1\u0026gt; ); Dividimos JSX en varias líneas para facilitar la lectura. Aunque no es necesario, cuando hagas esto también te recomendamos envolverlo entre paréntesis para evitar errores por la inserción automática del punto y coma.\nJSX también es una expresión # Después de compilarse, las expresiones JSX se convierten en llamadas a funciones JavaScript regulares y se evalúan en objetos JavaScript.\nEsto significa que puedes usar JSX dentro de declaraciones if y bucles for, asignarlo a variables, aceptarlo como argumento, y retornarlo desde dentro de funciones:\nfunction getGreeting(user) { if (user) { return \u0026lt;h1\u0026gt;Hello, {formatName(user)}!\u0026lt;/h1\u0026gt;; } return \u0026lt;h1\u0026gt;Hello, Stranger.\u0026lt;/h1\u0026gt;;} Especificando atributos con JSX # Puedes utilizar comillas para especificar strings literales como atributos:\nconst element = \u0026lt;a href=\u0026#34;https://www.reactjs.org\u0026#34;\u0026gt; link \u0026lt;/a\u0026gt;; También puedes usar llaves para insertar una expresión JavaScript en un atributo:\nconst element = \u0026lt;img src={user.avatarUrl}\u0026gt;\u0026lt;/img\u0026gt;; No pongas comillas rodeando llaves cuando insertes una expresión JavaScript en un atributo. Debes utilizar comillas (para los valores de los strings) o llaves (para las expresiones), pero no ambas en el mismo atributo.\nAdvertencia: # Dado que JSX es más cercano a JavaScript que a HTML, React DOM usa la convención de nomenclatura camelCase en vez de nombres de atributos HTML. Por ejemplo, class se vuelve className en JSX, y tabindex se vuelve tabIndex. Instalacion React Js # 1. Veamos una forma sencilla de instalar React JS bajo el SO Windows 10 # Para instalar React JS debemos tener instalado nodejs y ejecutar algunos comandos sencillos veamos la instalación paso a paso en este tutorial fácil\n2. Pasos para instalar React JS # Instalar Node JS. Aqui buscamos la página oficial de NodeJS y descargamos la version recomendada luego procedemos a realizar la instalación con simples clics Levantamos la ventana de Comando de Windows CMD y ejecutamos las siguientes instrucciones o comandos. node \u0026ndash;version.- Verificamos la instalación npm \u0026ndash;version.- Verificamos que se haya instalado correctamente el gestor de dependencias de Javascript npx create-react-app miaplicacion.- Con este comando iniciamos la instalación de un proyecto con React JS. cd miaplicacion .- Ingresamos al directorio de la aplicación npm start.- Finalmente iniamos la compilación del proyecto para visualizarlo en un navegador web\nComo Instalar React JS en Windows # ","date":"9 marzo 2023","permalink":"/platform/levels/level3_react/dia01/intro/","section":"Levels","summary":"React Js # ¿Que es React Js?","title":"Intro"},{"content":"Que es el Backend y Su importancia # Que es el Backend # El backend, también conocido como el lado del servidor, se refiere a la parte de un sistema o aplicación informática que se encarga de procesar los datos, realizar cálculos, interactuar con la base de datos y generar las respuestas que son enviadas al cliente o a la interfaz de usuario. Es la parte invisible para los usuarios finales, pero es fundamental para el funcionamiento de cualquier aplicación.\nEl backend se encarga de gestionar la lógica de negocio, la seguridad, la autenticación, la autorización, la gestión de datos y otros aspectos fundamentales de una aplicación. Puede estar compuesto por diferentes componentes, como servidores, bases de datos, APIs (Application Programming Interfaces), frameworks de desarrollo, sistemas de cache, entre otros.\nLa importancia del backend radica en que es responsable de toda la funcionalidad y la lógica detrás de una aplicación. Es el encargado de procesar las solicitudes del usuario, realizar las operaciones necesarias y enviar las respuestas adecuadas. Además, se encarga de gestionar y almacenar los datos de manera segura.\nUn backend sólido y bien diseñado es crucial para garantizar un rendimiento óptimo, una seguridad adecuada, una escalabilidad eficiente y una buena experiencia de usuario. Si el backend no funciona correctamente, puede afectar negativamente la funcionalidad de la aplicación, la seguridad de los datos y la experiencia del usuario.\nEn resumen, el backend es esencial para el funcionamiento de cualquier aplicación y su importancia radica en su capacidad para gestionar la lógica de negocio, los datos y otros aspectos fundamentales, lo que garantiza una aplicación eficiente, segura y con una buena experiencia de usuario.\nRoles de un backend # En el desarrollo de backend, existen varios roles o especialidades que desempeñan diferentes funciones. A continuación, te mencionaré algunos de los roles comunes en el ámbito del backend:\nDesarrollador backend: Es el encargado de escribir el código y construir la lógica de la aplicación en el lado del servidor. Este rol implica conocimientos en diferentes lenguajes de programación como Python, Java, PHP, Ruby, entre otros, así como también el manejo de frameworks y tecnologías específicas.\nArquitecto de software: Este rol se enfoca en el diseño y la planificación de la estructura y la arquitectura del backend de una aplicación. El arquitecto de software se encarga de definir las tecnologías, los componentes, los patrones de diseño y las mejores prácticas a seguir para garantizar un sistema eficiente, escalable y fácil de mantener.\nAdministrador de bases de datos: Este rol se ocupa de la gestión y el mantenimiento de las bases de datos utilizadas en el backend. El administrador de bases de datos se encarga de diseñar el esquema de la base de datos, optimizar las consultas, gestionar la seguridad de los datos y asegurarse de que la base de datos funcione correctamente.\nIngeniero de seguridad: Este rol se enfoca en garantizar la seguridad de la aplicación y proteger los datos sensibles. El ingeniero de seguridad se encarga de identificar y abordar vulnerabilidades, implementar medidas de seguridad, como autenticación y cifrado de datos, y garantizar el cumplimiento de estándares y regulaciones de seguridad.\nIngeniero de rendimiento: Este rol se ocupa de optimizar el rendimiento del backend de la aplicación. El ingeniero de rendimiento identifica cuellos de botella, mejora la eficiencia del código, optimiza las consultas de base de datos y utiliza técnicas de caching para garantizar una respuesta rápida y un rendimiento óptimo.\nEstos son solo algunos de los roles comunes en el desarrollo de backend. Dependiendo del tamaño y la complejidad del proyecto, pueden existir otros roles especializados, como especialistas en integración de sistemas, desarrolladores de APIs, expertos en DevOps, entre otros.\n# ¿Qué es BACKEND y FRONTEND? # Los roles en backend # ","date":"9 marzo 2023","permalink":"/platform/levels/level4_php/01backend/intro/","section":"Levels","summary":"Que es el Backend y Su importancia # Que es el Backend # El backend, también conocido como el lado del servidor, se refiere a la parte de un sistema o aplicación informática que se encarga de procesar los datos, realizar cálculos, interactuar con la base de datos y generar las respuestas que son enviadas al cliente o a la interfaz de usuario.","title":"Que es el Backend y Su importancia"},{"content":"Que es el Backend y Su importancia # Que es el Backend # El backend, también conocido como el lado del servidor, se refiere a la parte de un sistema o aplicación informática que se encarga de procesar los datos, realizar cálculos, interactuar con la base de datos y generar las respuestas que son enviadas al cliente o a la interfaz de usuario. Es la parte invisible para los usuarios finales, pero es fundamental para el funcionamiento de cualquier aplicación.\nEl backend se encarga de gestionar la lógica de negocio, la seguridad, la autenticación, la autorización, la gestión de datos y otros aspectos fundamentales de una aplicación. Puede estar compuesto por diferentes componentes, como servidores, bases de datos, APIs (Application Programming Interfaces), frameworks de desarrollo, sistemas de cache, entre otros.\nLa importancia del backend radica en que es responsable de toda la funcionalidad y la lógica detrás de una aplicación. Es el encargado de procesar las solicitudes del usuario, realizar las operaciones necesarias y enviar las respuestas adecuadas. Además, se encarga de gestionar y almacenar los datos de manera segura.\nUn backend sólido y bien diseñado es crucial para garantizar un rendimiento óptimo, una seguridad adecuada, una escalabilidad eficiente y una buena experiencia de usuario. Si el backend no funciona correctamente, puede afectar negativamente la funcionalidad de la aplicación, la seguridad de los datos y la experiencia del usuario.\nEn resumen, el backend es esencial para el funcionamiento de cualquier aplicación y su importancia radica en su capacidad para gestionar la lógica de negocio, los datos y otros aspectos fundamentales, lo que garantiza una aplicación eficiente, segura y con una buena experiencia de usuario.\nRoles de un backend # En el desarrollo de backend, existen varios roles o especialidades que desempeñan diferentes funciones. A continuación, te mencionaré algunos de los roles comunes en el ámbito del backend:\nDesarrollador backend: Es el encargado de escribir el código y construir la lógica de la aplicación en el lado del servidor. Este rol implica conocimientos en diferentes lenguajes de programación como Python, Java, PHP, Ruby, entre otros, así como también el manejo de frameworks y tecnologías específicas.\nArquitecto de software: Este rol se enfoca en el diseño y la planificación de la estructura y la arquitectura del backend de una aplicación. El arquitecto de software se encarga de definir las tecnologías, los componentes, los patrones de diseño y las mejores prácticas a seguir para garantizar un sistema eficiente, escalable y fácil de mantener.\nAdministrador de bases de datos: Este rol se ocupa de la gestión y el mantenimiento de las bases de datos utilizadas en el backend. El administrador de bases de datos se encarga de diseñar el esquema de la base de datos, optimizar las consultas, gestionar la seguridad de los datos y asegurarse de que la base de datos funcione correctamente.\nIngeniero de seguridad: Este rol se enfoca en garantizar la seguridad de la aplicación y proteger los datos sensibles. El ingeniero de seguridad se encarga de identificar y abordar vulnerabilidades, implementar medidas de seguridad, como autenticación y cifrado de datos, y garantizar el cumplimiento de estándares y regulaciones de seguridad.\nIngeniero de rendimiento: Este rol se ocupa de optimizar el rendimiento del backend de la aplicación. El ingeniero de rendimiento identifica cuellos de botella, mejora la eficiencia del código, optimiza las consultas de base de datos y utiliza técnicas de caching para garantizar una respuesta rápida y un rendimiento óptimo.\nEstos son solo algunos de los roles comunes en el desarrollo de backend. Dependiendo del tamaño y la complejidad del proyecto, pueden existir otros roles especializados, como especialistas en integración de sistemas, desarrolladores de APIs, expertos en DevOps, entre otros.\n# ¿Qué es BACKEND y FRONTEND? # Los roles en backend # ","date":"9 marzo 2023","permalink":"/platform/levels/level5_laravel/01taildwind/intro/","section":"Levels","summary":"Que es el Backend y Su importancia # Que es el Backend # El backend, también conocido como el lado del servidor, se refiere a la parte de un sistema o aplicación informática que se encarga de procesar los datos, realizar cálculos, interactuar con la base de datos y generar las respuestas que son enviadas al cliente o a la interfaz de usuario.","title":"Que es el Backend y Su importancia"},{"content":"Nivel 3 React JS # Aqui encontrarás la información que se usará dentro del Nivel 3.\n","date":"9 marzo 2023","permalink":"/platform/levels/level3_react/","section":"Levels","summary":"Nivel 3 React JS # Aqui encontrarás la información que se usará dentro del Nivel 3.","title":"Level3_react"},{"content":"Nivel 4 PHP, mysql y Laravel # Aqui encontrarás la información que se usará dentro del Nivel 4.\n","date":"9 marzo 2023","permalink":"/platform/levels/level4_php/","section":"Levels","summary":"Nivel 4 PHP, mysql y Laravel # Aqui encontrarás la información que se usará dentro del Nivel 4.","title":"Level4_php"},{"content":"Nivel 5 Taidlwine, livewire, mysql y Laravel # Aqui encontrarás la información que se usará dentro del Nivel 5.\n","date":"9 marzo 2023","permalink":"/platform/levels/level5_laravel/","section":"Levels","summary":"Nivel 5 Taidlwine, livewire, mysql y Laravel # Aqui encontrarás la información que se usará dentro del Nivel 5.","title":"Level5_Laravel"},{"content":"Las dos estructuras de datos más usadas en JavaScript son Object y Array.\nLos objetos nos permiten crear una simple entidad que almacena items con una clave cada uno. los arrays nos permiten reunir items en una lista ordenada. Pero cuando los pasamos a una función, tal vez no necesitemos un objeto o array como un conjunto sino en piezas individuales.\nLa asignación desestructurante es una sintaxis especial que nos permite “desempaquetar” arrays u objetos en varias variables, porque a veces es más conveniente.\nLa desestructuración también funciona bien con funciones complejas que tienen muchos argumentos, valores por defecto, etcétera. Pronto lo veremos.\nDesestructuración de Arrays # Un ejemplo de cómo el array es desestructurado en variables:\n1 2 3 4 5 6 7 8 9 10 // tenemos un array con el nombre y apellido let arr = [\u0026#34;John\u0026#34;, \u0026#34;Smith\u0026#34;] // asignación desestructurante // fija firstName = arr[0] // y surname = arr[1] let [firstName, surname] = arr; alert(firstName); // John alert(surname); // Smith Ahora podemos trabajar con variables en lugar de miembros de array.\nSe ve genial cuando se combina con split u otro método que devuelva un array:\nlet [firstName, surname] = \u0026#34;John Smith\u0026#34;.split(\u0026#39; \u0026#39;); alert(firstName); // John alert(surname); // Smith Como puedes ver, la sintaxis es simple. Aunque hay varios detalles peculiares. Veamos más ejemplos para entenderlo mejor.\n“Desestructuración” no significa “destructivo”. Se llama \u0026ldquo;asignación desestructurante\u0026rdquo; porque \u0026ldquo;desestructura\u0026rdquo; al copiar elementos dentro de variables, pero el array en sí no es modificado. Es sólo una manera más simple de escribir:\n// let [firstName, surname] = arr; let firstName = arr[0]; let surname = arr[1]; Ignorar elementos utilizando comas Los elementos no deseados de un array también pueden ser descartados por medio de una coma extra:\n// segundo elemento no es necesario let [firstName, , title] = [\u0026#34;Julius\u0026#34;, \u0026#34;Caesar\u0026#34;, \u0026#34;Consul\u0026#34;, \u0026#34;of the Roman Republic\u0026#34;]; alert( title ); // Consul Truco para intercambiar variables Hay un conocido truco para intercambiar los valores de dos variables usando asignación desestructurante:\nlet guest = \u0026#34;Jane\u0026#34;; let admin = \u0026#34;Pete\u0026#34;; // Intercambiemos valores: hagamos guest=Pete, admin=Jane [guest, admin] = [admin, guest]; alert(`${guest} ${admin}`); // Pete Jane (¡intercambiados con éxito!) Aquí creamos un array temporal de dos variables e inmediatamente lo desestructuramos con el orden cambiado.\nPodemos intercambiar más de dos variables de este modo. Desestructuración de objetos # La asignación desestructurante también funciona con objetos.\nLa sintaxis básica es:\nlet {var1, var2} = {var1:…, var2:…} Debemos tener un símil-objeto en el lado derecho, el que queremos separar en variables. El lado izquierdo contiene un símil-objeto \u0026ldquo;pattern\u0026rdquo; para sus propiedades correspondientes. En el caso más simple, es la lista de nombres de variables en {...}.\nPor ejemplo:\nlet options = { title: \u0026#34;Menu\u0026#34;, width: 100, height: 200 }; let {title, width, height} = options; alert(title); // Menu alert(width); // 100 alert(height); // 200 Las propiedades options.title, options.width y options.height son asignadas a las variables correspondientes.\nNo importa el orden sino los nombres. Esto también funciona:\n// cambiado el orden en let {...} let {height, width, title} = { title: \u0026#34;Menu\u0026#34;, height: 200, width: 100 } El patrón de la izquierda puede ser más complejo y especificar el mapeo entre propiedades y variables.\nSi queremos asignar una propiedad a una variable con otro nombre, por ejemplo que options.width vaya en la variable llamada w, lo podemos establecer usando dos puntos:\nlet options = { title: \u0026#34;Menu\u0026#34;, width: 100, height: 200 }; // { propiedadOrigen: variableObjetivo } let {width: w, height: h, title} = options; // width -\u0026gt; w // height -\u0026gt; h // title -\u0026gt; title alert(title); // Menu alert(w); // 100 alert(h); // 200 Los dos puntos muestran \u0026ldquo;qué : va dónde\u0026rdquo;. En el ejemplo de arriba la propiedad width va a w, height va a h, y title es asignado al mismo nombre.\nSi tenemos un objeto complejo con muchas propiedades, podemos extraer solamente las que necesitamos:\nlet options = { title: \u0026#34;Menu\u0026#34;, width: 100, height: 200 }; // sólo extrae título como variable let { title } = options; alert(title); // Menu La trampa si no hay `let` En los ejemplos de arriba, las variables fueron declaradas en la asignación: let {…} = {…}. Por supuesto que también podemos usar variables existentes, sin let. Pero hay una trampa. Esto no funcionará:\nlet title, width, height; // error en esta línea {title, width, height} = {title: \u0026#34;Menu\u0026#34;, width: 200, height: 100}; El problema es que JavaScript trata al {...} como un bloque de código en el flujo principal de código (no dentro de otra expresión). Estos bloques de código pueden ser usados para agrupar sentencias, de esta manera:\n{ // una bloque de código let message = \u0026#34;Hola\u0026#34;; // ... alert( message ); } Aquí JavaScript supone que tenemos un bloque de código, es por eso que hay un error. Nosotros en cambio queremos desestructuración. Para mostrarle a JavaScript que no es un bloque de código, podemos rodear la expresión entre paréntesis (...): let title, width, height; // ahora está bien ( {title, width, height} = {title: \u0026#34;Menu\u0026#34;, width: 200, height: 100} ); alert( title ); // Menu Tutorial Desestructuración # En el siguiente video verás algunos ejemplos de desestructuración de objetos y arrays.\n","date":"21 febrero 2023","permalink":"/platform/levels/level2_23/dia11/destruc/","section":"Levels","summary":"Las dos estructuras de datos más usadas en JavaScript son Object y Array.","title":"Destructuring (Destructuración)"},{"content":"Creacion de API Local # Sabemos que comprender el concepto de API es fundamental para el desarrollo de aplicaciones web. En este capítulo vamos a crear una API local para poder consumirla en el siguiente capítulo.\nEn este video presta atencion a la forma en la que se crea el API de manera local. Es sencilla pero te servirá para enteder el concepto de una API, como crearla y como funciona, almenos de una forma sencilla.\nAPI REST: Consumo de API # Ahora ya que tenemos nuestra API creada, veremos como consumirla con una herramienta llamada INSOMNIA que nos ayuda a hacer pruebas con API\u0026rsquo;s de manera sencilla.\n","date":"21 febrero 2023","permalink":"/platform/levels/level2_23/dia09/apis/","section":"Levels","summary":"Creacion de API Local # Sabemos que comprender el concepto de API es fundamental para el desarrollo de aplicaciones web.","title":"Apis"},{"content":"Callbacks # Una función de callback es una función que se pasa a otra función como un argumento, que luego se invoca dentro de la función externa para completar algún tipo de rutina o acción.\nTerminos a considerar Callback\u0026rsquo;s es un concepto que pueden llegar a ser confuso, pero es importante entenderlos para poder consumir API\u0026rsquo;s. Ya hemos visto un poco de ellos en los métodos de Array. Para esto debemos entender que significa las siguientes palabras: Sincrono: Significa que las instrucciones se ejecutan una a una, en el orden en que fueron escritas. Asincrono: Significa que las instrucciones se ejecutan en cualquier orden, no necesariamente en el orden en que fueron escritas. Secuencia de la función # Las funciones de JavaScript se ejecutan en la secuencia en que se llaman. No en la secuencia en que se definen.\nPor ejemplo, al tener un documento HTML con un elemento \u0026lt;p\u0026gt; con el id demo.\nEste ejemplo terminará mostrando \u0026ldquo;Goodbye\u0026rdquo;:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function myDisplayer(some) { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = some; } function myFirst() { myDisplayer(\u0026#34;Hello\u0026#34;); } function mySecond() { myDisplayer(\u0026#34;Goodbye\u0026#34;); } myFirst(); mySecond(); En este ejemplo, estamos invocando primero a la funcion myFirst la cual invoca a la funcion myDisplayer con el argumento \u0026quot;Hello\u0026quot;. Luego, invocamos a la funcion mySecond la cual invoca a la funcion myDisplayer con el argumento \u0026quot;Goodbye\u0026quot;.\nEste otro ejemplo terminará mostrando \u0026ldquo;Hello\u0026rdquo;:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function myDisplayer(some) { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = some; } function myFirst() { myDisplayer(\u0026#34;Hello\u0026#34;); } function mySecond() { myDisplayer(\u0026#34;Goodbye\u0026#34;); } mySecond(); myFirst(); Convirtiendo a callback # Ahora, vamos a convertir el ejemplo anterior en un callback. Para esto, vamos a crear una función que reciba como argumento una función y un argumento para esa función.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function myDisplayer(some) { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = some; } function myFirst(callback) { callback(\u0026#34;Hello\u0026#34;); } function mySecond(callback) { callback(\u0026#34;Goodbye\u0026#34;); } myFirst(myDisplayer); mySecond(myDisplayer); En este ejemplo, la función myFirst recibe como argumento la función myDisplayer y el argumento \u0026quot;Hello\u0026quot;. Luego, la función mySecond recibe como argumento la función myDisplayer y el argumento \u0026quot;Goodbye\u0026quot;. Analiza el código con calma y entiende como funciona. puedes hacer unas pruebas con el.\nAl trabajar con Arrays y usar sus métodos como filter, forEach, map entre otros, usamos funciones callbacks. Por ejemplo, el método filter recibe como argumento una función que se ejecuta para cada elemento del array. Si la función retorna true, el elemento se agrega al nuevo array. Si retorna false, el elemento no se agrega al nuevo array.\nYa hemos usado esos métodos durante este curso, pero comprender el concepto de callback es importante para crear nuestras propias funciones que reciban como argumento una función. Al trabajar con API\u0026rsquo;s, es muy común usar funciones callbacks.\nCallback explicación por Midudev # En el siguiente video aprendarás con ejemplos de código cómo funciona el concepto de callback y cómo usarlo en tus proyectos. Recuerda que existen más videos sobre el tema, pero este concepto puede llegar a ser complicado, así que te recomendamos ir con calma y analizar el código que se escribe.\n","date":"20 febrero 2023","permalink":"/platform/levels/level2_23/dia08/callback/","section":"Levels","summary":"Callbacks # Una función de callback es una función que se pasa a otra función como un argumento, que luego se invoca dentro de la función externa para completar algún tipo de rutina o acción.","title":"Callback | Consumo de API's"},{"content":"En este día seguiremos aprendiendo sobre los archivos JSON y Fetch.\nJSON # En el siguiente video de Fazt aprenderás las bases de este formato de datos con el cual se suele intercambiar información entre aplicaciones.\nFetch # JavaScript puede enviar peticiones de red al servidor y cargar nueva información siempre que se necesite.\nPor ejemplo, podemos utilizar una petición de red para:\nCrear una orden, Cargar información de usuario, Recibir las últimas actualizaciones desde un servidor, …etc. …Y todo esto sin la necesidad de refrescar la página.\nSe utiliza el término global “AJAX” (abreviado Asynchronous JavaScript And XML, en español: “JavaScript y XML Asincrónico”) para referirse a las peticiones de red originadas desde JavaScript. Sin embargo, no estamos necesariamente condicionados a utilizar XML dado que el término es antiguo y es por esto que el acrónimo XML se encuentra aquí. Probablemente lo hayáis visto anteriormente.\nExisten múltiples maneras de enviar peticiones de red y obtener información de un servidor.\nComenzaremos con el el método fetch() que es moderno y versátil. Este método no es soportado por navegadores antiguos (sin embargo se puede incluir un polyfill), pero es perfectamente soportado por los navegadores actuales y modernos.\nLa sintaxis básica es la siguiente:\nlet promise = fetch(url, [options]) url – representa la dirección URL a la que deseamos acceder. options – representa los parámetros opcionales, como puede ser un método o los encabezados de nuestra petición, etc. Este método puede parece confuso, debido a que usa un concepto llamado “promesas” y asincronía. Pero no te preocupes, en los siguientes ejemplos veremos cómo funciona.\nEn este video entenderemos de manera sencilla como funciona el método fetch().\nEjercicio de Consumo de API\u0026rsquo;s # En el siguiente video de Fazt aprenderás a consumir una API de forma sencilla.\n","date":"20 febrero 2023","permalink":"/platform/levels/level2_23/dia06/json/","section":"Levels","summary":"En este día seguiremos aprendiendo sobre los archivos JSON y Fetch.","title":"Json y Fetch"},{"content":"A medida que nuestra aplicación crece, queremos dividirla en múltiples archivos, llamados “módulos”. Un módulo puede contener una clase o una biblioteca de funciones para un propósito específico.\nDurante mucho tiempo, JavaScript existió sin una sintaxis de módulo a nivel de lenguaje. Eso no fue un problema, porque inicialmente los scripts eran pequeños y simples, por lo que no era necesario.\nPero con el tiempo los scripts se volvieron cada vez más complejos, por lo que la comunidad inventó una variedad de formas de organizar el código en módulos, bibliotecas especiales para cargar módulos a pedido.\nPara nombrar algunos (por razones históricas):\nAMD \u0026ndash; uno de los sistemas de módulos más antiguos, implementado inicialmente por la biblioteca require.js. CommonJS \u0026ndash; el sistema de módulos creado para el servidor Node.js. UMD \u0026ndash; un sistema de módulos más, sugerido como universal, compatible con AMD y CommonJS. Ahora, todo esto se convierte lentamente en una parte de la historia, pero aún podemos encontrarlos en viejos scripts.\nEl sistema de módulos a nivel de idioma apareció en el estándar en 2015, evolucionó gradualmente desde entonces y ahora es compatible con todos los principales navegadores y en Node.js. Así que estudiaremos los módulos modernos de Javascript de ahora en adelante.\nQué es un módulo? # Un módulo es solo un archivo. Un script es un módulo. Tan sencillo como eso.\nLos módulos pueden cargarse entre sí y usar directivas especiales export e import para intercambiar funcionalidad, llamar a funciones de un módulo de otro:\nLa palabra clave export etiqueta las variables y funciones que deberían ser accesibles desde fuera del módulo actual. import permite importar funcionalidades desde otros módulos. Por ejemplo, si tenemos un archivo sayHi.js que exporta una función:\n// 📁 sayHi.js export function sayHi(user) { alert(`Hello, ${user}!`); } \u0026hellip;Luego, otro archivo puede importarlo y usarlo:\n// 📁 main.js import {sayHi} from \u0026#39;./sayHi.js\u0026#39;; alert(sayHi); // function... sayHi(\u0026#39;John\u0026#39;); // Hello, John! La directiva import carga el módulo por la ruta ./sayHi.js relativo con el archivo actual, y asigna la función exportada sayHi a la variable correspondiente.\nEjecutemos el ejemplo en el navegador.\nComo los módulos admiten palabras clave y características especiales, debemos decirle al navegador que un script debe tratarse como un módulo, utilizando el atributo \u0026lt;script type =\u0026quot; module \u0026quot;\u0026gt;.\nEl navegador busca y evalúa automáticamente el módulo importado (y sus importaciones si es necesario), y luego ejecuta el script.\nLos módulos funcionan solo a través de HTTP(s), no localmente Si intenta abrir una página web localmente a través del protocolo file://, encontrará que las directivas import y export no funcionan. Use un servidor web local, como static-server o use la capacidad de \u0026ldquo;servidor en vivo\u0026rdquo; de su editor, como VS Code Live Server Extension para probar los módulos. Import y Export # En el siguiente video del canal de youtube Fazt Code se explica de manera muy clara y sencilla como importar y exportar modulos en javascript.\n","date":"20 febrero 2023","permalink":"/platform/levels/level2_23/dia04/mod/","section":"Levels","summary":"A medida que nuestra aplicación crece, queremos dividirla en múltiples archivos, llamados “módulos”.","title":"EcmaScript Modules"},{"content":"Arrays # Hace algunas clases atras, aprendimos las bases de los arrays, sus bases y tambien vimos como este tipo de dato nos permite almacenar multiples valores en una sola variable. También vimos que por medio de algunos metodos, nos permite recorrer su información de manera más sencilla, sin embargo, entender estos métodos no es necesariamente sencillo.\nHoy vamos a aprender un poco más sobre los arrays, y veremos como podemos utilizarlos para almacenar información de manera más compleja. También repasaremos los distintos métodos que tiene y cómo las funciones flecha nos pueden ayudar a simplificar el código.\nArrays Multidimensionales # Los arrays pueden tener items que a su vez sean arrays. Podemos usarlos como arrays multidimensionales, por ejemplo para almacenar matrices(arrays):\nlet matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]; En este caso, matrix es una matriz de 3 filas y 3 columnas. Podemos acceder a los elementos de la matriz utilizando dos índices, uno para la fila y otro para la columna. Por ejemplo, para acceder al elemento en la segunda fila y la tercera columna, podemos hacerlo así:\nalert( matrix[1][1] ); // 5, el elemento central También podemos utilizar un bucle for anidado para recorrer todos los elementos de la matriz. Por ejemplo:\nfor (let i = 0; i \u0026lt; miMatriz.length; i++) { for (let j = 0; j \u0026lt; miMatriz[i].length; j++) { console.log(miMatriz[i][j]); } } toString # Los arrays tienen su propia implementación del método toString que devuelve un lista de elementos separados por coma.\nPor ejemplo:\nlet arr = [1, 2, 3]; alert( String(arr) === \u0026#39;1,2,3\u0026#39; ); // true alert( arr.toString() === \u0026#39;1,2,3\u0026#39; ); // true Probemos esto también:\nalert( [] + 1 ); // \u0026#34;1\u0026#34; alert( [1] + 1 ); // \u0026#34;11\u0026#34; alert( [1,2] + 1 ); // \u0026#34;1,21\u0026#34; Los arrays no tienen Symbol.toPrimitive ni un valueOf viable, ellos implementan la conversión toString solamente, así [] se vuelve una cadena vacía, [1] se vuelve \u0026quot;1\u0026quot; y [1,2] se vuelve \u0026quot;1,2\u0026quot;.\nCuando el operador binario más \u0026quot;+\u0026quot; suma algo a una cadena, lo convierte a cadena también, entonces lo siguiente se ve así:\nalert( \u0026#34;\u0026#34; + 1 ); // \u0026#34;1\u0026#34; alert( \u0026#34;1\u0026#34; + 1 ); // \u0026#34;11\u0026#34; alert( \u0026#34;1,2\u0026#34; + 1 ); // \u0026#34;1,21\u0026#34; No compares arrays con == # Las arrays en JavaScript, a diferencia de otros lenguajes de programación, no deben ser comparadas con el operador ==.\nEste operador no tiene un tratamiento especial para arrays, trabaja con ellas como con cualquier objeto.\nRecordemos las reglas:\nDos objetos son iguales == solo si hacen referencia al mismo objeto. Si uno de los argumentos de == es un objeto y el otro es un primitivo, entonces el objeto se convierte en primitivo. …Con la excepción de null y undefined que son iguales == entre sí y nada más. La comparación estricta === es aún más simple, ya que no convierte tipos.\nEntonces, si comparamos arrays con ==, nunca son iguales, a no ser que comparemos dos variables que hacen referencia exactamente a la misma array.\nPor ejemplo:\nalert( [] == [] ); // falso alert( [0] == [0] ); // falso Estas arrays son técnicamente objetos diferentes. Así que no son iguales. El operador == no hace comparaciones de elemento a elemento.\nComparaciones con primitivos también pueden dar resultados aparentemente extraños:\nalert( 0 == [] ); // verdadero alert(\u0026#39;0\u0026#39; == [] ); // falso Aquí, en ambos casos, comparamos un primitivo con un objeto array. Entonces la array [] se convierte a primitivo para el propósito de comparar y se convierte en una string vacía ''.\nLuego el proceso de comparación continúa con los primitivos.\n// después de que [] se convierta en \u0026#39;\u0026#39; alert( 0 == \u0026#39;\u0026#39; ); // verdadero, ya que \u0026#39;\u0026#39; se convierte en el número 0 alert(\u0026#39;0\u0026#39; == \u0026#39;\u0026#39; ); // falso, sin conversión de tipos, strings diferentes Entonces, ¿cómo comparamos arrays?\nSimple: no utilices el operador ==. En lugar, compáralas elemento a elemento en un bucle o utilizando métodos de iteración explicados en la siguiente sección.\nMétodos de Array # Objects # Atajo para valores de propiedad # En el código real, a menudo usamos variables existentes como valores de los nombres de propiedades.\nPor ejemplo:\nfunction makeUser(name, age) { return { name: name, age: age, // ...otras propiedades }; } let user = makeUser(\u0026#34;John\u0026#34;, 30); alert(user.name); // John En el ejemplo anterior las propiedades tienen los mismos nombres que las variables. El uso de variables para la creación de propiedades es tán común que existe un atajo para valores de propiedad especial para hacerla más corta.\nEn lugar de name:name, simplemente podemos escribir name, tal cual:\nfunction makeUser(name, age) { return { name, // igual que name:name age, // igual que age:age // ... }; } Podemos usar ambos tipos de notación en un mismo objeto, la normal y el atajo:\nlet user = { name, // igual que name:name age: 30 }; Métodos del objeto # Los objetos son creados usualmente para representar entidades del mundo real, como usuarios, órdenes, etc.:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; Y en el mundo real un usuario puede actuar: seleccionar algo del carrito de compras, hacer login, logout, etc.\nLas acciones son representadas en JavaScript por funciones en las propiedades.\nEjemplos de Métodos # Para empezar, enseñemos al usuario user a decir hola:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; user.sayHi = function() { alert(\u0026#34;¡Hola!\u0026#34;); }; user.sayHi(); // ¡Hola! Aquí simplemente usamos una expresión de función para crear la función y asignarla a la propiedad user.sayHi del objeto.\nEntonces la llamamos con user.sayHi(). ¡El usuario ahora puede hablar!\nUna función que es la propiedad de un objeto es denominada su método.\nAsí, aquí tenemos un método sayHi del objeto user.\nPor supuesto, podríamos usar una función pre-declarada como un método, parecido a esto:\n1 2 3 4 5 6 7 8 9 10 let user = { // ... }; // primero, declara function sayHi() { alert(\u0026#34;¡Hola!\u0026#34;); }; // entonces la agrega como un método user.sayHi = sayHi; user.sayHi(); // ¡Hola! Programación orientada a objetos Cuando escribimos nuestro código usando objetos que representan entidades, eso es llamado Programación Orientada a Objetos, abreviado: \u0026ldquo;POO\u0026rdquo;.\nPOO (OOP sus siglas en inglés) es una cosa grande, un ciencia interesante en sí misma. ¿Cómo elegir las entidades correctas? ¿Cómo organizar la interacción entre ellas? Eso es arquitectura, y hay muy buenos libros del tópico como \u0026ldquo;Patrones de diseño: Elementos de software orientado a objetos reutilizable\u0026rdquo; de E. Gamma, R. Helm, R. Johnson, J. Vissides o \u0026ldquo;Análisis y Diseño Orientado a Objetos\u0026rdquo; de G. Booch, y otros. Más sobre Métodos # ","date":"17 febrero 2023","permalink":"/platform/levels/level2_23/dia03/obj/","section":"Levels","summary":"Arrays # Hace algunas clases atras, aprendimos las bases de los arrays, sus bases y tambien vimos como este tipo de dato nos permite almacenar multiples valores en una sola variable.","title":"Arrays y Objetos"},{"content":"Hay otra sintaxis muy simple y concisa para crear funciones, que a menudo es mejor que las Expresiones de funciones.\nSe llama “funciones de flecha”, porque se ve así:\nlet func = (arg1, arg2, ..., argN) =\u0026gt; expression; Esto crea una función func que acepta los parámetros arg1..argN, luego evalúa la expression del lado derecho mediante su uso y devuelve su resultado.\nEn otras palabras, es la versión más corta de:\nlet func = function(arg1, arg2, ..., argN) { return expression; }; Veamos un ejemplo concreto:\nlet sum = (a, b) =\u0026gt; a + b; /* Esta función de flecha es una forma más corta de: let sum = function(a, b) { return a + b; }; */ alert( sum(1, 2) ); // 3 Como puedes ver, (a, b) =\u0026gt; a + b significa una función que acepta dos argumentos llamados a y b. Tras la ejecución, evalúa la expresión a + b y devuelve el resultado.\nSi solo tenemos un argumento, se pueden omitir paréntesis alrededor de los parámetros, lo que lo hace aún más corto.\nPor ejemplo:\n1 2 3 4 let double = n =\u0026gt; n * 2; // Más o menos lo mismo que: let double = function(n) { return n * 2 } alert( double(3) ); // 6 Si no hay parámetros, los paréntesis estarán vacíos; pero deben estar presentes:\nlet sayHi = () =\u0026gt; alert(\u0026#34;¡Hola!\u0026#34;); sayHi(); Las funciones de flecha pueden parecer desconocidas y poco legibles al principio, pero eso cambia rápidamente a medida que los ojos se acostumbran a la estructura.\nSon muy convenientes para acciones simples de una línea, cuando somos demasiado flojos para escribir muchas palabras.\nFunciones de flecha multilínea # Las funciones de flecha que estuvimos viendo eran muy simples. Toman los parámetros a la izquierda de =\u0026gt;, los evalúan y devuelven la expresión del lado derecho.\nA veces necesitamos una función más compleja, con múltiples expresiones o sentencias. En ese caso debemos encerrarlos entre llaves. La diferencia principal es que las llaves necesitan usar un return para devolver un valor (tal como lo hacen las funciones comunes).\nComo esto:\n1 2 3 4 5 let sum = (a, b) =\u0026gt; { // la llave abre una función multilínea let result = a + b; return result; // si usamos llaves, entonces necesitamos un \u0026#34;return\u0026#34; explícito }; alert( sum(1, 2) ); // 3 Profundizando en Arrow Functions # Para comprender mejor las funciones flecha (Arrow Functions), veremos el siguiente video del canal de youtube de jonmircha donde nos explica más acerca de lo que son este tipo de funciones, sus similitudes con las que ya conocemos, sus ventajas y diferencias:\nEn el siguiente video, seguiremos aprendiendo de estas funciones, y como usarlas en lugar de las funciones normales:\nResumen # Las funciones de flecha son útiles para acciones simples, especialmente las de una sola línea. Vienen en dos variantes:\nSin llaves: (...args) =\u0026gt; expression \u0026ndash; el lado derecho es una expresión: la función la evalúa y devuelve el resultado. Pueden omitirse los paréntesis si solo hay un argumento, por ejemplo n =\u0026gt; n*2. Con llaves: (...args) =\u0026gt; { body } \u0026ndash; las llaves nos permiten escribir varias declaraciones dentro de la función, pero necesitamos un return explícito para devolver algo. ","date":"16 febrero 2023","permalink":"/platform/levels/level2_23/dia02/arrow/","section":"Levels","summary":"Hay otra sintaxis muy simple y concisa para crear funciones, que a menudo es mejor que las Expresiones de funciones.","title":"Arrow Functions (Funciones Flecha)"},{"content":"Comandos de la terminal # Esto es un pequeño repaso de lo que vimos el día de ayer en clase. Si entiendes algunas cosas básicas de la terminal, avanza a la siguiente sección.\nAntes de aprender los comandos de git, debemos aprender algunos comandos de la terminal. Esto es importante porque git es una herramienta que se ejecuta desde la terminal. Por lo tanto, debemos saber cómo usar la terminal para poder usar git. Iremos familiarizándonos con la terminal a medida que avancemos en el curso. Aunque hay una manera mas sencilla de trabajar con GIT desde VS code, estas opciones son hasta cierto punto limitadas. Por lo tanto, es importante que aprendas a usar la terminal.\n# Configuración y bases de git Hoy aprenderemos a configurar git y a usar los comandos básicos para trabajar con el. adicionalmente, recuerda que existe la documentación oficial de GIT, te la dejo aquí abajo para que te apoyes en ella de la mano de lo que aprenderás en estos videos:+\nGit Documentation\ngit init # Nota: En este video se habla de personalizar la terminal, te recomiendo no hacerlo, ya que puede causar problemas con el funcionamiento de la misma si no entiendes su uso, además que podrías gastar mucho tiempo en intentar realizar esto.\nRamas de GIT # Las 3 areas de GIT # git add y git commit # ","date":"15 febrero 2023","permalink":"/platform/java/git/comandos/","section":"Javae","summary":"Comandos de la terminal # Esto es un pequeño repaso de lo que vimos el día de ayer en clase.","title":"comandos en GIT"},{"content":" ¿Qué es el control de versiones? # EL control de versiones es la práctica de rastrear y gestionar los cambios que se realizan en un archivo o conjunto de archivos a lo largo del tiempo. Los sitemas de control de versiones son herramientas de software que ayudan a los equipos de software a gestionar los cambios en el código fuente a lo largo del tiempo. Si bien los sistemas de control de versiones son utilizados principalmente por programadores y desarrolladores de software, cualquier persona que trabaje con archivos puede beneficiarse de la utilización de un sistema de control de versiones.\nEl software de control de versiones realiza un seguimiento de todas las modificaciones en el código en un tipo especial de base de datos. Si se comete un error, los desarrolladores pueden ir hacia atrás en el tiempo y comparar las versiones anteriores del código para ayudar a resolver el error, al tiempo que se minimizan las interrupciones para todos los miembros del equipo.\nLos desarrolladores de software que trabajan en equipos están escribiendo continuamente nuevo código fuente y cambiando el que ya existe. El código de un proyecto, una aplicación o un componente de software normalmente se organiza en una estructura de carpetas o \u0026ldquo;árbol de archivos\u0026rdquo;. Un desarrollador del equipo podría estar trabajando en una nueva función mientras otro desarrollador soluciona un error no relacionado cambiando código. Cada desarrollador podría hacer sus cambios en varias partes del árbol de archivos.\nVentajas de los sistemas de control de versiones # Los sistemas de control de versiones ofrecen una serie de ventajas para los equipos de desarrollo de software, incluidas las siguientes:\nSincronización de archivos: Los sistemas de control de versiones permiten a los desarrolladores trabajar en el mismo archivo o conjunto de archivos a la vez. Los sistemas de control de versiones pueden detectar y resolver conflictos entre los cambios realizados por diferentes desarrolladores.\nSeguimiento de cambios: Los sistemas de control de versiones mantienen un registro de todos los cambios realizados en cada archivo o conjunto de archivos a lo largo del tiempo. Si se encuentra un error en el código, los desarrolladores pueden volver a una versión anterior del archivo o conjunto de archivos para ayudar a solucionar el problema.\nReutilización de código: Los sistemas de control de versiones permiten a los desarrolladores recuperar versiones anteriores de un archivo o conjunto de archivos. Esto puede ser útil cuando se desarrolla una nueva función que se basa en el código de una función anterior que ya no se usa.\nSeguridad: Los sistemas de control de versiones mantienen una copia de seguridad de todas las versiones de un archivo o conjunto de archivos. Si un archivo se corrompe o se elimina accidentalmente, los desarrolladores pueden recuperar una versión anterior del archivo desde el sistema de control de versiones.\nColaboración: Los sistemas de control de versiones permiten a los desarrolladores trabajar en equipo en el mismo archivo o conjunto de archivos. Los sistemas de control de versiones pueden detectar y resolver conflictos entre los cambios realizados por diferentes desarrolladores.\nSeguimiento de errores: Los sistemas de control de versiones mantienen un registro de cada error encontrado en el código. Cuando se encuentra un error, los desarrolladores pueden volver a una versión anterior del archivo o conjunto de archivos para ayudar a solucionar el problema.\nReutilización de código: Los sistemas de control de versiones permiten a los desarrolladores recuperar versiones anteriores de un archivo o conjunto de archivos. Esto puede ser útil cuando se desarrolla una nueva función que se basa en el código de una función anterior que ya no se usa.\nSeguridad: Los sistemas de control de versiones mantienen una copia de seguridad de todas las versiones de un archivo o conjunto de archivos\nQué es Git # Hoy en día, Git es, con diferencia, el sistema de control de versiones moderno más utilizado del mundo. Git es un proyecto de código abierto maduro y con un mantenimiento activo que desarrolló originalmente Linus Torvalds, el famoso creador del kernel del sistema operativo Linux, en 2005.\nGit es un sistema de control de versiones distribuido, lo que significa que cada desarrollador tiene una copia completa de todos los archivos, el historial completo de versiones de todos los archivos y la capacidad de ver el historial completo de todas las versiones de cada archivo. Los desarrolladores pueden trabajar en el código fuente de forma local y luego sincronizar sus cambios con otros desarrolladores a través de Internet o una red local. Git también permite que los desarrolladores trabajen en el mismo archivo a la vez, lo que facilita la colaboración en el desarrollo de software.\n¿Por qué usar Git? # Git es una herramienta poderosa que puede ayudar a los desarrolladores a gestionar el código fuente de un proyecto. Si bien la mayoría de los desarrolladores de software utilizan Git para gestionar proyectos de código abierto, también se puede utilizar para gestionar proyectos privados. Git es una herramienta de control de versiones distribuido, lo que significa que cada desarrollador tiene una copia completa de todos los archivos, el historial completo de versiones de todos los archivos y la capacidad de ver el historial completo de todas las versiones de cada archivo. Los desarrolladores pueden trabajar en el código fuente de forma local y luego sincronizar sus cambios con otros desarrolladores a través de Internet o una red local. Git también permite que los desarrolladores trabajen en el mismo archivo a la vez, lo que facilita la colaboración en el desarrollo de software.\nGIT # Para seguir aprendiendo GIT, analiza con calma el siguiente video, haz pausas, toma nota, investiga sobre un termino que escuches y no entiendas. Es importante que lo analices con calma y aunque veremos a detalle cada uno de los conceptos a lo largo de este nivel, presta atencion de como funciona de manera general este sistema.\nInstalación de GIT # Sigue los pasos que verás en el video para instalar GIT en tu computadora, mira el video que corresponda a tu sistena operativo.\nNo avances sin terminar la instalación A partir de ahora usaremos git y github para nuestros proyectos, por ello es importante que lo instales en tu computadora. No es opcional. Si llegas a tener dificultades con la instalación, no dudes en preguntar en el canal de Discord, pero antes que comience la clase de zoom, debes tenerlo instalado. GIT en Windows # GIT en MacOS # Este video empieza en el minuto 14:35. Solo mira el fragmento donde se habla de la instalación de GIT, luego analizaremos más partes de este segmento. Este segmento termina en el minuto 24:00.\nAcerca de los video tutoriales # Durante este nivel, nos apoyaremos principalmente en el tutoríal del canal de youtube FreeCodCamp Español y tambien del canal de youtube MoureDev. Pondremos otros recursos según sea neceario.\nEsto videos duran en total más de 5 horas c/u, e iremos viendo los segmentos que necesitemos por clase.\ncomo ves a la derecha, el video está segmentado por temas. Al inicial una nueva lección, el video se iniciará en el segmento correspondiente y se detendrá al final de la lección. Algunas cosas que debes tener en cuenta es lo siguiente:\nEstos segmentos no suelen durar mucho, sin embargo se espera que no solo reproduzcas el video, sino que pruebes el código que se muestra en el video y lo entiendas. Si no entiendes algo, puedes detener el video y preguntar a tu profesor. Algunos segmentos son muy cortos, por lo que se recomienda que los veas dos veces para que puedas entenderlos mejor. Buscar información adicional es completamente válido. Si un tema no te queda claro, puedes buscar en internet y preguntar a tu profesor por el canal de Discord. ","date":"15 febrero 2023","permalink":"/platform/java/git/intro/","section":"Javae","summary":"¿Qué es el control de versiones?","title":"GIT"},{"content":" ¿Qué es el control de versiones? # EL control de versiones es la práctica de rastrear y gestionar los cambios que se realizan en un archivo o conjunto de archivos a lo largo del tiempo. Los sitemas de control de versiones son herramientas de software que ayudan a los equipos de software a gestionar los cambios en el código fuente a lo largo del tiempo. Si bien los sistemas de control de versiones son utilizados principalmente por programadores y desarrolladores de software, cualquier persona que trabaje con archivos puede beneficiarse de la utilización de un sistema de control de versiones.\nEl software de control de versiones realiza un seguimiento de todas las modificaciones en el código en un tipo especial de base de datos. Si se comete un error, los desarrolladores pueden ir hacia atrás en el tiempo y comparar las versiones anteriores del código para ayudar a resolver el error, al tiempo que se minimizan las interrupciones para todos los miembros del equipo.\nLos desarrolladores de software que trabajan en equipos están escribiendo continuamente nuevo código fuente y cambiando el que ya existe. El código de un proyecto, una aplicación o un componente de software normalmente se organiza en una estructura de carpetas o \u0026ldquo;árbol de archivos\u0026rdquo;. Un desarrollador del equipo podría estar trabajando en una nueva función mientras otro desarrollador soluciona un error no relacionado cambiando código. Cada desarrollador podría hacer sus cambios en varias partes del árbol de archivos.\nVentajas de los sistemas de control de versiones # Los sistemas de control de versiones ofrecen una serie de ventajas para los equipos de desarrollo de software, incluidas las siguientes:\nSincronización de archivos: Los sistemas de control de versiones permiten a los desarrolladores trabajar en el mismo archivo o conjunto de archivos a la vez. Los sistemas de control de versiones pueden detectar y resolver conflictos entre los cambios realizados por diferentes desarrolladores.\nSeguimiento de cambios: Los sistemas de control de versiones mantienen un registro de todos los cambios realizados en cada archivo o conjunto de archivos a lo largo del tiempo. Si se encuentra un error en el código, los desarrolladores pueden volver a una versión anterior del archivo o conjunto de archivos para ayudar a solucionar el problema.\nReutilización de código: Los sistemas de control de versiones permiten a los desarrolladores recuperar versiones anteriores de un archivo o conjunto de archivos. Esto puede ser útil cuando se desarrolla una nueva función que se basa en el código de una función anterior que ya no se usa.\nSeguridad: Los sistemas de control de versiones mantienen una copia de seguridad de todas las versiones de un archivo o conjunto de archivos. Si un archivo se corrompe o se elimina accidentalmente, los desarrolladores pueden recuperar una versión anterior del archivo desde el sistema de control de versiones.\nColaboración: Los sistemas de control de versiones permiten a los desarrolladores trabajar en equipo en el mismo archivo o conjunto de archivos. Los sistemas de control de versiones pueden detectar y resolver conflictos entre los cambios realizados por diferentes desarrolladores.\nSeguimiento de errores: Los sistemas de control de versiones mantienen un registro de cada error encontrado en el código. Cuando se encuentra un error, los desarrolladores pueden volver a una versión anterior del archivo o conjunto de archivos para ayudar a solucionar el problema.\nReutilización de código: Los sistemas de control de versiones permiten a los desarrolladores recuperar versiones anteriores de un archivo o conjunto de archivos. Esto puede ser útil cuando se desarrolla una nueva función que se basa en el código de una función anterior que ya no se usa.\nSeguridad: Los sistemas de control de versiones mantienen una copia de seguridad de todas las versiones de un archivo o conjunto de archivos\nQué es Git # Hoy en día, Git es, con diferencia, el sistema de control de versiones moderno más utilizado del mundo. Git es un proyecto de código abierto maduro y con un mantenimiento activo que desarrolló originalmente Linus Torvalds, el famoso creador del kernel del sistema operativo Linux, en 2005.\nGit es un sistema de control de versiones distribuido, lo que significa que cada desarrollador tiene una copia completa de todos los archivos, el historial completo de versiones de todos los archivos y la capacidad de ver el historial completo de todas las versiones de cada archivo. Los desarrolladores pueden trabajar en el código fuente de forma local y luego sincronizar sus cambios con otros desarrolladores a través de Internet o una red local. Git también permite que los desarrolladores trabajen en el mismo archivo a la vez, lo que facilita la colaboración en el desarrollo de software.\n¿Por qué usar Git? # Git es una herramienta poderosa que puede ayudar a los desarrolladores a gestionar el código fuente de un proyecto. Si bien la mayoría de los desarrolladores de software utilizan Git para gestionar proyectos de código abierto, también se puede utilizar para gestionar proyectos privados. Git es una herramienta de control de versiones distribuido, lo que significa que cada desarrollador tiene una copia completa de todos los archivos, el historial completo de versiones de todos los archivos y la capacidad de ver el historial completo de todas las versiones de cada archivo. Los desarrolladores pueden trabajar en el código fuente de forma local y luego sincronizar sus cambios con otros desarrolladores a través de Internet o una red local. Git también permite que los desarrolladores trabajen en el mismo archivo a la vez, lo que facilita la colaboración en el desarrollo de software.\nGIT # Para seguir aprendiendo GIT, analiza con calma el siguiente video, haz pausas, toma nota, investiga sobre un termino que escuches y no entiendas. Es importante que lo analices con calma y aunque veremos a detalle cada uno de los conceptos a lo largo de este nivel, presta atencion de como funciona de manera general este sistema.\nInstalación de GIT # Sigue los pasos que verás en el video para instalar GIT en tu computadora, mira el video que corresponda a tu sistena operativo.\nNo avances sin terminar la instalación A partir de ahora usaremos git y github para nuestros proyectos, por ello es importante que lo instales en tu computadora. No es opcional. Si llegas a tener dificultades con la instalación, no dudes en preguntar en el canal de Discord, pero antes que comience la clase de zoom, debes tenerlo instalado. GIT en Windows # GIT en MacOS # Este video empieza en el minuto 14:35. Solo mira el fragmento donde se habla de la instalación de GIT, luego analizaremos más partes de este segmento. Este segmento termina en el minuto 24:00.\nAcerca de los video tutoriales # Durante este nivel, nos apoyaremos principalmente en el tutoríal del canal de youtube FreeCodCamp Español y tambien del canal de youtube MoureDev. Pondremos otros recursos según sea neceario.\nEsto videos duran en total más de 5 horas c/u, e iremos viendo los segmentos que necesitemos por clase.\ncomo ves a la derecha, el video está segmentado por temas. Al inicial una nueva lección, el video se iniciará en el segmento correspondiente y se detendrá al final de la lección. Algunas cosas que debes tener en cuenta es lo siguiente:\nEstos segmentos no suelen durar mucho, sin embargo se espera que no solo reproduzcas el video, sino que pruebes el código que se muestra en el video y lo entiendas. Si no entiendes algo, puedes detener el video y preguntar a tu profesor. Algunos segmentos son muy cortos, por lo que se recomienda que los veas dos veces para que puedas entenderlos mejor. Buscar información adicional es completamente válido. Si un tema no te queda claro, puedes buscar en internet y preguntar a tu profesor por el canal de Discord. Comandos de la terminal # Antes de aprender los comandos de git, debemos aprender algunos comandos de la terminal. Esto es importante porque git es una herramienta que se ejecuta desde la terminal. Por lo tanto, debemos saber cómo usar la terminal para poder usar git. Iremos familiarizándonos con la terminal a medida que avancemos en el curso. Aunque hay una manera mas sencilla de trabajar con GIT desde VS code, estas opciones son hasta cierto punto limitadas. Por lo tanto, es importante que aprendas a usar la terminal.\n","date":"15 febrero 2023","permalink":"/platform/levels/level2_23/dia01/git/","section":"Levels","summary":"¿Qué es el control de versiones?","title":"GIT"},{"content":"","date":"14 febrero 2023","permalink":"/platform/levels/level2_23/","section":"Levels","summary":"","title":"Nivel 2 - Responsive Design"},{"content":" Buscando elementos del DOM # Para buscar elementos del DOM, podemos usar los métodos getElementById, getElementsByClassName, getElementsByTagName y querySelector y querySelectorAll del objeto document.\nBúsqueda de elementos # El método getElementById busca un elemento por su atributo id:\nlet elem = document.getElementById(\u0026#39;id\u0026#39;); El método getElementsByClassName busca elementos por su atributo class. Aqui debemos tener en cuenta que nos devolverá un arreglo de elementos que coincidan con la clase especificada:\nlet elems = document.getElementsByClassName(\u0026#39;clase\u0026#39;); El método getElementsByTagName busca elementos por su nombre de etiqueta:\nlet elems = document.getElementsByTagName(\u0026#39;div\u0026#39;); El método querySelector busca un elemento que coincida con el selector CSS especificado:\nlet elem = document.querySelector(\u0026#39;#elemento\u0026#39;); let elem = document.querySelector(\u0026#39;.clase\u0026#39;); let elem = document.querySelector(\u0026#39;div\u0026#39;); El método querySelectorAll busca todos los elementos que coincidan con el selector CSS especificado y los retorna dentro de un array:\nlet elems = document.querySelectorAll(\u0026#39;#elemento\u0026#39;); let elems = document.querySelectorAll(\u0026#39;.clase\u0026#39;); let elems = document.querySelectorAll(\u0026#39;div\u0026#39;); Agregando y eliminando elementos del DOM # Para agregar elementos al DOM, podemos usar el método appendChild de un elemento del DOM:\nlet elemento = document.createElement(\u0026#39;div\u0026#39;); elemento.textContent = \u0026#39;Hola Mundo\u0026#39;; document.body.appendChild(elemento); Para eliminar elementos del DOM, podemos usar el método removeChild de un elemento del DOM:\nlet elemento = document.querySelector(\u0026#39;#elemento\u0026#39;); document.body.removeChild(elemento); Cambiando atributos del DOM # Para cambiar atributos del DOM, podemos usar el método setAttribute de un elemento del DOM:\nlet elemento = document.querySelector(\u0026#39;#elemento\u0026#39;); elemento.setAttribute(\u0026#39;class\u0026#39;, \u0026#39;clase\u0026#39;); Para eliminar atributos del DOM, podemos usar el método removeAttribute de un elemento del DOM:\nlet elemento = document.querySelector(\u0026#39;#elemento\u0026#39;); elemento.removeAttribute(\u0026#39;class\u0026#39;); Cambiando el estilo del DOM # Para cambiar el estilo del DOM, podemos usar el método style de un elemento del DOM:\nlet elemento = document.querySelector(\u0026#39;#elemento\u0026#39;); elemento.style.backgroundColor = \u0026#39;#000\u0026#39;; Manejo de Nodos # En el siguiente video aprenderemos a manipular el DOM con JavaScript:\n","date":"14 febrero 2023","permalink":"/platform/levels/level2_23/dia01/dom/","section":"Levels","summary":"Buscando elementos del DOM # Para buscar elementos del DOM, podemos usar los métodos getElementById, getElementsByClassName, getElementsByTagName y querySelector y querySelectorAll del objeto document.","title":"Manipulación del DOM"},{"content":"Hoy continuaremos aprendiendo los conceptos que estabamos viendo ayer sobre el manejo y manipulación.\nPresta atención al siguiente tutorial y toma nota de las dudas o cosas nuevas que aprendas:\n","date":"29 enero 2023","permalink":"/platform/jsvanilla/dom_pt2/","section":"Jsvanillas","summary":"Hoy continuaremos aprendiendo los conceptos que estabamos viendo ayer sobre el manejo y manipulación.","title":"DOM"},{"content":"Hoy continuaremos aprendiendo los conceptos que estabamos viendo ayer sobre el manejo y manipulación.\nPresta atención al siguiente tutorial y toma nota de las dudas o cosas nuevas que aprendas:\n","date":"29 enero 2023","permalink":"/platform/levels/level1_2023/dia14/dom/","section":"Levels","summary":"Hoy continuaremos aprendiendo los conceptos que estabamos viendo ayer sobre el manejo y manipulación.","title":"DOM"},{"content":"Hoy vamos a reforzar los conceptos de CSS.\nEl siguiente tutorial ya lo vimos antes, hoy lo repasaremos para reforzar los conceptos aprendidos y quizas ver algunos que no notamos antes:\n","date":"29 enero 2023","permalink":"/platform/levels/level1_2023/dia14/css/","section":"Levels","summary":"Hoy vamos a reforzar los conceptos de CSS.","title":"CSS"},{"content":"Durante estos ultimos días del nivel, vamos a enfocarnos en poder manipular los elementos del DOM, si bien es cierto hemos podido ver algunos ejemplos durante las clases, el enfoque de estos días será entender como se realizar este proceso y como podemos manipular, alterar contenidos de los nodos o tambien añadir o eliminar nodos del DOM.\nEn el siguiente video veremos más a detalle este proceso:\n","date":"27 enero 2023","permalink":"/platform/jsvanilla/dom_pt1/","section":"Jsvanillas","summary":"Durante estos ultimos días del nivel, vamos a enfocarnos en poder manipular los elementos del DOM, si bien es cierto hemos podido ver algunos ejemplos durante las clases, el enfoque de estos días será entender como se realizar este proceso y como podemos manipular, alterar contenidos de los nodos o tambien añadir o eliminar nodos del DOM.","title":"DOM"},{"content":"Ayer aprendimos que es grid y cuales son sus diferencias y ventajas sobre display flex. Estos dos conceptos son importantes para la creación de sitios web responsivos (se pueden adaptar a los distintos tamaños de pantalla).\nHoy vamos a repasar sobre estos conceptos y aprender algunos más, en el siguiente tutorial aprendrás más sobre este concepto de CSS:\nDentro del portal CSS Tricks podemos encontrar una guía completa y detallada de las propiedades de grid. Si bien la página está en inglés, puedes verla en español en tu navegador Chrome o Edge dando click derecho en la página y seleccionando la opcion \u0026ldquo;Traducir a Español\u0026rdquo;:\nGRID - CSS-Tricks\n","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia13/grid/","section":"Levels","summary":"Ayer aprendimos que es grid y cuales son sus diferencias y ventajas sobre display flex.","title":"Grid"},{"content":"Los Arrays y los Objetos son dos de los tipos de datos fundamentales en JavaScript. Los Arrays son una colección ordenada de elementos, mientras que los Objetos son una colección de pares clave-valor.\nLos Arrays se definen utilizando corchetes […] y cada elemento se separa con una coma. Por ejemplo, se puede crear un Array de números como este:\nconst numbers = [1, 2, 3, 4, 5]; Los Arrays en JavaScript proporcionan métodos para manipular sus elementos, como push, pop, shift, unshift, entre otros.\nLos Objetos se definen utilizando llaves {…} y cada par clave-valor se separa con una coma. Por ejemplo, se puede crear un objeto persona así:\nconst person = { name: \u0026#39;John\u0026#39;, age: 30, job: \u0026#39;Developer\u0026#39; }; Los objetos en JavaScript proporcionan métodos para acceder y modificar sus propiedades, como Object.keys, Object.values, entre otros.\nAmbos tipos de datos son muy útiles en la programación JavaScript ya que permiten almacenar y acceder a una gran cantidad de datos de manera estructurada y organizada.\nRepaso de Array y Objetos # Hoy repasaremos como funcionan estos dos tipos de datos y las ventajas que aportan al lenguaje JavaScript:\n","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia12/arr_obj/","section":"Levels","summary":"Los Arrays y los Objetos son dos de los tipos de datos fundamentales en JavaScript.","title":"Array y Objetos"},{"content":"CSS Grid Layout es un sistema de diseño de cuadrícula para crear diseños de página en HTML.\nCon CSS Grid, se pueden crear diseños de cuadrícula complejos con facilidad, como diseños de dos o más columnas, diseños de cuadrícula anidados y diseños de rejilla adaptativos.\nUna de las principales ventajas de CSS Grid es que permite crear diseños de cuadrícula de forma independiente de los elementos de HTML. Esto significa que puede crear un diseño de cuadrícula y luego colocar elementos en él, independientemente de su estructura HTML.\nCSS Grid también proporciona una serie de herramientas para trabajar con elementos de cuadrícula, como la capacidad de especificar tamaños de celda, posiciones de celda y zonas de cuadrícula. También se pueden utilizar las propiedades de grid-template y grid-template-areas para crear diseños de cuadrícula complejos.\nEn resumen, CSS Grid es una herramienta poderosa para crear diseños de cuadrícula en HTML que te permite crear diseños complejos de forma fácil y flexible.\nIntroducción a Grid # En el siguiente video aprenderás lo necesario para aprender sobre este concepto y como se diferencia de flex:\nRecuerda hacer pausas en el video y escribir el código que ves en el ejemplo para que te vayas acostumbrando a este nuevo concepto. ","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia12/grid/","section":"Levels","summary":"CSS Grid Layout es un sistema de diseño de cuadrícula para crear diseños de página en HTML.","title":"CSS Grid"},{"content":" Los arrays en JavaScript son una de las características fundamentales del lenguaje, y su capacidad para almacenar y acceder a una colección ordenada de valores es esencial para cualquier desarrollador web. Sin embargo, JavaScript no se queda solo en eso, ya que también ofrece una amplia variedad de métodos que nos permiten trabajar con arrays de manera más eficiente.\nEn esta parte, vamos a explorar los métodos de arrays más comunes y útiles en JavaScript, desde cómo acceder y modificar elementos, hasta cómo buscar, ordenar y filtrar datos en un array. Veremos ejemplos prácticos y explicaciones detalladas para que puedas entender cómo sacar el máximo provecho de estos métodos y cómo pueden ayudarte a mejorar tu código.\nEn este tutorial se usa arrow functions, que es una forma distinta de escribir funciones y podría confundirte, de ser el caso, mira primero brevemente este video para entrar en contexto. ","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia11/arr_methods/","section":"Levels","summary":"Los arrays en JavaScript son una de las características fundamentales del lenguaje, y su capacidad para almacenar y acceder a una colección ordenada de valores es esencial para cualquier desarrollador web.","title":"Métodos de Array"},{"content":"Hoy terminaremos de ver el tutorial de funciones que empezamos a ver ayer. Toma nota de lo que aprendes y pon a prueba el código que se enseña.\nEncontrarás más información sobre las funciones aquí:\nFunciones - gitbook.io\n","date":"27 enero 2023","permalink":"/platform/jsvanilla/functions_p2/","section":"Jsvanillas","summary":"Hoy terminaremos de ver el tutorial de funciones que empezamos a ver ayer.","title":"Funciones"},{"content":"Muy a menudo necesitamos realizar acciones similares en muchos lugares del script.\nPor ejemplo, debemos mostrar un mensaje atractivo cuando un visitante inicia sesión, cierra sesión y tal vez en otros momentos.\nLas funciones son los principales \u0026ldquo;bloques de construcción\u0026rdquo; del programa. Permiten que el código se llame muchas veces sin repetición.\nYa hemos visto ejemplos de funciones integradas, como alert(message), prompt(message, default) y confirm(question). Pero también podemos crear funciones propias.\nDeclaración de funciones # Para crear una función podemos usar una declaración de función.\nSe ve como aquí:\nfunction showMessage() { alert( \u0026#39;¡Hola a todos!\u0026#39; ); } La palabra clave function va primero, luego va el nombre de función, luego una lista de parámetros entre paréntesis (separados por comas, vacía en el ejemplo anterior) y finalmente el código de la función entre llaves, también llamado \u0026ldquo;el cuerpo de la función\u0026rdquo;.\nfunction name(parameter1, parameter2, ... parameterN) { // body } Nuestra nueva función puede ser llamada por su nombre: showMessage().\nPor ejemplo:\nfunction showMessage() { alert( \u0026#39;¡Hola a todos!\u0026#39; ); } showMessage(); // llamando a la funcion showMessage() showMessage(); // llamando a la funcion showMessage() La llamada showMessage() ejecuta el código de la función. Aquí veremos el mensaje dos veces.\nEste ejemplo demuestra claramente uno de los propósitos principales de las funciones: evitar la duplicación de código..\nSi alguna vez necesitamos cambiar el mensaje o la forma en que se muestra, es suficiente modificar el código en un lugar: la función que lo genera.\nVariables Locales # Una variable declarada dentro de una función solo es visible dentro de esa función.\nPor ejemplo:\nfunction showMessage() { let message = \u0026#34;Hola, ¡Soy JavaScript!\u0026#34;; // variable local alert( message ); } showMessage(); // Hola, ¡Soy JavaScript! alert( message ); // \u0026lt;-- ¡Error! La variable es local para esta función Variables Externas # Una función también puede acceder a una variable externa, por ejemplo:\n1 2 3 4 5 6 let userName = \u0026#39;Juan\u0026#39;; function showMessage() { let message = \u0026#39;Hola, \u0026#39; + userName; alert(message); } showMessage(); // Hola, Juan La función tiene acceso completo a la variable externa. Puede modificarlo también.\nPor ejemplo:\n1 2 3 4 5 6 7 8 9 let userName = \u0026#39;Juan\u0026#39;; function showMessage() { userName = \u0026#34;Bob\u0026#34;; // (1) Cambió la variable externa let message = \u0026#39;Hola, \u0026#39; + userName; alert(message); } alert( userName ); // Juan antes de llamar la función showMessage(); alert( userName ); // Bob, el valor fué modificado por la función La variable externa solo se usa si no hay una local.\nSi una variable con el mismo nombre se declara dentro de la función, le hace sombra a la externa. Por ejemplo, en el siguiente código, la función usa la variable userName local. La exterior se ignora:\n1 2 3 4 5 6 7 8 9 10 11 let userName = \u0026#39;John\u0026#39;; function showMessage() { let userName = \u0026#34;Bob\u0026#34;; // declara variable local let message = \u0026#39;Hello, \u0026#39; + userName; // Bob alert(message); } // la función crea y utiliza su propia variable local userName showMessage(); alert( userName ); // John, se mantiene, la función no accedió a la variable externa Variables globales Variables declaradas fuera de cualquier función, como la variable externa userName en el código anterior, se llaman globales.\nLas variables globales son visibles desde cualquier función (a menos que se les superpongan variables locales con el mismo nombre).\nEs una buena práctica reducir el uso de variables globales. El código moderno tiene pocas o ninguna variable global. La mayoría de las variables residen en sus funciones. Aunque a veces puede justificarse almacenar algunos datos a nivel de proyecto. Tutorial de Funciones # En el siguiente tutorial aprenderás a crear funciones, a pasarle parámetros y a retornar valores.\nPuedes encontrar más información acerca de las funciones en la página de MDN:\nFunciones - MDN web docs\n","date":"27 enero 2023","permalink":"/platform/jsvanilla/functions_p1/","section":"Jsvanillas","summary":"Muy a menudo necesitamos realizar acciones similares en muchos lugares del script.","title":"Funciones"},{"content":"En JavaScript, existen tres tipos de funciones: funciones declaradas, funciones de expresión y funciones de flecha.\nFunciones declaradas: Son funciones que se declaran con la palabra clave \u0026ldquo;function\u0026rdquo; seguida del nombre de la función. Ejemplo: function sum(a, b) { return a + b; } Estas funciones son hoisted, es decir, son elevadas al inicio del scope donde son declaradas, por lo tanto son accesibles antes de ser declaradas.\nFunciones de expresión: son funciones que son asignadas a una variable y son definidas mediante una expresión. Ejemplo: const sum = function(a, b) { return a + b; } Funciones de flecha: son funciones cuyo sintaxis es abreviada y se definen mediante una flecha \u0026ldquo;=\u0026gt;\u0026rdquo; y no tiene un nombre. Ejemplo: const sum = (a, b) =\u0026gt; a + b; 3 tipos de funciones # Para entender a detalle como funciona cada uno de estas, mira el siguiente tutorial donde verás qué diferencia a estas 3 formas de escribir una función:\n","date":"27 enero 2023","permalink":"/platform/levels/level1_2023/dia10/function_type/","section":"Levels","summary":"En JavaScript, existen tres tipos de funciones: funciones declaradas, funciones de expresión y funciones de flecha.","title":"Tipos de Funciones"},{"content":"El día de hoy continuaremos aprendiendo sobre flexbox siguiendo el tutorial que comenzamos el día de ayer:\nAdicionalmente, te comparto una guía complete de Flexbox, si bien la página está en inglés, puedes verla en español en tu navegador Chrome o Edge dando click derecho en la página y seleccionando la opcion \u0026ldquo;Traducir a Español\u0026rdquo;:\nFlexbox - CSS Tricks\n","date":"26 enero 2023","permalink":"/platform/css/flexbox/","section":"Csses","summary":"El día de hoy continuaremos aprendiendo sobre flexbox siguiendo el tutorial que comenzamos el día de ayer:","title":"Flexbox"},{"content":"El día de hoy vamos a repasar en el uso de flexbox, es importante comprender este tema antes de que pasemos a aprender sobre grid. analiza el siguiente video a detalle o desde donde te quedaste y toma nota de las dudas o preguntas que surgan para que puedas resolverlas durante clase:\nAdicionalmente, te comparto una guía complete de Flexbox, si bien la página está en inglés, puedes verla en español en tu navegador Chrome o Edge dando click derecho en la página y seleccionando la opcion \u0026ldquo;Traducir a Español\u0026rdquo;:\nFlexbox - CSS Tricks\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia10/flexbox/","section":"Levels","summary":"El día de hoy vamos a repasar en el uso de flexbox, es importante comprender este tema antes de que pasemos a aprender sobre grid.","title":"Flexbox"},{"content":"En JavaScript, las funciones son una de las características fundamentales del lenguaje y son esenciales para crear programas complejos.\nYa hemos visto cómo crear funciones y cómo llamarlas, pero para sacar el máximo provecho de las funciones, es importante entender cómo funcionan los parámetros y argumentos.\nEn esta clase, vamos a explorar cómo funcionan los parámetros y argumentos en las funciones de JavaScript, cómo pasar valores a las funciones y cómo utilizar estos valores dentro de las funciones. También veremos ejemplos prácticos y explicaciones detalladas para que puedas entender cómo utilizar parámetros y argumentos para crear funciones más flexibles y reutilizables en tus programas.\nParámetros # Podemos pasar datos arbitrarios a funciones usando parámetros.\nEn el siguiente ejemplo, la función tiene dos parámetros: from y text.\n1 2 3 4 5 function showMessage(from, text) { // parámetros: from, text alert(from + \u0026#39;: \u0026#39; + text); } showMessage(\u0026#39;Ann\u0026#39;, \u0026#39;¡Hola!\u0026#39;); // Ann: ¡Hola! (*) *showMessage(\u0026#39;Ann\u0026#39;, \u0026#34;¿Cómo estás?\u0026#34;); // Ann: ¿Cómo estás? (**) Cuando la función se llama (*) y (**), los valores dados se copian en variables locales from y text. Y la función las utiliza.\nAquí hay un ejemplo más: tenemos una variable from y la pasamos a la función. Tenga en cuenta: la función cambia from, pero el cambio no se ve afuera, porque una función siempre obtiene una copia del valor:\n1 2 3 4 5 6 7 8 function showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // hace que \u0026#34;from\u0026#34; se vea mejor alert( from + \u0026#39;: \u0026#39; + text ); } let from = \u0026#34;Ann\u0026#34;; showMessage(from, \u0026#34;Hola\u0026#34;); // *Ann*: Hola // el valor de \u0026#34;from\u0026#34; es el mismo, la función modificó una copia local alert( from ); // Ann Cuando un valor es pasado como un parámetro de función, también se denomina argumento.\nPara poner los términos claros:\nUn parámetro es una variable listada dentro de los paréntesis en la declaración de función (es un término para el momento de la declaración) Un argumento es el valor que es pasado a la función cuando esta es llamada (es el término para el momento en que se llama). Declaramos funciones listando sus parámetros, luego las llamamos pasándoles argumentos.\nEn el ejemplo de arriba, se puede decir: \u0026ldquo;la función showMessage es declarada con dos parámetros, y luego llamada con dos argumentos: from y \u0026quot;Hola\u0026quot;\u0026rdquo;.\nValores predeterminados # Si una función es llamada, pero no se le proporciona un argumento, su valor correspondiente se convierte en undefined.\nPor ejemplo, la función mencionada anteriormente showMessage(from, text) se puede llamar con un solo argumento:\nshowMessage(\u0026#34;Ann\u0026#34;); Eso no es un error. La llamada mostraría \u0026quot;Ann: undefined\u0026quot;. Como no se pasa un valor de text, este se vuelve undefined.\nPodemos especificar un valor llamado \u0026ldquo;predeterminado\u0026rdquo; o \u0026ldquo;por defecto\u0026rdquo; (es el valor que se usa si el argumento fue omitido) en la declaración de función usando =:\n1 2 3 4 function showMessage(from,text = \u0026#34;sin texto\u0026#34;\u0026gt;) { alert( from + \u0026#34;: \u0026#34; + text ); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: sin texto Ahora, si no se pasa el parámetro text, obtendrá el valor \u0026quot;sin texto\u0026quot;\nEl valor predeterminado también se asigna si el parámetro existe pero es estrictamente igual a undefined:\nshowMessage(\u0026#34;Ann\u0026#34;, undefined); // Ann: sin texto En el siguiente video aprenderemos más sobre estos conceptos:\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia9/parameters/","section":"Levels","summary":"En JavaScript, las funciones son una de las características fundamentales del lenguaje y son esenciales para crear programas complejos.","title":"Funciones: Parámetros"},{"content":"Flexbox es un método de diseño en CSS que se utiliza para crear diseños adaptables y flexibles. Es especialmente útil para dispositivos móviles y pantallas de diferentes tamaños. Flexbox hace posible ajustar el tamaño y la posición de los elementos dentro de un contenedor de forma automática, lo que permite crear diseños flexibles que se adaptan a diferentes tamaños de pantalla. Con Flexbox, los desarrolladores pueden alinear elementos, distribuirlos en una grilla y controlar el orden de los elementos, independientemente de su tamaño. Es una de las herramientas fundamentales para los desarrolladores web para crear diseños responsivos, flexibles y adaptables.\nVeamos un poco más de esta propiedad:\n","date":"26 enero 2023","permalink":"/platform/css/flex_intro/","section":"Csses","summary":"Flexbox es un método de diseño en CSS que se utiliza para crear diseños adaptables y flexibles.","title":"Flexbox"},{"content":"Los formularios HTML y Flexbox en CSS son dos herramientas fundamentales para cualquier desarrollador web.\nLos formularios HTML nos permiten recolectar información de los usuarios de un sitio web, mientras que Flexbox en CSS nos permite crear diseños de layout flexibles y adaptables.\nEn esta clase, vamos a explorar cómo crear y personalizar formularios HTML y cómo utilizar Flexbox para crear diseños adaptables y flexibles en un sitio web. Desde cómo crear campos de entrada y botones hasta cómo utilizar Flexbox para alinear elementos y crear diseños de grillas.\nForms # Los formularios en HTML son utilizados para recolectar información de los usuarios de un sitio web. Se componen de diferentes elementos de entrada, como campos de texto, botones de radio, casillas de verificación, etc. Los formularios permiten que los usuarios ingresen información, como sus nombres, direcciones de correo electrónico, contraseñas, etc. y luego enviar esa información a un servidor web para su procesamiento. Los formularios son comúnmente utilizados para registros de usuarios, inicios de sesión, encuestas, compras en línea y muchas otras funciones en un sitio web.\nEn el siguiente video aprenderemos como crear formularios en HTML:\nSi deseas realizar un formulario más real, aquí tienes un tutorial donde aprenderás a crear un formulario de login:\nFlexbox # Flexbox es un método de diseño en CSS que se utiliza para crear diseños adaptables y flexibles. Es especialmente útil para dispositivos móviles y pantallas de diferentes tamaños. Flexbox hace posible ajustar el tamaño y la posición de los elementos dentro de un contenedor de forma automática, lo que permite crear diseños flexibles que se adaptan a diferentes tamaños de pantalla. Con Flexbox, los desarrolladores pueden alinear elementos, distribuirlos en una grilla y controlar el orden de los elementos, independientemente de su tamaño. Es una de las herramientas fundamentales para los desarrolladores web para crear diseños responsivos, flexibles y adaptables.\nVeamos un poco más de esta propiedad:\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia9/form_flex/","section":"Levels","summary":"Los formularios HTML y Flexbox en CSS son dos herramientas fundamentales para cualquier desarrollador web.","title":"Forms \u0026 Flexbox"},{"content":"Los Bucles o Loops son parte fundamental en la programación.\nHoy repasaremos su uso y veremos una forma especial de recorres los arrays.\nRepaso # ","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia8/loops/","section":"Levels","summary":"Los Bucles o Loops son parte fundamental en la programación.","title":"Loops"},{"content":"Los arrays en JavaScript son estructuras de datos que nos permiten almacenar y acceder a una colección ordenada de valores de forma sencilla y eficiente.\nEn esta clase, vamos a explorar en profundidad el uso de arrays en JavaScript, desde cómo se crean, se accede y se modifican sus elementos, hasta cómo se utilizan en conjunto con otras características del lenguaje como funciones y bucles para crear programas más complejos\nLee la información a continuación con calma y toma nota de las dudas que surgan para que las puedas resolver en clase.\nArrays # Los objetos te permiten almacenar colecciones de datos a través de nombres. Eso está bien.\nPero a menudo necesitamos una colección ordenada, donde tenemos un 1ro, un 2do, un 3er elemento y así sucesivamente. Por ejemplo, necesitamos almacenar una lista de algo: usuarios, bienes, elementos HTML, etc.\nNo es conveniente usar objetos aquí, porque no proveen métodos para manejar el orden de los elementos. No podemos insertar una nueva propiedad “entre” los existentes. Los objetos no están hechos para eso.\nExiste una estructura llamada Array (llamada en español arreglo o matriz/vector) para almacenar colecciones ordenadas.\nDeclaración # Hay dos sintaxis para crear un array vacío:\nlet arr = new Array(); let arr = []; Casi siempre se usa la segunda. Podemos suministrar elementos iniciales entre los corchetes:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; Los elementos del array están numerados comenzando desde cero.\nPodemos obtener un elemento por su número entre corchetes:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[0] ); // Apple alert( fruits[1] ); // Orange alert( fruits[2] ); // Plum Podemos reemplazar un elemento:\nfruits[2] = \u0026#39;Pear\u0026#39;; // ahora [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;] \u0026hellip;o agregar uno nuevo al array:\nfruits[3] = \u0026#39;Lemon\u0026#39;; // ahora [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;, \u0026#34;Lemon\u0026#34;] La cuenta total de elementos en el array es su longitud length:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits.length ); // 3 También podemos usar alert para mostrar el array completo.\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits ); // Apple,Orange,Plum Un array puede almacenar elementos de cualquier tipo.\nPor ejemplo:\n// mezcla de valores let arr = [ \u0026#39;Apple\u0026#39;, { name: \u0026#39;John\u0026#39; }, true, function() { alert(\u0026#39;hello\u0026#39;); } ]; // obtener el objeto del índice 1 y mostrar su nombre alert( arr[1].name ); // John // obtener la función del índice 3 y ejecutarla arr[3](); // hello En el siguiente video aprenderás más de los arrays:\nFunciones # Muy a menudo necesitamos realizar acciones similares en muchos lugares del script.\nPor ejemplo, debemos mostrar un mensaje atractivo cuando un visitante inicia sesión, cierra sesión y tal vez en otros momentos.\nLas funciones son los principales \u0026ldquo;bloques de construcción\u0026rdquo; del programa. Permiten que el código se llame muchas veces sin repetición.\nYa hemos visto ejemplos de funciones integradas, como alert(message), prompt(message, default) y confirm(question). Pero también podemos crear funciones propias.\nDeclaración de funciones # Para crear una función podemos usar una declaración de función.\nSe ve como aquí:\nfunction showMessage() { alert( \u0026#39;¡Hola a todos!\u0026#39; ); } La palabra clave function va primero, luego va el nombre de función, luego una lista de parámetros entre paréntesis (separados por comas, vacía en el ejemplo anterior) y finalmente el código de la función entre llaves, también llamado \u0026ldquo;el cuerpo de la función\u0026rdquo;.\nfunction name(parameter1, parameter2, ... parameterN) { // body } Nuestra nueva función puede ser llamada por su nombre: showMessage().\nPor ejemplo:\nfunction showMessage() { alert( \u0026#39;¡Hola a todos!\u0026#39; ); } showMessage(); // llamando a la funcion showMessage() showMessage(); // llamando a la funcion showMessage() La llamada showMessage() ejecuta el código de la función. Aquí veremos el mensaje dos veces.\nEste ejemplo demuestra claramente uno de los propósitos principales de las funciones: evitar la duplicación de código..\nSi alguna vez necesitamos cambiar el mensaje o la forma en que se muestra, es suficiente modificar el código en un lugar: la función que lo genera.\nVariables Locales # Una variable declarada dentro de una función solo es visible dentro de esa función.\nPor ejemplo:\nfunction showMessage() { let message = \u0026#34;Hola, ¡Soy JavaScript!\u0026#34;; // variable local alert( message ); } showMessage(); // Hola, ¡Soy JavaScript! alert( message ); // \u0026lt;-- ¡Error! La variable es local para esta función Variables Externas # Una función también puede acceder a una variable externa, por ejemplo:\n1 2 3 4 5 6 let userName = \u0026#39;Juan\u0026#39;; function showMessage() { let message = \u0026#39;Hola, \u0026#39; + userName; alert(message); } showMessage(); // Hola, Juan La función tiene acceso completo a la variable externa. Puede modificarlo también.\nPor ejemplo:\n1 2 3 4 5 6 7 8 9 let userName = \u0026#39;Juan\u0026#39;; function showMessage() { userName = \u0026#34;Bob\u0026#34;; // (1) Cambió la variable externa let message = \u0026#39;Hola, \u0026#39; + userName; alert(message); } alert( userName ); // Juan antes de llamar la función showMessage(); alert( userName ); // Bob, el valor fué modificado por la función La variable externa solo se usa si no hay una local.\nSi una variable con el mismo nombre se declara dentro de la función, le hace sombra a la externa. Por ejemplo, en el siguiente código, la función usa la variable userName local. La exterior se ignora:\n1 2 3 4 5 6 7 8 9 10 11 let userName = \u0026#39;John\u0026#39;; function showMessage() { let userName = \u0026#34;Bob\u0026#34;; // declara variable local let message = \u0026#39;Hello, \u0026#39; + userName; // Bob alert(message); } // la función crea y utiliza su propia variable local userName showMessage(); alert( userName ); // John, se mantiene, la función no accedió a la variable externa Variables globales Variables declaradas fuera de cualquier función, como la variable externa userName en el código anterior, se llaman globales.\nLas variables globales son visibles desde cualquier función (a menos que se les superpongan variables locales con el mismo nombre).\nEs una buena práctica reducir el uso de variables globales. El código moderno tiene pocas o ninguna variable global. La mayoría de las variables residen en sus funciones. Aunque a veces puede justificarse almacenar algunos datos a nivel de proyecto. Puedes encontrar más información acerca de las funciones en la página de MDN:\nFunciones - MDN web docs\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia8/arrays/","section":"Levels","summary":"Los arrays en JavaScript son estructuras de datos que nos permiten almacenar y acceder a una colección ordenada de valores de forma sencilla y eficiente.","title":"Arrays y Funciones"},{"content":"JavaScript es uno de los lenguajes de programación más populares en el mundo, y una de las razones de su éxito radica en su capacidad para manejar y organizar datos a través de objetos y arrays.\nLos objetos en JavaScript son estructuras de datos clave-valor que nos permiten almacenar y acceder a la información de una manera sencilla y eficiente.\nLos arrays, por otro lado, son un tipo especial de objeto que nos permite almacenar y acceder a una colección ordenada de valores.\nEn esta clase, vamos a explorar en profundidad el uso de objetos en JavaScript, desde cómo se crean y se accede a sus propiedades, hasta cómo se utilizan en conjunto con otras características del lenguaje para crear programas más complejos. Veremos ejemplos prácticos y explicaciones detalladas para entender cómo sacar el máximo provecho de estas herramientas fundamentales de JavaScript.\nLee la información a continuación con calma y toma nota de las dudas que surgan para que las puedas resolver en clase.\nObjetos # Como aprendimos en clases anteriores, hay ocho tipos de datos en JavaScript. Siete de ellos se denominan \u0026ldquo;primitivos\u0026rdquo;, porque sus valores contienen solo un dato (sea un string, un número o lo que sea).\nEn contraste, los objetos son usados para almacenar colecciones de varios datos y entidades más complejas asociados con un nombre clave. En JavaScript, los objetos penetran casi todos los aspectos del lenguaje. Por lo tanto, debemos comprenderlos primero antes de profundizar en cualquier otro lugar.\nPodemos crear un objeto usando las llaves {…} con una lista opcional de propiedades. Una propiedad es un par \u0026ldquo;key:value\u0026rdquo;, donde key es un string (también llamado \u0026ldquo;nombre clave\u0026rdquo;), y value puede ser cualquier cosa. P.D. Para fines prácticos de la lección, nos referiremos a este par de conceptos como \u0026ldquo;clave:valor\u0026rdquo;.\nPodemos imaginar un objeto como un gabinete con archivos firmados. Cada pieza de datos es almacenada en su archivo por la clave. Es fácil encontrar un archivo por su nombre o agregar/eliminar un archivo.\nSe puede crear un objeto vacío (\u0026ldquo;gabinete vacío\u0026rdquo;) utilizando una de estas dos sintaxis:\nlet user = new Object(); // sintaxis de \u0026#34;constructor de objetos\u0026#34; let user = {}; // sintaxis de \u0026#34;objeto literal\u0026#34; Normalmente se utilizan las llaves {...}. Esa declaración se llama objeto literal.\nLiterales y propiedades # Podemos poner inmediatamente algunas propiedades dentro de {...} como pares \u0026ldquo;clave:valor\u0026rdquo;:\nlet user = { // un objeto name: \u0026#34;John\u0026#34;, // En la clave \u0026#34;name\u0026#34; se almacena el valor \u0026#34;John\u0026#34; age: 30 // En la clave \u0026#34;age\u0026#34; se almacena el valor 30 }; Una propiedad tiene una clave (también conocida como \u0026ldquo;nombre\u0026rdquo; o \u0026ldquo;identificador\u0026rdquo;) antes de los dos puntos \u0026quot;:\u0026quot; y un valor a la derecha.\nEn el objeto user hay dos propiedades:\nLa primera propiedad tiene la clave \u0026quot;name\u0026quot; y el valor \u0026quot;John\u0026quot;. La segunda tienen la clave \u0026quot;age\u0026quot; y el valor 30. Podemos imaginar al objeto user resultante como un gabinete con dos archivos firmados con las etiquetas \u0026ldquo;name\u0026rdquo; y \u0026ldquo;age\u0026rdquo;.\nPodemos agregar, eliminar y leer archivos de él en cualquier momento.\nSe puede acceder a los valores de las propiedades utilizando la notación de punto:\n// Obteniendo los valores de las propiedades del objeto: alert( user.name ); // John alert( user.age ); // 30 El valor puede ser de cualquier tipo. Agreguemos uno booleano:\nuser.isAdmin = true; Para eliminar una propiedad podemos usar el operador delete:\ndelete user.age; También podemos nombrar propiedades con más de una palabra. Pero, de ser así, debemos colocar la clave entre comillas \u0026quot;...\u0026quot;:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true // Las claves con más de una palabra deben ir entre comillas }; La última propiedad en la lista puede terminar con una coma:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, // termina con una \u0026#34;,\u0026#34; } Eso se llama una coma \u0026ldquo;final\u0026rdquo; o \u0026ldquo;colgante\u0026rdquo;. Facilita agregar, eliminar y mover propiedades, porque todas las líneas se vuelven similares.\nTutotial de Objetos # En los siguientes video, aprenderás más sobre los objetos:\n","date":"26 enero 2023","permalink":"/platform/jsvanilla/objects/","section":"Jsvanillas","summary":"JavaScript es uno de los lenguajes de programación más populares en el mundo, y una de las razones de su éxito radica en su capacidad para manejar y organizar datos a través de objetos y arrays.","title":"Objetos"},{"content":"JavaScript es uno de los lenguajes de programación más populares en el mundo, y una de las razones de su éxito radica en su capacidad para manejar y organizar datos a través de objetos y arrays.\nLos objetos en JavaScript son estructuras de datos clave-valor que nos permiten almacenar y acceder a la información de una manera sencilla y eficiente.\nLos arrays, por otro lado, son un tipo especial de objeto que nos permite almacenar y acceder a una colección ordenada de valores.\nEn esta clase, vamos a explorar en profundidad el uso de objetos en JavaScript, desde cómo se crean y se accede a sus propiedades, hasta cómo se utilizan en conjunto con otras características del lenguaje para crear programas más complejos. Veremos ejemplos prácticos y explicaciones detalladas para entender cómo sacar el máximo provecho de estas herramientas fundamentales de JavaScript.\nLee la información a continuación con calma y toma nota de las dudas que surgan para que las puedas resolver en clase.\nObjetos # Como aprendimos en clases anteriores, hay ocho tipos de datos en JavaScript. Siete de ellos se denominan \u0026ldquo;primitivos\u0026rdquo;, porque sus valores contienen solo un dato (sea un string, un número o lo que sea).\nEn contraste, los objetos son usados para almacenar colecciones de varios datos y entidades más complejas asociados con un nombre clave. En JavaScript, los objetos penetran casi todos los aspectos del lenguaje. Por lo tanto, debemos comprenderlos primero antes de profundizar en cualquier otro lugar.\nPodemos crear un objeto usando las llaves {…} con una lista opcional de propiedades. Una propiedad es un par \u0026ldquo;key:value\u0026rdquo;, donde key es un string (también llamado \u0026ldquo;nombre clave\u0026rdquo;), y value puede ser cualquier cosa. P.D. Para fines prácticos de la lección, nos referiremos a este par de conceptos como \u0026ldquo;clave:valor\u0026rdquo;.\nPodemos imaginar un objeto como un gabinete con archivos firmados. Cada pieza de datos es almacenada en su archivo por la clave. Es fácil encontrar un archivo por su nombre o agregar/eliminar un archivo.\nSe puede crear un objeto vacío (\u0026ldquo;gabinete vacío\u0026rdquo;) utilizando una de estas dos sintaxis:\nlet user = new Object(); // sintaxis de \u0026#34;constructor de objetos\u0026#34; let user = {}; // sintaxis de \u0026#34;objeto literal\u0026#34; Normalmente se utilizan las llaves {...}. Esa declaración se llama objeto literal.\nLiterales y propiedades # Podemos poner inmediatamente algunas propiedades dentro de {...} como pares \u0026ldquo;clave:valor\u0026rdquo;:\nlet user = { // un objeto name: \u0026#34;John\u0026#34;, // En la clave \u0026#34;name\u0026#34; se almacena el valor \u0026#34;John\u0026#34; age: 30 // En la clave \u0026#34;age\u0026#34; se almacena el valor 30 }; Una propiedad tiene una clave (también conocida como \u0026ldquo;nombre\u0026rdquo; o \u0026ldquo;identificador\u0026rdquo;) antes de los dos puntos \u0026quot;:\u0026quot; y un valor a la derecha.\nEn el objeto user hay dos propiedades:\nLa primera propiedad tiene la clave \u0026quot;name\u0026quot; y el valor \u0026quot;John\u0026quot;. La segunda tienen la clave \u0026quot;age\u0026quot; y el valor 30. Podemos imaginar al objeto user resultante como un gabinete con dos archivos firmados con las etiquetas \u0026ldquo;name\u0026rdquo; y \u0026ldquo;age\u0026rdquo;.\nPodemos agregar, eliminar y leer archivos de él en cualquier momento.\nSe puede acceder a los valores de las propiedades utilizando la notación de punto:\n// Obteniendo los valores de las propiedades del objeto: alert( user.name ); // John alert( user.age ); // 30 El valor puede ser de cualquier tipo. Agreguemos uno booleano:\nuser.isAdmin = true; Para eliminar una propiedad podemos usar el operador delete:\ndelete user.age; También podemos nombrar propiedades con más de una palabra. Pero, de ser así, debemos colocar la clave entre comillas \u0026quot;...\u0026quot;:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true // Las claves con más de una palabra deben ir entre comillas }; La última propiedad en la lista puede terminar con una coma:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, // termina con una \u0026#34;,\u0026#34; } Eso se llama una coma \u0026ldquo;final\u0026rdquo; o \u0026ldquo;colgante\u0026rdquo;. Facilita agregar, eliminar y mover propiedades, porque todas las líneas se vuelven similares.\nTutotial de Objetos # En el siguiente video, aprenderás más sobre los objetos:\n","date":"26 enero 2023","permalink":"/platform/levels/level1_2023/dia7/objetcs/","section":"Levels","summary":"JavaScript es uno de los lenguajes de programación más populares en el mundo, y una de las razones de su éxito radica en su capacidad para manejar y organizar datos a través de objetos y arrays.","title":"Objetos"},{"content":"Los principios de diseño web son fundamentales para crear sitios web atractivos, intuitivos y fáciles de usar. Estos principios incluyen la organización, la estética, la usabilidad y la accesibilidad. Al seguir estos principios, los diseñadores web pueden crear sitios web que sean estéticamente agradables y fáciles de navegar para los usuarios.\nEn primer lugar, la organización es importante para garantizar que el contenido de un sitio web esté estructurado de manera lógica y fácil de encontrar. Esto incluye la jerarquía de la información, el uso de encabezados y subtítulos, y la disposición de los elementos en la página.\nEn segundo lugar, la estética es importante para crear un sitio web atractivo y atractivo para los usuarios. Esto incluye el uso de colores, tipografía, imágenes y otros elementos visuales para crear una apariencia consistente y profesional.\nEn tercer lugar, la usabilidad es importante para garantizar que los usuarios puedan navegar fácilmente por un sitio web y encontrar la información que necesitan. Esto incluye la navegación, el diseño de formularios, y la disposición de los elementos en la página.\nFinalmente, la accesibilidad es esencial para garantizar que todos los usuarios, independientemente de sus habilidades, puedan acceder y utilizar un sitio web. Esto incluye el uso de etiquetas semanticas, tamaños de letra legibles, y la compatibilidad con diferentes dispositivos y navegadores.\nAl seguir estos principios, los diseñadores web pueden crear sitios web eficaces y accesibles para todos los usuarios.\nPrincipios Generales de Diseño Web # Dentro de esta sección aprenderás un poco más de estos principios, primero mira este video donde aprenderás principios básicos de diseño.\nPrincipios de Diseño - Shopify # Shopify es uno de los e-commerce mas populares en la actualidad, permite crear tiendas virtuales con facilidad y para lograr ese propósito, tiene su propio segmento dedicado al diseño web.\nAqui analizaremos algunas partes de esa seccion, los apartados que debes revisar son:\nDesign Colors Data Visualizations Space Estos apartados se encuentran en el menú lateral izquierdo.\nCada una de estas páginas está en ingles por default pero puedes cambiarlas a español dede tu navegador Edge o Chrome dando click derecho en la página y seleccionando la opción \u0026ldquo;traducir al español\u0026rdquo;.\nPara comenzar esta a leer esta documentación sigue el siguiente link:\nPolaris Design - Shopify\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia7/sem_design/","section":"Levels","summary":"Los principios de diseño web son fundamentales para crear sitios web atractivos, intuitivos y fáciles de usar.","title":"Principios de Diseño Web"},{"content":"El Document Object Model (DOM) es un estándar de la industria que define la estructura lógica de un documento y cómo se puede acceder y modificar su contenido y estilos. Es una interfaz de programación de aplicaciones (API) para documentos HTML y XML que permite a los desarrolladores interactuar con el contenido de una página web y modificarlo dinámicamente mediante código JavaScript.\nEl DOM es un árbol de nodos que representa la estructura de un documento, donde cada elemento HTML es un nodo y cada atributo es un nodo hijo. Los desarrolladores pueden utilizar el DOM para seleccionar y modificar elementos específicos en una página web, crear nuevos elementos, eliminar elementos existentes, cambiar estilos, agregar eventos, y mucho más.\nEn esta clase, vamos a profundizar en el concepto del DOM, cómo funciona, y cómo los desarrolladores pueden utilizarlo para interactuar con el contenido de una página web y crear aplicaciones web dinámicas e interactivas.\nAntes de entar a detalle en el DOM hablaremos un poco del entorno del navegador.\nEntorno de Navegador # El lenguaje JavaScript fue creado inicialmente para los navegadores web. Desde entonces, ha evolucionado en un lenguaje con muchos usos y plataformas.\nUna plataforma puede ser un navegador, un servidor web u otro host (\u0026ldquo;anfitrión\u0026rdquo;); incluso una máquina de café \u0026ldquo;inteligente\u0026rdquo;, si puede ejecutar JavaScript. Cada uno de ellos proporciona una funcionalidad específica de la plataforma. La especificación de JavaScript llama a esto entorno de host.\nUn entorno host proporciona sus propios objetos y funciones adicionales al núcleo del lenguaje. Los navegadores web proporcionan un medio para controlar las páginas web. Node.js proporciona características del lado del servidor, etc.\nAquí tienes una vista general de lo que tenemos cuando JavaScript se ejecuta en un navegador web:\nHay un objeto \u0026ldquo;raíz\u0026rdquo; llamado window. Tiene dos roles:\nPrimero, es un objeto global para el código JavaScript. Segundo, representa la \u0026ldquo;ventana del navegador\u0026rdquo; y proporciona métodos para controlarla. DOM (Modelo de Objetos del Documento) # La estructura de un documento HTML son las etiquetas.\nSegún el Modelo de Objetos del Documento (DOM), cada etiqueta HTML es un objeto. Las etiquetas anidadas son llamadas \u0026ldquo;hijas\u0026rdquo; de la etiqueta que las contiene. El texto dentro de una etiqueta también es un objeto.\nTodos estos objetos son accesibles empleando JavaScript, y podemos usarlos para modificar la página.\nPor ejemplo, document.body es el objeto que representa la etiqueta \u0026lt;body\u0026gt;.\nEjecutar el siguiente código hará que el \u0026lt;body\u0026gt; sea de color rojo durante 3 segundos:\ndocument.body.style.background = \u0026#39;red\u0026#39;; // establece un color de fondo rojo setTimeout(() =\u0026gt; document.body.style.background = \u0026#39;\u0026#39;, 3000); // regresa el color de fondo original despues de 3 segundos En el caso anterior usamos style.background para cambiar el color de fondo del document.body, sin embargo existen muchas otras propiedades, tales como:\ninnerHTML \u0026ndash; contenido HTML del nodo. offsetWidth \u0026ndash; ancho del nodo (en píxeles). \u0026hellip;, etc. Un ejemplo del DOM # Comencemos con el siguiente documento simple:\n\u0026lt;!DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;About elk\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; The truth about elk. \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; El DOM representa HTML como una estructura de árbol de etiquetas. A continuación podemos ver como se muestra:\nflowchart TD A(HTML) --\u003e B(HEAD) A --\u003e C[#text] A --\u003e D(BODY) B --\u003e E[#text] B --\u003e F(TITLE) B --\u003e I[#text] F --\u003e G[#text About elk] D --\u003e J[#text The truth about elk. #text] Cada nodo del árbol es un objeto.\nLas etiquetas son nodos de elementos (o solo elementos) y forman la estructura del árbol: \u0026lt;html\u0026gt; está ubicado en la raíz del documento, por lo tanto, \u0026lt;head\u0026gt; y \u0026lt;body\u0026gt; son sus hijos, etc.\nEl texto dentro de los elementos forma nodos de texto, etiquetados como #text. Un nodo de texto contiene solo una cadena. Esta puede no tener hijos y siempre es una hoja del árbol.\nPor ejemplo, la etiqueta \u0026lt;title\u0026gt; tiene el texto \u0026quot;About elk\u0026quot;.\nHay que tener en cuenta los caracteres especiales en nodos de texto:\nuna línea nueva: #text ↵ (en JavaScript se emplea \\n para obtener este resultado) un espacio: ␣ Los espacios y líneas nuevas son caracteres totalmente válidos, al igual que letras y dígitos. Ellos forman nodos de texto y se convierten en parte del DOM. Así, por ejemplo, en el caso de arriba la etiqueta \u0026lt;head\u0026gt; contiene algunos espacios antes de la etiqueta \u0026lt;title\u0026gt;, entonces ese texto se convierte en el nodo #text, que contiene una nueva línea y solo algunos espacios.\nHay solo dos excepciones de nivel superior:\nLos espacios y líneas nuevas antes de la etiqueta \u0026lt;head\u0026gt; son ignorados por razones históricas. Si colocamos algo después de la etiqueta \u0026lt;/body\u0026gt;, automáticamente se sitúa dentro de body, al final, ya que, la especificación HTML necesita que todo el contenido esté dentro de la etiqueta \u0026lt;body\u0026gt;, no puede haber espacios después de esta. En otros casos todo es sencillo \u0026ndash; si hay espacios (como cualquier carácter) en el documento, se convierten en nodos de texto en el DOM, y si los eliminamos, entonces no habrá ninguno.\nPara reforzar lo que hemos visto, mira el siguiente video donde se introduce el DOM:\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia6/introdom/","section":"Levels","summary":"El Document Object Model (DOM) es un estándar de la industria que define la estructura lógica de un documento y cómo se puede acceder y modificar su contenido y estilos.","title":"Introducción al DOM"},{"content":"Las pseudo-clases de CSS y la propiedad de transición son dos herramientas esenciales para cualquier desarrollador web.\nA través de las pseudo-clases, es posible seleccionar elementos específicos en una página web y aplicar estilos personalizados, mientras que la propiedad de transición permite crear efectos suaves al cambiar entre estilos.\nEn esta clase, exploraremos en profundidad el uso de estas herramientas y cómo pueden ser utilizadas para mejorar la experiencia de usuario en un sitio web. Desde cómo seleccionar elementos específicos hasta cómo crear transiciones suaves, cubriremos todo lo que necesita saber para sacar el máximo provecho de estas herramientas poderosas.\npseudo-clases # Las pseudo-clases son una herramienta muy poderosa en CSS que permite aplicar estilos a elementos en un estado específico. A continuación se presentan algunos ejemplos de cómo se pueden utilizar las pseudo-clases en una página web.\nEjemplo 1: Agregar estilos a los enlaces visitados # \u0026lt;a href=\u0026#34;http://ejemplo.com\u0026#34;\u0026gt;Este es un enlace\u0026lt;/a\u0026gt; a:visited { color: purple; } En este ejemplo, se está utilizando la pseudo-clase :visited para seleccionar y aplicar estilos a los enlaces que han sido visitados por el usuario en el documento HTML. En este caso, se está cambiando el color de los enlaces visitados a morado.\nEjemplo 2: Agregar estilos al elemento seleccionado # \u0026lt;select\u0026gt; \u0026lt;option\u0026gt;Opción 1\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Opción 2\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Opción 3\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; option:checked { background-color: green; color: white; } En este ejemplo, se está utilizando la pseudo-clase :checked para seleccionar y aplicar estilos al elemento seleccionado en una lista desplegable del documento HTML. En este caso, se está cambiando el color\nMás pseudo-clases # Hay muchas pseudo-clases con las que podemos trabajar, en el siguiente artículo de MDN aprenderás un poco más de ellas:\nPseudo-clases - MDN web docs\nTransition # La propiedad transition en CSS permite crear transiciones suaves entre estados de un elemento, como cambios en el tamaño, posición, color y otros aspectos visuales. A continuación se presentan algunos ejemplos de cómo se pueden utilizar las transiciones en una página web.\nEjemplo 1: Crear una transición de tamaño al pasar el cursor sobre un botón # \u0026lt;button\u0026gt;Haz clic aquí\u0026lt;/button\u0026gt; button { transition: width 2s; } button:hover { width: 200px; } En este ejemplo, se está utilizando la propiedad transition para crear una transición suave de 2 segundos en el ancho del botón al pasar el cursor sobre él. El boton tiene un tamaño estandar y al pasar el cursor se amplia para dar la sensación de clic.\nEjemplo 2: Crear una transición de color al hacer clic en un elemento # \u0026lt;div\u0026gt;Haz clic aquí\u0026lt;/div\u0026gt; div { transition: background-color 1s; } div:active { background-color: blue; } En este ejemplo, se está utilizando la propiedad transition para crear una transición suave de 1 segundo en el color de fondo del elemento al hacer clic sobre él. El elemento tiene un color de fondo estandar y al hacer clic en el mismo cambia a azul.\nEstos son solo algunos ejemplos simples de cómo se pueden utilizar las transiciones en CSS para crear efectos visuales suaves y mejorar la experiencia del usuario en una página web. Hay muchas otras propiedades y valores disponibles para personalizar las transiciones, como la duración, el retraso y la función de velocidad.\nAdemás de esto, también es posible aplicar transiciones a varias propiedades al mismo tiempo, utilizando la sintaxis abreviada:\ntransition: background-color 1s, width 2s, height 2s; Es importante tener en cuenta que las transiciones solo funcionan en navegadores modernos y no funcionarán en navegadores antiguos. Por lo tanto, es importante probar y verificar la compatibilidad de las transiciones en diferentes navegadores antes de implementarlas en un sitio web en producción.\nEn el siguiente artículo de MDN podrás aprender más sobre esta propiedad de CSS:\ntransition - MDN web docs\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia6/pseudo/","section":"Levels","summary":"Las pseudo-clases de CSS y la propiedad de transición son dos herramientas esenciales para cualquier desarrollador web.","title":"Pseudo"},{"content":"Switch # Una sentencia switch puede reemplazar múltiples condiciones if.\nProvee una mejor manera de comparar un valor con múltiples variantes.\nLa sintaxis # switch tiene uno o mas bloques casey un opcional default.\nSe ve de esta forma:\nswitch(x) { case \u0026#39;valor1\u0026#39;: // if (x === \u0026#39;valor1\u0026#39;) ... [break] case \u0026#39;valor2\u0026#39;: // if (x === \u0026#39;valor2\u0026#39;) ... [break] default: ... [break] } El valor de x es comparado contra el valor del primer case (en este caso, valor1), luego contra el segundo (valor2) y así sucesivamente, todo esto bajo una igualdad estricta. Si la igualdad es encontrada, switch empieza a ejecutar el código iniciando por el primer case correspondiente, hasta el break más cercano (o hasta el final del switch). Si no se cumple ningún caso entonces el código default es ejecutado (si existe). Ejemplo # Un ejemplo de switch (se resalta el código ejecutado):\nlet a = 2 + 2; switch (a) { case 3: alert( \u0026#39;Muy pequeño\u0026#39; ); break; case 4: alert( \u0026#39;¡Exacto!\u0026#39; ); // Se ejecuta esta línea break; case 5: alert( \u0026#39;Muy grande\u0026#39; ); break; default: alert( \u0026#34;Desconozco estos valores\u0026#34; ); } Aquí el switch inicia comparando a con la primera variante case que es 3. La comparación falla.\nLuego 4. La comparación es exitosa, por tanto la ejecución empieza desde case 4 hasta el break más cercano.\nSi no existe break entonces la ejecución continúa con el próximo case sin ninguna revisión.\nUn ejemplo sin break:\nlet a = 2 + 2; switch (a) { case 3: alert( \u0026#39;Muy pequeño\u0026#39; ); // Se ejecuta todas las lineas de abajo case 4: alert( \u0026#39;¡Exacto!\u0026#39; ); case 5: alert( \u0026#39;Muy grande\u0026#39; ); default: alert( \u0026#34;Desconozco estos valores\u0026#34; ); // Se ejecuta todas las lineas de arriba } En el ejemplo anterior veremos ejecuciones de tres alert secuenciales:\nalert( \u0026#39;¡Exacto!\u0026#39; ); alert( \u0026#39;Muy grande\u0026#39; ); alert( \u0026#34;Desconozco estos valores\u0026#34; ); El tipo importa # Vamos a enfatizar que la comparación de igualdad es siempre estricta. Los valores deben ser del mismo tipo para coincidir.\nPor ejemplo, consideremos el código:\nlet arg = prompt(\u0026#34;Ingrese un valor\u0026#34;); switch (arg) { case \u0026#39;0\u0026#39;: case \u0026#39;1\u0026#39;: alert( \u0026#39;Uno o cero\u0026#39; ); break; case \u0026#39;2\u0026#39;: alert( \u0026#39;Dos\u0026#39; ); break; case 3: alert( \u0026#39;¡Nunca ejecuta!\u0026#39; ); break; default: alert( \u0026#39;Un valor desconocido\u0026#39; ); } Para 0, 1, se ejecuta el primer alert. Para 2 se ejecuta el segundo alert. Pero para 3, el resultado del prompt es un string \u0026quot;3\u0026quot;, el cual no es estrictamente igual === al número 3. Por tanto ¡Tenemos un código muerto en case 3! La variante default se ejecutará. Debería usar switch? # Si bien es cierto, switch puede parecer una alternativa viable para ciertas situaciones con las que nos encontremos, en la actualidad hay muchas formas y motivos por los que su uso ha descendido y se debería evitar, sobre todo al escalar nuestro proyecto. En el siguiente video aprenderás como evitar su uso y mantener buenas prácticas en tu código (en el ejemplo se hace uso de la estructura objetos, ternarias y operadores lógicos, por ahora enfocate en el concepto en sí más que en las estructuras que se usan):\nBucles # Hasta el momento hemos aprendido 3 tipos de bucles: while, do while y for. En el siguiente video repasaremos el uso de ellos y tambien veremos el uso de algunas variaciones de este último que son for in y for of:\nDentro de W3Schools encontramos información detallada acerca de cada uno, aquí te dejo articulos sobre los distintos loops(ciclos), puedes cambiar el idioma a español en tu navegador Chrome o Edge dando click derecho en la pagina y seleccionando la opción \u0026ldquo;Traducir a español\u0026rdquo;:\nCiclo For ciclo For in Ciclo For Of Ciclo While ","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia5/switch_loop/","section":"Levels","summary":"Switch # Una sentencia switch puede reemplazar múltiples condiciones if.","title":"Switch y Bucles"},{"content":"La posicion y la profundidad son aspectos importantes en el diseño web, y en CSS tenemos las propiedades position y z-index para controlarlos.\nLa propiedad position nos permite especificar cómo se posiciona un elemento dentro de un contenedor, mientras que la propiedad z-index nos permite controlar el orden en el que los elementos aparecen en la pantalla. Juntas, estas propiedades nos permiten crear diseños complejos y sofisticados. En las siguientes sección veremos en detalle cómo funcionan estas propiedades y cómo utilizarlas en nuestros diseños.\nPosition # En el siguiente video aprenderas las bases de position en CSS:\nAdicionalmente, dentro del portal \u0026ldquo;MDN web docs_\u0026rdquo; podemos encontrar más información\tsobre esta propiedad position.\nposition - MDN web docs\nz-index # En el siguiente video aprenderás sobre el uso de z-indes en CSS:\nLuego de ver el video, lee el siguiente articulo de MDN sobre esta propiedad z-index.\nz-index - MDN web docs\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia5/position/","section":"Levels","summary":"La posicion y la profundidad son aspectos importantes en el diseño web, y en CSS tenemos las propiedades position y z-index para controlarlos.","title":"Position y Z-index"},{"content":"Etiqueta \u0026lt;Head\u0026gt; # En el siguiente video aprenderás sobre la importancia de la etiqueta \u0026lt;head\u0026gt; dentro de un documento HTML.\nEstas son las meta etiquetas más comunes pero existen muchas más de las cuales puedes seguir investigando si tienes curiosidad sobre este tema. Te dejo un link de referencia.\nMetadatos en HTML - MDN web docs\nEtiqueta \u0026lt;Body\u0026gt; # Estructura y Anatomía HTML # Multimedia en HTML # Dentro de HTML podemos incrustas archivos multimedia como imagenes, audio y video. En esta sección aprenderemos a insertar cada uno de ellas.\nImágenes # Las imágenes se pueden mostrar usando la etiqueta img. Esta etiqueta acepta un atributo src, que usamos para establecer la fuente de la imagen:\n\u0026lt;img src=\u0026#34;image.png\u0026#34; /\u0026gt; Podemos utilizar un amplio conjunto de imágenes. Los más comunes son PNG, JPEG, GIF, SVG y, más recientemente, WebP. El estándar HTML requiere que un atributo alt esté presente para describir la imagen. Esto lo utilizan los lectores de pantalla y también los bots de los motores de búsqueda:\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; /\u0026gt; Puede configurar los atributos width y height para establecer el espacio que ocupará el elemento, de modo que el navegador pueda tenerlo en cuenta y no cambie el diseño cuando esté completamente cargado. Toma un valor numérico, expresado en píxeles. Sin embargo, te recomendamos fuertemente modificar estos dos atributos desde CSS.\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; Video # Esta etiqueta le permite incrustar contenido de video en sus páginas HTML.\nEste elemento puede transmitir video, usando una cámara web getUserMedia() o WebRTC , o puede reproducir una fuente de video a la que haga referencia usando el atributo src:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; De forma predeterminada, el navegador no muestra ningún control para este elemento, solo el video. Lo que significa que el video se reproducirá solo si está configurado para reproducción automática (más sobre esto más adelante) y el usuario no puede ver cómo detenerlo, pausarlo, controlar el volumen o saltar a una posición específica en el video.\nPara mostrar los controles integrados, puede agregar el atributo controls:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls\u0026gt;\u0026lt;/video\u0026gt; Puede especificar el tipo MIME del archivo de video usando el atributo type. Si no está configurado, el navegador intentará determinarlo automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls type=\u0026#34;video/mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; Un archivo de video por defecto no se reproduce automáticamente. Agregue el atributo autoplay para reproducir el video automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls autoplay\u0026gt;\u0026lt;/video\u0026gt; El siguiente video explica como trabajar con cada uno de los conceptos multimedia que hemos aprendido hoy:\nAprendiendo con Práctica # Continua reforzando tu conocimiento de HTML y CSS siguiendo estos cursos:\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"25 enero 2023","permalink":"/platform/html/estructura/","section":"Htmls","summary":"Etiqueta \u0026lt;Head\u0026gt; # En el siguiente video aprenderás sobre la importancia de la etiqueta \u0026lt;head\u0026gt; dentro de un documento HTML.","title":"Head, Body y Estructura"},{"content":"Etiqueta \u0026lt;Head\u0026gt; # En el siguiente video aprenderás sobre la importancia de la etiqueta \u0026lt;head\u0026gt; dentro de un documento HTML.\nEstas son las meta etiquetas más comunes pero existen muchas más de las cuales puedes seguir investigando si tienes curiosidad sobre este tema. Te dejo un link de referencia.\nMetadatos en HTML - MDN web docs\nEtiqueta \u0026lt;Body\u0026gt; # Estructura y Anatomía HTML # Multimedia en HTML # Dentro de HTML podemos incrustas archivos multimedia como imagenes, audio y video. En esta sección aprenderemos a insertar cada uno de ellas.\nImágenes # Las imágenes se pueden mostrar usando la etiqueta img. Esta etiqueta acepta un atributo src, que usamos para establecer la fuente de la imagen:\n\u0026lt;img src=\u0026#34;image.png\u0026#34; /\u0026gt; Podemos utilizar un amplio conjunto de imágenes. Los más comunes son PNG, JPEG, GIF, SVG y, más recientemente, WebP. El estándar HTML requiere que un atributo alt esté presente para describir la imagen. Esto lo utilizan los lectores de pantalla y también los bots de los motores de búsqueda:\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; /\u0026gt; Puede configurar los atributos width y height para establecer el espacio que ocupará el elemento, de modo que el navegador pueda tenerlo en cuenta y no cambie el diseño cuando esté completamente cargado. Toma un valor numérico, expresado en píxeles. Sin embargo, te recomendamos fuertemente modificar estos dos atributos desde CSS.\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; Video # Esta etiqueta le permite incrustar contenido de video en sus páginas HTML.\nEste elemento puede transmitir video, usando una cámara web getUserMedia() o WebRTC , o puede reproducir una fuente de video a la que haga referencia usando el atributo src:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; De forma predeterminada, el navegador no muestra ningún control para este elemento, solo el video. Lo que significa que el video se reproducirá solo si está configurado para reproducción automática (más sobre esto más adelante) y el usuario no puede ver cómo detenerlo, pausarlo, controlar el volumen o saltar a una posición específica en el video.\nPara mostrar los controles integrados, puede agregar el atributo controls:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls\u0026gt;\u0026lt;/video\u0026gt; Puede especificar el tipo MIME del archivo de video usando el atributo type. Si no está configurado, el navegador intentará determinarlo automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls type=\u0026#34;video/mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; Un archivo de video por defecto no se reproduce automáticamente. Agregue el atributo autoplay para reproducir el video automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls autoplay\u0026gt;\u0026lt;/video\u0026gt; El siguiente video explica como trabajar con cada uno de los conceptos multimedia que hemos aprendido hoy:\nAprendiendo con Práctica # Continua reforzando tu conocimiento de HTML y CSS siguiendo estos cursos:\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"25 enero 2023","permalink":"/platform/mysql/dml2/","section":"Mysqls","summary":"Etiqueta \u0026lt;Head\u0026gt; # En el siguiente video aprenderás sobre la importancia de la etiqueta \u0026lt;head\u0026gt; dentro de un documento HTML.","title":"Head, Body y Estructura"},{"content":"Head # El elemento HTML \u0026lt;head\u0026gt; provee información general (metadatos) acerca del documento, incluyendo su título y enlaces a scripts y hojas de estilos. Es importante diferenciar este elemento del elemento header el cual sirve como etiqueta semántica para contener el contenido de encabezado de nuestra página web.\nSiempre se escribe antes de la etiqueta body, como hijo de la etiqueta html:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; ... \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Dentro de esta etiqueta no usamos atributos y tampoco escribimos contenido en él. Sirve solo para contener otras etiquetas, dependiendo que necesitemos hacer:\ntitle script noscript link style base meta La etiqueta title # La etiqueta title determina el título de la página. El título se muestra en el navegador, y es especialmente importante ya que es uno de los factores clave para la optimización de motores de búsqueda (SEO).\nLa etiqueta script # Esta etiqueta se utiliza para añadir JavaScript a la página.\nPuede incluirlo en línea, usando una etiqueta de apertura, el código JavaScript y luego la etiqueta de cierre:\n\u0026lt;script\u0026gt; ..some JS \u0026lt;/script\u0026gt; O bien, puede cargar un archivo JavaScript externo mediante el atributo src:\n\u0026lt;script src=\u0026#34;file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; El atributo type de forma predeterminada se establece en text/javascript, por lo que es completamente opcional.\nay algo muy importante que saber sobre esta etiqueta.\nA veces, esta etiqueta se usa en la parte inferior de la página, justo antes de la etiqueta de cierre \u0026lt;/body\u0026gt;. ¿Por qué? Por razones de rendimiento.\nLa carga de secuencias de comandos bloquea de forma predeterminada la representación de la página hasta que la secuencia de comandos se analiza y se carga.\nAl colocarlo en la parte inferior de la página, la secuencia de comandos se carga y ejecuta después de que toda la página ya se analizó y se cargó, lo que brinda una mejor experiencia al usuario que al mantenerlo en la etiqueta head.\nEsto puede ser considerado una mala práctica. Es mejor dejar vivir script dentro de la etiqueta head.\nEn JavaScript moderno, tenemos una alternativa que tiene más rendimiento que mantener el script en la parte inferior de la página: el atributo defer. Este es un ejemplo que carga un archivo file.js, relativo a la URL actual:\n\u0026lt;script defer src=\u0026#34;file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Este es el escenario que desencadena la ruta más rápida a una página de carga rápida y JavaScript de carga rápida.\nLa etiqueta link # La etiqueta link se utiliza para establecer relaciones entre un documento y otros recursos.\nSe utiliza principalmente para vincular un archivo CSS externo para cargarlo.\nEste elemento no tiene etiqueta de cierre.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; ... \u0026lt;link href=\u0026#34;file.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; ... \u0026lt;/head\u0026gt; ... \u0026lt;/html\u0026gt; El atributo media permite la carga de diferentes hojas de estilo dependiendo de las capacidades del dispositivo:\n\u0026lt;link href=\u0026#34;file.css\u0026#34; media=\u0026#34;screen\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;print.css\u0026#34; media=\u0026#34;print\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; O podemos asociar un favicon usando:\n\u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;/assets/apple-touch-icon.png\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;/assets/favicon-32x32.png\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;/assets/favicon-16x16.png\u0026#34; /\u0026gt; La etiqueta style # Esta etiqueta se puede usar para agregar estilos al documento, en lugar de cargar una hoja de estilo externa:\n\u0026lt;style\u0026gt; .some-css { } \u0026lt;/style\u0026gt; La etiqueta meta # Las metaetiquetas realizan una variedad de tareas y son muy, muy importantes, especialmente para el SEO. Los elementos meta solo tienn una etiqueta inicial. La etiqueta más básica es la metaetiqueta description:\n\u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;A nice page\u0026#34; /\u0026gt; Google podría usar esto para generar la descripción de la página en sus páginas de resultados, si encuentra que describe mejor la página que el contenido de la página (no me preguntes cómo).\nLa etiqueta meta charset se utiliza para establecer la codificación de caracteres de la página utf-8 en la mayoría de los casos:\n\u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; La metaetiqueta viewport se usa para decirle al navegador que establezca el ancho de la página en función del ancho del dispositivo.\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; Estas son las meta etiquetas más comunes pero existen muchas más de las cuales puedes seguir investigando si tienes curiosidad sobre este tema. Te dejo un link de referencia.\nMetadatos en HTML - MDN web docs\nMultimedia en HTML # Dentro de HTML podemos incrustas archivos multimedia como imagenes, audio y video. En esta sección aprenderemos a insertar cada uno de ellas.\nImágenes # Las imágenes se pueden mostrar usando la etiqueta img. Esta etiqueta acepta un atributo src, que usamos para establecer la fuente de la imagen:\n\u0026lt;img src=\u0026#34;image.png\u0026#34; /\u0026gt; Podemos utilizar un amplio conjunto de imágenes. Los más comunes son PNG, JPEG, GIF, SVG y, más recientemente, WebP. El estándar HTML requiere que un atributo alt esté presente para describir la imagen. Esto lo utilizan los lectores de pantalla y también los bots de los motores de búsqueda:\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; /\u0026gt; Puede configurar los atributos width y height para establecer el espacio que ocupará el elemento, de modo que el navegador pueda tenerlo en cuenta y no cambie el diseño cuando esté completamente cargado. Toma un valor numérico, expresado en píxeles. Sin embargo, te recomendamos fuertemente modificar estos dos atributos desde CSS.\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; Audio # LA etiqueta audio le permite incrustar contenido de audio en sus páginas HTML.\nEste elemento puede transmitir audio, tal vez usando un micrófono a través de getUserMedia() , o puede reproducir una fuente de audio a la que hace referencia con el atributo src:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; Por defecto, el navegador no muestra ningún control para este elemento. Lo que significa que el audio se reproducirá solo si se establece en reproducción automática (más sobre esto más adelante) y el usuario no puede ver cómo detenerlo o controlar el volumen o moverse a través de la pista.\nPara mostrar los controles integrados, puede agregar el atributo controls:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34; controls\u0026gt;\u0026lt;/audio\u0026gt; Los controles pueden tener una máscara personalizada.\nPuede especificar el tipo MIME del archivo de audio utilizando el atributo type. Si no está configurado, el navegador intentará determinarlo automáticamente:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34; controls type=\u0026#34;audio/mpeg\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; Un archivo de audio por defecto no se reproduce automáticamente. Agregue el atributo autoplay para reproducir el audio automáticamente:\n\u0026lt;audio src=\u0026#34;file.mp3\u0026#34; controls autoplay\u0026gt;\u0026lt;/audio\u0026gt; Nota: los navegadores móviles no permiten la reproducción automática\nVideo # Esta etiqueta le permite incrustar contenido de video en sus páginas HTML.\nEste elemento puede transmitir video, usando una cámara web getUserMedia() o WebRTC , o puede reproducir una fuente de video a la que haga referencia usando el atributo src:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; De forma predeterminada, el navegador no muestra ningún control para este elemento, solo el video. Lo que significa que el video se reproducirá solo si está configurado para reproducción automática (más sobre esto más adelante) y el usuario no puede ver cómo detenerlo, pausarlo, controlar el volumen o saltar a una posición específica en el video.\nPara mostrar los controles integrados, puede agregar el atributo controls:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls\u0026gt;\u0026lt;/video\u0026gt; Puede especificar el tipo MIME del archivo de video usando el atributo type. Si no está configurado, el navegador intentará determinarlo automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls type=\u0026#34;video/mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; Un archivo de video por defecto no se reproduce automáticamente. Agregue el atributo autoplay para reproducir el video automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls autoplay\u0026gt;\u0026lt;/video\u0026gt; El siguiente video explica como trabajar con cada uno de los conceptos multimedia que hemos aprendido hoy:\nSelectores # Hace poco vimos como funciona la especificidad en CSS y algunos selectores que podemos usar. Ahora repasemos brevemente como funciona la especificidad con esta imagen:\nComo vimos tambien en ese momento, podemos combinar los selectores segun necesitemos, por ejemplo:\n.animal.perro { background-color: green; } Cuando tenemos esta situación, debemos tener en cuenta que la especificidad se suma, lo cual puede afectar la propiedad que se aplica a un elemento, por ejemplo, si tenemos los siguientes elementos:\n\u0026lt;p class=\u0026#34;animal perro\u0026#34;\u0026gt;Firulais\u0026lt;/p\u0026gt; p { background-color: red; } .animal { background-color: green; } El primer Selector tiene una especificidad de 0.0.1 (Ver la tabla superior) y el de clase tiene una especificidad de 0.1.0 por lo tanto, se aplicará background-color: green. Ahora vamos a añadir un selector de clase al primer selector:\np.perro { background-color: red; } .animal { background-color: green; } Ahora el primero tiene una especificidad de 0.1.1 y el segundo de 0.1.0 por lo tanto, se aplicará background-color: red.\nSi bien es cierto los estilos en CSS se aplican en cascada, cuando tenemos un conflicto entre dos propiedades que pueden afectar al mismo elemento, la especificidad determina cual de los dos estilos se aplica al elemento, aplicando el que tenga una especificidad mayor.\nSi deseamos que el color verde se aplique al elemento, entonces podemos mejorar su especificidad:\np.perro { background-color: red; } .animal.perro { background-color: green; } Ahora el primer selector tiene especificidad de 0.1.1 y el segundo de 0.2.0, por lo que se aplicará background-color: green.\nCuando tenemos un proyecto pequeño probablemente no tengamos problemas con la especificidad, pero a medida que nuestro proyecto crece, la forma en que seleccionamos elementos se vuelve mas compleja, podríamos llegar a tener algo como esto:\n.container \u0026gt; .animal.perro ~ a.link{ /* 0.4.1 */ color: red; } .container \u0026gt; a#bot.link.green{ /* 1.3.1 */ color: green; } Es aquí donde podemos aplicar la especificidad para determinar correctamente cual es el estilo que se está aplicando y como corregirlo de tal forma en la que no afecte el resto de elementos que estoy seleccionando.\nPara que podamos comprender la manera correcta de aplicar los selectores, repasemos los distintos selectores que encontramos en CSS 🧐.\n","date":"25 enero 2023","permalink":"/platform/levels/level1_2023/dia4/headcss/","section":"Levels","summary":"Head # El elemento HTML \u0026lt;head\u0026gt; provee información general (metadatos) acerca del documento, incluyendo su título y enlaces a scripts y hojas de estilos.","title":"Head, Multimedia y Selectores"},{"content":"Etiqueta \u0026lt;Head\u0026gt; # En el siguiente video aprenderás sobre la importancia de la etiqueta \u0026lt;head\u0026gt; dentro de un documento HTML.\nEstas son las meta etiquetas más comunes pero existen muchas más de las cuales puedes seguir investigando si tienes curiosidad sobre este tema. Te dejo un link de referencia.\nMetadatos en HTML - MDN web docs\nEtiqueta \u0026lt;Body\u0026gt; # Estructura y Anatomía HTML # Multimedia en HTML # Dentro de HTML podemos incrustas archivos multimedia como imagenes, audio y video. En esta sección aprenderemos a insertar cada uno de ellas.\nImágenes # Las imágenes se pueden mostrar usando la etiqueta img. Esta etiqueta acepta un atributo src, que usamos para establecer la fuente de la imagen:\n\u0026lt;img src=\u0026#34;image.png\u0026#34; /\u0026gt; Podemos utilizar un amplio conjunto de imágenes. Los más comunes son PNG, JPEG, GIF, SVG y, más recientemente, WebP. El estándar HTML requiere que un atributo alt esté presente para describir la imagen. Esto lo utilizan los lectores de pantalla y también los bots de los motores de búsqueda:\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; /\u0026gt; Puede configurar los atributos width y height para establecer el espacio que ocupará el elemento, de modo que el navegador pueda tenerlo en cuenta y no cambie el diseño cuando esté completamente cargado. Toma un valor numérico, expresado en píxeles. Sin embargo, te recomendamos fuertemente modificar estos dos atributos desde CSS.\n\u0026lt;img src=\u0026#34;dog.png\u0026#34; alt=\u0026#34;A picture of a dog\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; Video # Esta etiqueta le permite incrustar contenido de video en sus páginas HTML.\nEste elemento puede transmitir video, usando una cámara web getUserMedia() o WebRTC , o puede reproducir una fuente de video a la que haga referencia usando el atributo src:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; De forma predeterminada, el navegador no muestra ningún control para este elemento, solo el video. Lo que significa que el video se reproducirá solo si está configurado para reproducción automática (más sobre esto más adelante) y el usuario no puede ver cómo detenerlo, pausarlo, controlar el volumen o saltar a una posición específica en el video.\nPara mostrar los controles integrados, puede agregar el atributo controls:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls\u0026gt;\u0026lt;/video\u0026gt; Puede especificar el tipo MIME del archivo de video usando el atributo type. Si no está configurado, el navegador intentará determinarlo automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls type=\u0026#34;video/mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; Un archivo de video por defecto no se reproduce automáticamente. Agregue el atributo autoplay para reproducir el video automáticamente:\n\u0026lt;video src=\u0026#34;file.mp4\u0026#34; controls autoplay\u0026gt;\u0026lt;/video\u0026gt; El siguiente video explica como trabajar con cada uno de los conceptos multimedia que hemos aprendido hoy:\nAprendiendo con Práctica # Continua reforzando tu conocimiento de HTML y CSS siguiendo estos cursos:\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"25 enero 2023","permalink":"/platform/mysql/micellaneous/","section":"Mysqls","summary":"Etiqueta \u0026lt;Head\u0026gt; # En el siguiente video aprenderás sobre la importancia de la etiqueta \u0026lt;head\u0026gt; dentro de un documento HTML.","title":"Micellaneous"},{"content":"Entender el Box Model es una de las cosas más importantes para trabajar correctamente con HTML y CSS, una vez este concepto nos queda claro, es posible que se nos facilite mucho la construcción de sitios web.\nEn el siguiente artículo encontrarás información mas detallada sobre cómo funciona el 👉 box-model.\nLee atentamente el artículo antes de continuar.\nDisplay # Hace poco estuvimos aprendiendo sobre la propiedad display en CSSy conocimos 4 propiedades básicas:\nblock inline inline-block none Un display es una propiedad en CSS que se utiliza para especificar cómo se debe mostrar un elemento en una página web.\nDisplay block: Este valor hace que el elemento ocupe todo el ancho disponible y comience en una nueva línea después del elemento anterior. Los elementos con display block son, por defecto, visibles y ocupan todo el espacio disponible en la dirección del eje principal (generalmente, la dirección vertical). Ejemplo de código:\ndiv { display: block; } Display inline: Este valor hace que el elemento se comporte como una línea de texto, es decir, no comienza en una nueva línea y solo ocupa el espacio necesario para su contenido. Los elementos con display inline son, por defecto, visibles y solo ocupan el espacio necesario para su contenido. Ejemplo de código:\nspan { display: inline; } Display inline-block: Este valor combina las características de los valores block e inline. Los elementos con display inline-block son, por defecto, visibles y ocupan solo el espacio necesario para su contenido, pero pueden tener un ancho y un alto especificados. Ejemplo de código:\nimg { display: inline-block; width: 50px; height: 50px; } Flexbox: Flexbox es una manera de crear diseños flexibles y adaptativos en CSS. Se utiliza para alinear elementos en una fila o columna y distribuir el espacio disponible de manera eficiente. Un ejemplo de código para crear un contenedor flex:\n.container { display: flex; } Todos estos valores y conceptos son estandarizado por el W3C, las especificaciones de las propiedades y su uso pueden ser consultadas en https://www.w3.org/TR/CSS/\nEl centrado de Elementos # Una práctica común con los elementos, es poder alinearlos y como viste en capitulos pasados, para mover los elementos respecto a otros puedes usar margin o si deseas cambiar su espacio interior usas padding.\nPara este ejemplo pega el siguiente codigo en un documento HTML:\n\u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;contenedor\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;caja1\u0026#34;\u0026gt; Soy una caja \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Tambien añade estos estilos CSS en la etiqueta \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt;:\n.contenedor { width: 100%; height: 100vh; } .caja1 { background-color: #FAF; } Ahora deberías ver que una caja que abarca todo el ancho disponible. vamos a ajustar el ancho, añade la siguiente regla css:\n.caja1 { background-color: #FAF; width: 200px; } Con esto, nuestra caja mide 200px.\nCuando queremos centrar un elemento, podemos usar algunas técnicas sencillas, te explicaré algunas que puedes tener en cuenta:\nUsando Margin: Podemos centrar un objeto de manera Horizontal usando el Margin, para usamos la propiedad margin y le damos un valor auto:\n.caja1 { background-color: #FAF; margin: auto; /* Solo se aplicará a los lados, aun podemos poner un margin para top y bottom*/ } Usando Flex: Flex nos ayuda a posicionar los elementos hijo respecto a su contenedor padre. Para ver una idea más clara, ahora vamos a centrar ambas cajas usando el display flex. Para ello primero quitamos la propiedad margin que habiamos usado en el ejemplo anterior y ahora añadimos lo siguiente a el selector .contenedor:\n.contenedor { width: 100%; height: 100vh; display: flex; /* Indicamos que el contenedor tiene display flex*/ justify-content: center; /* Indicamos que queremos justificar el contenido al centro en el eje horizontal */ } Con esto hemos centrado nuestra caja dentro del eje horizontal, si queremos añadir un centrado vertical podemo hacer lo siguiente:\n.contenedor { width: 100%; height: 100vh; display: flex; /* Indicamos que el contenedor tiene display flex*/ justify-content: center; /* Indicamos que queremos justificar el contenido al centro en el eje horizontal */ align-items: center; /* Indicamos que estamos centrando de manera vertical */ } Esto que puede parecer sencillo, en ocasiones es un dolor de cabeza para muchos desarrolladores por desconocer la correcta aplicación de estas propiedades.\nIntroducción a Flexbox # Si bien es cierto hemos usado Flex para uno de los ejemplos, aún no hemos visto que es este tipo de display y las ventajas que trae, así que veremos un poco de ello en el siguiente video:\n","date":"24 enero 2023","permalink":"/platform/levels/level1_2023/dia4/display/","section":"Levels","summary":"Entender el Box Model es una de las cosas más importantes para trabajar correctamente con HTML y CSS, una vez este concepto nos queda claro, es posible que se nos facilite mucho la construcción de sitios web.","title":"Display"},{"content":"Fuentes # En los albores de la web, solo tenía un puñado de fuentes entre las que podía elegir, afortunadamente, hoy puedes cargar cualquier tipo de fuente en tus páginas. CSS ha ganado muchas buenas capacidades a lo largo de los años en lo que respecta a las fuentes.\nLa propiedad font es la abreviatura de una serie de propiedades, las que veremos hoy son las siguientes:\nfont-family font-weight font-style font-size Veamos cada uno de ellos.\nfont-family # Establece la familia de fuentes que utilizará el elemento. ¿Por qué “familia”? Porque lo que conocemos como fuente en realidad se compone de varias subfuentes. que proporcionan todo el estilo (negrita, cursiva, ligero\u0026hellip;) que necesitamos. Aquí hay un ejemplo de la aplicación Font Book de una Mac: la familia de fuentes Fira Code alberga varias fuentes dedicadas debajo:\nEsta propiedad le permite seleccionar una fuente específica, por ejemplo:\nbody { font-family: Helvetica; } Puede establecer varios valores, por lo que se usará la segunda opción si la primera no se puede usar por algún motivo (si no se encuentra en la máquina o si la conexión de red para descargar la fuente falló, por ejemplo):\nbody { font-family: Helvetica, Arial; } font-weight # Esta propiedad establece el ancho de una fuente. Puede utilizar esos valores predefinidos:\nnormal bold bolder (en relación con el elemento principal) lighter (en relación con el elemento principal) O usando las palabras clave numéricas\n100 200 300 400, asignado a normal 500 600 700 asignado a bold 800 900 donde 100 es la fuente más clara y 900 es la más gruesa.\nfont-style # Le permite aplicar un estilo de cursiva a una fuente. Esta propiedad también permite los valores oblique y normal. Hay muy poca o ninguna diferencia entre usar italic y oblique. El primero es más fácil para mí, ya que HTML ya ofrece un elemento i que significa cursiva (italic).\np { font-style: italic; } font-size # Esta propiedad se utiliza para determinar el tamaño de las fuentes. Puedes pasar 2 tipos de valores: un valor de longitud como px, em, rem, o una palabra clave de valor pre definido. En el Segundo caso los valores que puedes usar son:\nxx-small x-small small medium large x-large xx-large smaller (relativo al elemnto padre) larger (relativo al elemento padre) p { font-size: 20px; } li { font-size: medium; } Fuente personalizada # En ocasiones, querrás usar fuentes que no están por defecto dentro del navegador del cliente o tienes que asegurarte que la fuente que deseas usar, esté disponible para que el cliente tambien pueda renderizarla. Para esto podemos importar fuentes personalizadas a nuestro proyecto, en el siguiente video aprenderás a usar fuentes personalizadas de google a tu página web, da click en el siguiente enlace para abrir el video en youtube:\nFuentes Personalizadas en CSS - Youtube\nTipografía | Texto # Ya hablamos sobre las fuentes, pero hay más en el estilo del texto. En esta sección hablaremos de las siguientes propiedades:\ntext-decoration text-align line-height text-shadow text-decoration # Esta propiedad se usa para agregar decoraciones al texto, incluyendo:\nunderline overline line-through blink none a { text-decoration: underline; } text-align # Por defecto, la alineación del texto tiene el valor start, lo que significa que el texto comienza en el \u0026ldquo;inicio\u0026rdquo;. Los valores posibles son start, end, left, right, center, justify(es bueno tener un espacio constante en los extremos de las líneas):\np { text-align: center; } line-height # Esto le permite cambiar la altura de una línea. Cada línea de texto tiene una cierta altura de fuente, pero luego hay un espacio adicional verticalmente entre las líneas. Esa es la altura de la línea. los valores que puedes utilizar son unidades de medida (px, rem, em, etc).\np { line-height: 1rem; } text-shadow # Aplica una sombra al texto. Por defecto, el texto ahora tiene sombra.\nEsta propiedad acepta un color opcional y un conjunto de valores que establecen:\nel desplazamiento X de la sombra del texto el desplazamiento Y de la sombra del texto el radio de desenfoque Si no se especifica el color, la sombra utilizará el color del texto.\nHay muchas más propiedades CSS para fuentes y textos, pero las veremos más adelanta, incluso como importar otro tipo de fuentes. Si deseas aprender más propiedades de CSS puedes ir al siguiente enlace, la página está en inglés pero puedes usar la opcion de traducir páginas que te da tu navegador:\ncssreference.io\n","date":"24 enero 2023","permalink":"/platform/levels/level1_2023/dia3/texto_css/","section":"Levels","summary":"Fuentes # En los albores de la web, solo tenía un puñado de fuentes entre las que podía elegir, afortunadamente, hoy puedes cargar cualquier tipo de fuente en tus páginas.","title":"Propiedades de Fuente y Texto"},{"content":"Bucles # Usualmente necesitamos repetir acciones.\nPor ejemplo, mostrar los elementos de una lista uno tras otro o simplemente ejecutar el mismo código para cada número del 1 al 10.\nLos Bucles son una forma de repetir el mismo código varias veces.\nEl bucle \u0026ldquo;while\u0026rdquo; # El bucle while (mientras) tiene la siguiente sintaxis:\nwhile (condition) { // código // llamado \u0026#34;cuerpo del bucle\u0026#34; } Mientras la condición condition sea verdadera, el código del cuerpo del bucle será ejecutado.\nPor ejemplo, el bucle debajo imprime i mientras se cumpla i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // muestra 0, luego 1, luego 2 alert( i ); i++; } Cada ejecución del cuerpo del bucle se llama iteración. El bucle en el ejemplo de arriba realiza 3 iteraciones.\nSi faltara i++ en el ejemplo de arriba, el bucle sería repetido (en teoría) eternamente. En la práctica, el navegador tiene maneras de detener tales bucles desmedidos; y en el JavaScript del lado del servidor, podemos eliminar el proceso.\nCualquier expresión o variable puede usarse como condición del bucle, no solo las comparaciones: El while evaluará y transformará la condición a un booleano.\nPor ejemplo, una manera más corta de escribir while (i != 0) es while (i):\nlet i = 3; while (i) { // cuando i sea 0, la condición se volverá falsa y el bucle se detendrá alert( i ); i--; } El bucle \u0026ldquo;do..while\u0026rdquo; # La comprobación de la condición puede ser movida debajo del cuerpo del bucle usando la sintaxis do..while:\ndo { // cuerpo del bucle } while (condition); El bucle primero ejecuta el cuerpo, luego comprueba la condición, y, mientras sea un valor verdadero, la ejecuta una y otra vez.\nPor ejemplo:\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); Esta sintaxis solo debe ser usada cuando quieres que el cuerpo del bucle sea ejecutado al menos una vez sin importar que la condición sea verdadera. Usualmente, se prefiere la otra forma: while(…) {…}.\nEl bucle \u0026ldquo;for\u0026rdquo; # El bucle for es más complejo, pero también el más usado.\nSe ve así:\nfor (begin; condition; step) { // (comienzo, condición, paso) // ... cuerpo del bucle ... } Aprendamos el significado de cada parte con un ejemplo. El bucle debajo corre alert(i) para i desde 0 hasta (pero no incluyendo) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // muestra 0, luego 1, luego 2 alert(i); } Vamos a examinar la declaración for parte por parte:\nparte comienzo let i = 0 Se ejecuta una vez al comienzo del bucle. condición i \u0026lt; 3 Comprobada antes de cada iteración del bucle. Si es falsa, el bucle finaliza. cuerpo alert(i) Se ejecuta una y otra vez mientras la condición sea verdadera. paso i++ Se ejecuta después del cuerpo en cada iteración. El algoritmo general del bucle funciona de esta forma:\nSe ejecuta comenzar → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → ... Si eres nuevo en bucles, te podría ayudar regresar al ejemplo y reproducir cómo se ejecuta paso por paso en una pedazo de papel.\nEsto es lo que sucede exactamente en nuestro caso:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // se ejecuta comenzar let i = 0 // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // ...finaliza, porque ahora i == 3 Declaración de variable en línea Aquí, la variable \"counter\" `i` es declarada en el bucle. Esto es llamado una declaración de variable \"en línea\". Dichas variables son visibles solo dentro del bucle. for (let i = 0; i \u0026lt; 3; i++) { alert(i); // 0, 1, 2 } alert(i); // error, no existe dicha variable En vez de definir una variable, podemos usar una que ya exista:\nlet i = 0; for (i = 0; i \u0026lt; 3; i++) { // usa una variable existente alert(i); // 0, 1, 2 } alert(i); // 3, visible, porque fue declarada fuera del bucle Omitiendo partes # Cualquier parte de for puede ser omitida.\nPor ejemplo, podemos quitar comienzo si no necesitamos realizar nada al inicio del bucle.\nComo aquí:\nlet i = 0; // Ya tenemos i declarada y asignada for (; i \u0026lt; 3; i++) { // no hay necesidad de \u0026#34;comenzar\u0026#34; alert( i ); // 0, 1, 2 } También podemos eliminar la parte paso:\nlet i = 0; for (; i \u0026lt; 3;) { alert( i++ ); } Esto hace al bucle idéntico a while (i \u0026lt; 3).\nEn realidad podemos eliminar todo, creando un bucle infinito:\nfor (;;) { // se repite sin limites } Por favor, nota que los dos punto y coma ; del for deben estar presentes. De otra manera, habría un error de sintaxis.\nRompiendo el bucle # Normalmente, se sale de un bucle cuando la condición se vuelve falsa.\nPero podemos forzar una salida en cualquier momento usando la directiva especial break.\nPor ejemplo, el bucle debajo le pide al usuario por una serie de números, \u0026ldquo;rompiéndolo\u0026rdquo; cuando un número no es ingresado:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Ingresa un número\u0026#34;, \u0026#39;\u0026#39;); if (!value) break; // (*) sum += value; } alert( \u0026#39;Suma: \u0026#39; + sum ); La directiva break es activada en la línea (*) si el usuario ingresa una línea vacía o cancela la entrada. Detiene inmediatamente el bucle, pasando el control a la primera línea después de el bucle. En este caso, alert.\nLa combinación \u0026ldquo;bucle infinito + break según sea necesario\u0026rdquo; es ideal en situaciones donde la condición del bucle debe ser comprobada no al inicio o al final de el bucle, sino a la mitad o incluso en varias partes del cuerpo.\nContinuar a la siguiente iteración # La directiva continue es una \u0026ldquo;versión más ligera\u0026rdquo; de break. No detiene el bucle completo. En su lugar, detiene la iteración actual y fuerza al bucle a comenzar una nueva (si la condición lo permite).\nPodemos usarlo si hemos terminado con la iteración actual y nos gustaría movernos a la siguiente.\nEl bucle debajo usa continue para mostrar solo valores impares:\nfor (let i = 0; i \u0026lt; 10; i++) { // si es verdadero, saltar el resto del cuerpo if (i % 2 == 0) continue; alert(i); // 1, luego 3, 5, 7, 9 } Para los valores pares de i, la directiva continue deja de ejecutar el cuerpo y pasa el control a la siguiente iteración de for (con el siguiente número). Así que el alert solo es llamado para valores impares.\nLa directiva `continue` ayuda a disminuir la anidación Un bucle que muestra valores impares podría verse así: for (let i = 0; i \u0026lt; 10; i++) { if (i % 2) { alert( i ); } } Desde un punto de vista técnico, esto es idéntico al ejemplo de arriba. Claro, podemos simplemente envolver el código en un bloque if en vez de usar continue.\nPero como efecto secundario, esto crearía un nivel más de anidación (la llamada a alert dentro de las llaves). Si el código dentro de if posee varias líneas, eso podría reducir la legibilidad en general. Más sobre bucles # En el siguiente video vamos a ver algunos ejemplos de como aplicar los bucles que hemos mencionado:\n","date":"24 enero 2023","permalink":"/platform/jsvanilla/bucles/","section":"Jsvanillas","summary":"Bucles # Usualmente necesitamos repetir acciones.","title":"Estructura de Control: Bucles"},{"content":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.\nPara esto podemos usar la sentencia if y el operador condicional ?, también llamado operador de “signo de interrogación”.\nLa sentencia \u0026ldquo;if\u0026rdquo; # La sentencia if(...) evalúa la condición en los paréntesis, y si el resultado es true ejecuta un bloque de código.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En que año fué publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) alert( \u0026#39;¡Estás en lo cierto!\u0026#39; ); Aquí la condición es una simple igualdad (year == 2015), pero podría ser mucho mas complejo.\nSi quisiéramos ejecutar más de una sentencia, debemos encerrar nuestro bloque de código entre llaves:\nif (year == 2015) { alert( \u0026#34;¡Es Correcto!\u0026#34; ); alert( \u0026#34;¡Eres muy inteligente!\u0026#34; ); } Recomendamos siempre encerrar nuestro bloque de código entre llaves {} siempre que se utilice la sentencia if, inclusive si solo se va a ejecutar una sola sentencia en este caso. Hacer eso mejora la legibilidad.\nConversión Booleana # La sentencia if (…) evalúa la expresión dentro de sus paréntesis y convierte el resultado en booleano.\nEl número 0, un string vacío \u0026quot;\u0026quot;, null, undefined, y NaN se convierte en false. Por esto son llamados valores \u0026ldquo;falso\u0026rdquo;. El resto de los valores se convierten en true, entonces los llamaremos valores \u0026ldquo;verdadero\u0026rdquo;. Entonces, el código bajo esta condición nunca se ejecutaría:\nif (0) { // 0 es falso ... } \u0026hellip;y dentro de esta condición siempre se ejecutará:\nif (1) { // 1 es verdadero ... } La cláusula \u0026ldquo;else\u0026rdquo; # La sentencia if quizás contenga un bloque \u0026ldquo;else\u0026rdquo; opcional. Este se ejecutará cuando la condición sea falsa.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;¡Lo adivinaste, correcto!\u0026#39; ); } else { alert( \u0026#39;¿Cómo puedes estar tan equivocado?\u0026#39; ); // cualquier valor excepto 2015 } Muchas condiciones: \u0026ldquo;else if\u0026rdquo; # Algunas veces, queremos probar variantes de una condición. La clausula else if nos permite hacer esto.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Muy poco...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Muy Tarde\u0026#39; ); } else { alert( \u0026#39;¡Exactamente!\u0026#39; ); } En el código de arriba, JavaScript primero revisa si year \u0026lt; 2015. Si esto es falso, continúa a la siguiente condición year \u0026gt; 2015. Si esta también es falsa, mostrará la última alert.\nPodría haber más bloques else if. Y el último else es opcional.\nEjemplos de Condicionales # En el siguiente video encontrarás mas informción de condicionales e incluso podrás ver el uso de switch, una tipo de condicion que no estaremos usando en el curso pero que es importante que conozcas.\nBucles # Usualmente necesitamos repetir acciones.\nPor ejemplo, mostrar los elementos de una lista uno tras otro o simplemente ejecutar el mismo código para cada número del 1 al 10.\nLos Bucles son una forma de repetir el mismo código varias veces.\nEl bucle \u0026ldquo;while\u0026rdquo; # El bucle while (mientras) tiene la siguiente sintaxis:\nwhile (condition) { // código // llamado \u0026#34;cuerpo del bucle\u0026#34; } Mientras la condición condition sea verdadera, el código del cuerpo del bucle será ejecutado.\nPor ejemplo, el bucle debajo imprime i mientras se cumpla i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // muestra 0, luego 1, luego 2 alert( i ); i++; } Cada ejecución del cuerpo del bucle se llama iteración. El bucle en el ejemplo de arriba realiza 3 iteraciones.\nSi faltara i++ en el ejemplo de arriba, el bucle sería repetido (en teoría) eternamente. En la práctica, el navegador tiene maneras de detener tales bucles desmedidos; y en el JavaScript del lado del servidor, podemos eliminar el proceso.\nCualquier expresión o variable puede usarse como condición del bucle, no solo las comparaciones: El while evaluará y transformará la condición a un booleano.\nPor ejemplo, una manera más corta de escribir while (i != 0) es while (i):\nlet i = 3; while (i) { // cuando i sea 0, la condición se volverá falsa y el bucle se detendrá alert( i ); i--; } El bucle \u0026ldquo;do..while\u0026rdquo; # La comprobación de la condición puede ser movida debajo del cuerpo del bucle usando la sintaxis do..while:\ndo { // cuerpo del bucle } while (condition); El bucle primero ejecuta el cuerpo, luego comprueba la condición, y, mientras sea un valor verdadero, la ejecuta una y otra vez.\nPor ejemplo:\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); Esta sintaxis solo debe ser usada cuando quieres que el cuerpo del bucle sea ejecutado al menos una vez sin importar que la condición sea verdadera. Usualmente, se prefiere la otra forma: while(…) {…}.\nEl bucle \u0026ldquo;for\u0026rdquo; # El bucle for es más complejo, pero también el más usado.\nSe ve así:\nfor (begin; condition; step) { // (comienzo, condición, paso) // ... cuerpo del bucle ... } Aprendamos el significado de cada parte con un ejemplo. El bucle debajo corre alert(i) para i desde 0 hasta (pero no incluyendo) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // muestra 0, luego 1, luego 2 alert(i); } Vamos a examinar la declaración for parte por parte:\nparte comienzo let i = 0 Se ejecuta una vez al comienzo del bucle. condición i \u0026lt; 3 Comprobada antes de cada iteración del bucle. Si es falsa, el bucle finaliza. cuerpo alert(i) Se ejecuta una y otra vez mientras la condición sea verdadera. paso i++ Se ejecuta después del cuerpo en cada iteración. El algoritmo general del bucle funciona de esta forma:\nSe ejecuta comenzar → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → (si condición → ejecutar cuerpo y ejecutar paso) → ... Si eres nuevo en bucles, te podría ayudar regresar al ejemplo y reproducir cómo se ejecuta paso por paso en una pedazo de papel.\nEsto es lo que sucede exactamente en nuestro caso:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // se ejecuta comenzar let i = 0 // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // si condición → ejecutar cuerpo y ejecutar paso if (i \u0026lt; 3) { alert(i); i++ } // ...finaliza, porque ahora i == 3 Declaración de variable en línea Aquí, la variable \"counter\" `i` es declarada en el bucle. Esto es llamado una declaración de variable \"en línea\". Dichas variables son visibles solo dentro del bucle. for (*!*let*/!* i = 0; i \u0026lt; 3; i++) { alert(i); // 0, 1, 2 } alert(i); // error, no existe dicha variable En vez de definir una variable, podemos usar una que ya exista:\nlet i = 0; for (i = 0; i \u0026lt; 3; i++) { // usa una variable existente alert(i); // 0, 1, 2 } alert(i); // 3, visible, porque fue declarada fuera del bucle Omitiendo partes # Cualquier parte de for puede ser omitida.\nPor ejemplo, podemos quitar comienzo si no necesitamos realizar nada al inicio del bucle.\nComo aquí:\nlet i = 0; // Ya tenemos i declarada y asignada for (; i \u0026lt; 3; i++) { // no hay necesidad de \u0026#34;comenzar\u0026#34; alert( i ); // 0, 1, 2 } También podemos eliminar la parte paso:\nlet i = 0; for (; i \u0026lt; 3;) { alert( i++ ); } Esto hace al bucle idéntico a while (i \u0026lt; 3).\nEn realidad podemos eliminar todo, creando un bucle infinito:\nfor (;;) { // se repite sin limites } Por favor, nota que los dos punto y coma ; del for deben estar presentes. De otra manera, habría un error de sintaxis.\nRompiendo el bucle # Normalmente, se sale de un bucle cuando la condición se vuelve falsa.\nPero podemos forzar una salida en cualquier momento usando la directiva especial break.\nPor ejemplo, el bucle debajo le pide al usuario por una serie de números, \u0026ldquo;rompiéndolo\u0026rdquo; cuando un número no es ingresado:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Ingresa un número\u0026#34;, \u0026#39;\u0026#39;); *!* if (!value) break; // (*) */!* sum += value; } alert( \u0026#39;Suma: \u0026#39; + sum ); La directiva break es activada en la línea (*) si el usuario ingresa una línea vacía o cancela la entrada. Detiene inmediatamente el bucle, pasando el control a la primera línea después de el bucle. En este caso, alert.\nLa combinación \u0026ldquo;bucle infinito + break según sea necesario\u0026rdquo; es ideal en situaciones donde la condición del bucle debe ser comprobada no al inicio o al final de el bucle, sino a la mitad o incluso en varias partes del cuerpo.\nContinuar a la siguiente iteración # La directiva continue es una \u0026ldquo;versión más ligera\u0026rdquo; de break. No detiene el bucle completo. En su lugar, detiene la iteración actual y fuerza al bucle a comenzar una nueva (si la condición lo permite).\nPodemos usarlo si hemos terminado con la iteración actual y nos gustaría movernos a la siguiente.\nEl bucle debajo usa continue para mostrar solo valores impares:\nfor (let i = 0; i \u0026lt; 10; i++) { // si es verdadero, saltar el resto del cuerpo *!*if (i % 2 == 0) continue;*/!* alert(i); // 1, luego 3, 5, 7, 9 } Para los valores pares de i, la directiva continue deja de ejecutar el cuerpo y pasa el control a la siguiente iteración de for (con el siguiente número). Así que el alert solo es llamado para valores impares.\nLa directiva `continue` ayuda a disminuir la anidación Un bucle que muestra valores impares podría verse así: for (let i = 0; i \u0026lt; 10; i++) { if (i % 2) { alert( i ); } } Desde un punto de vista técnico, esto es idéntico al ejemplo de arriba. Claro, podemos simplemente envolver el código en un bloque if en vez de usar continue.\nPero como efecto secundario, esto crearía un nivel más de anidación (la llamada a alert dentro de las llaves). Si el código dentro de if posee varias líneas, eso podría reducir la legibilidad en general. Más sobre bucles # En el siguiente video vamos a ver algunos ejemplos de como aplicar los bucles que hemos mencionado:\n","date":"24 enero 2023","permalink":"/platform/levels/level1_2023/dia3/if_bucles/","section":"Levels","summary":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.","title":"Condicionales y Bucles"},{"content":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.\nPara esto podemos usar la sentencia if y el operador condicional ?, también llamado operador de “signo de interrogación”.\nLa sentencia \u0026ldquo;if\u0026rdquo; # La sentencia if(...) evalúa la condición en los paréntesis, y si el resultado es true ejecuta un bloque de código.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En que año fué publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) alert( \u0026#39;¡Estás en lo cierto!\u0026#39; ); Aquí la condición es una simple igualdad (year == 2015), pero podría ser mucho mas complejo.\nSi quisiéramos ejecutar más de una sentencia, debemos encerrar nuestro bloque de código entre llaves:\nif (year == 2015) { alert( \u0026#34;¡Es Correcto!\u0026#34; ); alert( \u0026#34;¡Eres muy inteligente!\u0026#34; ); } Recomendamos siempre encerrar nuestro bloque de código entre llaves {} siempre que se utilice la sentencia if, inclusive si solo se va a ejecutar una sola sentencia en este caso. Hacer eso mejora la legibilidad.\nConversión Booleana # La sentencia if (…) evalúa la expresión dentro de sus paréntesis y convierte el resultado en booleano.\nEl número 0, un string vacío \u0026quot;\u0026quot;, null, undefined, y NaN se convierte en false. Por esto son llamados valores \u0026ldquo;falso\u0026rdquo;. El resto de los valores se convierten en true, entonces los llamaremos valores \u0026ldquo;verdadero\u0026rdquo;. Entonces, el código bajo esta condición nunca se ejecutaría:\nif (0) { // 0 es falso ... } \u0026hellip;y dentro de esta condición siempre se ejecutará:\nif (1) { // 1 es verdadero ... } La cláusula \u0026ldquo;else\u0026rdquo; # La sentencia if quizás contenga un bloque \u0026ldquo;else\u0026rdquo; opcional. Este se ejecutará cuando la condición sea falsa.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;¡Lo adivinaste, correcto!\u0026#39; ); } else { alert( \u0026#39;¿Cómo puedes estar tan equivocado?\u0026#39; ); // cualquier valor excepto 2015 } Muchas condiciones: \u0026ldquo;else if\u0026rdquo; # Algunas veces, queremos probar variantes de una condición. La clausula else if nos permite hacer esto.\nPor ejemplo:\nlet year = prompt(\u0026#39;¿En qué año fue publicada la especificación ECMAScript-2015?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Muy poco...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Muy Tarde\u0026#39; ); } else { alert( \u0026#39;¡Exactamente!\u0026#39; ); } En el código de arriba, JavaScript primero revisa si year \u0026lt; 2015. Si esto es falso, continúa a la siguiente condición year \u0026gt; 2015. Si esta también es falsa, mostrará la última alert.\nPodría haber más bloques else if. Y el último else es opcional.\nEjemplos de Condicionales # En el siguiente video encontrarás mas informción de condicionales e incluso podrás ver el uso de switch, una tipo de condicion que no estaremos usando en el curso pero que es importante que conozcas.\n","date":"24 enero 2023","permalink":"/platform/jsvanilla/condicionales/","section":"Jsvanillas","summary":"Algunas veces, necesitamos ejecutar diferentes acciones basadas en diferentes condiciones.","title":"Estructura de Control: Condicionales"},{"content":" Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.\n¿Qué es JavaScript? # JavaScript fue creado para “dar vida a las páginas web”.\nLos programas en este lenguaje se llaman scripts. Se pueden escribir directamente en el HTML de una página web y ejecutarse automáticamente a medida que se carga la página.\nLos scripts se proporcionan y ejecutan como texto plano. No necesitan preparación especial o compilación para correr.\nEn este aspecto, JavaScript es muy diferente a otro lenguaje llamado Java.\n¿Por qué se llama JavaScript? Cuando JavaScript fue creado, inicialmente tenía otro nombre: “LiveScript”. Pero Java era muy popular en ese momento, así que se decidió que el posicionamiento de un nuevo lenguaje como un “Hermano menor” de Java ayudaría. Pero a medida que evolucionaba, JavaScript se convirtió en un lenguaje completamente independiente con su propia especificación llamada ECMAScript, y ahora no tiene ninguna relación con Java. Hoy, JavaScript puede ejecutarse no solo en los navegadores, sino también en servidores o incluso en cualquier dispositivo que cuente con un programa especial llamado El motor o intérprete de JavaScript.\nDiferentes motores tienen diferentes “nombres en clave”. Por ejemplo:\nV8 – en Chrome, Opera y Edge. SpiderMonkey – en Firefox. …Existen otros nombres en clave como “Chakra” para IE , “JavaScriptCore”, “Nitro” y “SquirrelFish” para Safari, etc. Es bueno recordar estos términos porque son usados en artículos para desarrolladores en internet. Por ejemplo, si “la característica X es soportada por V8”, entonces probablemente funciona en Chrome, Opera y Edge.\n¿Como trabajan los motores? Los motores son complicados, pero los fundamentos son fáciles. El motor (embebido si es un navegador) lee (“analiza”) el script. Luego convierte (“compila”) el script a lenguaje de máquina. Por último, el código máquina se ejecuta, muy rápido. El motor aplica optimizaciones en cada paso del proceso. Incluso observa como el script compilado se ejecuta, analiza los datos que fluyen a través de él y aplica optimizaciones al código maquina basadas en ese conocimiento. Tipos de datos # Un valor en JavaScript siempre pertenece a un tipo de dato determinado. Por ejemplo, un string o un número.\nHay ocho tipos de datos básicos en JavaScript. En esta semana cubriremos la mayoría en general y posteriormente hablaremos de cada uno de ellos en detalle.\nPodemos almacenar un valor de cualquier tipo dentro de una variable. Por ejemplo, una variable puede contener en un momento un string y luego almacenar un número\n// no hay error let message = \u0026#34;hola\u0026#34;; message = 123456; Los lenguajes de programación que permiten estas cosas, como JavaScript, se denominan “dinámicamente tipados”, lo que significa que allí hay tipos de datos, pero las variables no están vinculadas rígidamente a ninguno de ellos.\nNumber # let n = 123; n = 12.345; El tipo number representa tanto números enteros como de punto flotante.\nHay muchas operaciones para números. Por ejemplo, multiplicación *, división /, suma +, resta -, y demás.\nString # Un string en JavaScript es una cadena de caracteres y debe colocarse entre comillas.\nlet str = \u0026#34;Hola\u0026#34;; let str2 = \u0026#39;Las comillas simples también están bien\u0026#39;; let phrase = `se puede incrustar otro ${str}`; En JavaScript, hay 3 tipos de comillas.\nComillas dobles: \u0026quot;Hola\u0026quot; . Comillas simples: 'Hola' . Backticks (comillas invertidas): `Hola` . Las comillas dobles y simples son comillas “sencillas” (es decir, funcionan igual). No hay diferencia entre ellas en JavaScript.\nLos backticks son comillas de “funcionalidad extendida”. Nos permiten incrustar variables y expresiones en una cadena de caracteres encerrándolas en ${...}, por ejemplo:\nlet name = \u0026#34;John\u0026#34;; // incrustar una variable alert( `Hola, ${name}!` ); // Hola, John! // incrustar una expresión alert( `el resultado es ${1 + 2}` ); // el resultado es 3 La expresión dentro de ${...} se evalúa y el resultado pasa a formar parte de la cadena. Podemos poner cualquier cosa ahí dentro: una variable como name, una expresión aritmética como 1 + 2, o algo más complejo.\nToma en cuenta que esto sólo se puede hacer con los backticks. ¡Las otras comillas no tienen esta capacidad de incrustación!\nalert( \u0026#34;el resultado es ${1 + 2}\u0026#34; ); // el resultado es ${1 + 2} // (las comillas dobles no hacen nada) Boolean (tipo lógico) # El tipo boolean tiene sólo dos valores posibles: true y false.\nEste tipo se utiliza comúnmente para almacenar valores de sí/no: true significa “sí, correcto, verdadero”, y false significa “no, incorrecto, falso”.\nPor ejemplo:\nlet nameFieldChecked = true; // sí, el campo name está marcado let ageFieldChecked = false; // no, el campo age no está marcado Los valores booleanos también son el resultado de comparaciones:\nlet isGreater = 4 \u0026gt; 1; alert( isGreater ); // verdadero (el resultado de la comparación es \u0026#34;sí\u0026#34;) Object # El tipo object (objeto) es especial.\nTodos los demás tipos se llaman “primitivos” porque sus valores pueden contener una sola cosa (ya sea una cadena, un número o lo que sea). Por el contrario, los objetos se utilizan para almacenar colecciones de datos y entidades más complejas.\nSiendo así de importantes, los objetos merecen un trato especial. Nos ocuparemos de ellos más adelante después de aprender más sobre los primitivos.\nEl operador typeof # El operador typeof devuelve el tipo de dato del operando. Es útil cuando queremos procesar valores de diferentes tipos de forma diferente o simplemente queremos hacer una comprobación rápida.\nLa llamada a typeof x devuelve un string con el nombre del tipo:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert // \u0026#34;function\u0026#34; (3) Operadores Básicos # Conocemos varios operadores matemáticos porque nos los enseñaron en la escuela. Son cosas como la suma +, multiplicación *, resta -, etcétera.\nTérminos: “unario”, “binario”, “operando” # Antes de continuar, comprendamos la terminología común.\nUn operando – es a lo que se aplican los operadores. Por ejemplo, en la multiplicación de 5 * 2 hay dos operandos: el operando izquierdo es 5 y el operando derecho es 2. A veces, la gente los llama “argumentos” en lugar de “operandos”.\nUn operador es unario si tiene un solo operando. Por ejemplo, la negación unaria - invierte el signo de un número:\nlet x = 1; x = -x; alert( x ); // -1, se aplicó negación unaria Un operador es binario si tiene dos operandos. El mismo negativo también existe en forma binaria:\nlet x = 1, y = 3; alert( y - x ); // 2, binario negativo resta valores Formalmente, estamos hablando de dos operadores distintos: la negación unaria (un operando: revierte el símbolo) y la resta binaria (dos operandos: resta).\nMatemáticas # Están soportadas las siguientes operaciones:\nSuma +, Resta -, Multiplicación *, División /, Resto %, Exponenciación **. Los primeros cuatro son conocidos mientras que % y ** deben ser explicados más ampliamente.\nResto % # El operador resto %, a pesar de su apariencia, no está relacionado con porcentajes.\nEl resultado de a % b es el resto de la división entera de a por b.\nPor ejemplo:\nalert( 5 % 2 ); // 1, es el resto de 5 dividido por 2 alert( 8 % 3 ); // 2, es el resto de 8 dividido por 3 alert( 8 % 4 ); // 0, es el resto de 8 dividido por 4 Exponenciación ** # El operador exponenciación a ** b eleva a a la potencia de b.\nEn matemáticas de la escuela, lo escribimos como ab.\nPor ejemplo:\nalert( 2 ** 2 ); // 2² = 4 alert( 2 ** 3 ); // 2³ = 8 alert( 2 ** 4 ); // 2⁴ = 16 Matemáticamente, la exponenciación está definida para operadores no enteros también.\nPor ejemplo, la raíz cuadrada es el exponente ½:\nalert( 4 ** (1/2) ); // 2 (potencia de 1/2 es lo mismo que raíz cuadrada) alert( 8 ** (1/3) ); // 2 (potencia de 1/3 es lo mismo que raíz cúbica) Concatenación de cadenas con el binario + # Ahora veamos las características de los operadores de JavaScript que van más allá de la aritmética escolar.\nNormalmente el operador + suma números.\nPero si se aplica el + binario a una cadena, los une (concatena):\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; alert(s); // mystring Tenga presente que si uno de los operandos es una cadena, el otro es convertido a una cadena también.\nPor ejemplo:\nalert( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; alert( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; Vieron, no importa si el primer operando es una cadena o el segundo.\nAquí hay un ejemplo algo más complejo:\nalert(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; y no \u0026#34;221\u0026#34; Aquí, los operadores trabajan uno después de otro. El primer + suma dos números entonces devuelve 4, luego el siguiente + le agrega la cadena 1, así que se evalúa como 4 + '1' = 41.\nalert(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34;, no es \u0026#34;14\u0026#34; Aquí el primer operando es una cadena, el compilador trata los otros dos operandos como cadenas también. El 2 es concatenado a '1', entonces es como '1' + 2 = \u0026quot;12\u0026quot; y \u0026quot;12\u0026quot; + 2 = \u0026quot;122\u0026quot;.\nEl binario + es el único operador que soporta cadenas en esa forma. Otros operadores matemáticos trabajan solamente con números y siempre convierten sus operandos a números.\nPor ejemplo, resta y división:\nalert( 2 - \u0026#39;1\u0026#39; ); // 1 alert( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3 Operadores Lógicos # Hay cuatro operadores lógicos en JavaScript: || (O), \u0026amp;\u0026amp; (Y), ! (NO), ?? (Fusión de nulos). Aquí cubrimos los primeros tres, el operador ?? se verá más adelante.\nAunque sean llamados lógicos, pueden ser aplicados a valores de cualquier tipo, no solo booleanos. El resultado también puede ser de cualquier tipo.\nVeamos los detalles.\n|| (OR) # El operador OR se representa con dos símbolos de linea vertical:\nresult = a || b; En la programación clásica, el OR lógico esta pensado para manipular solo valores booleanos. Si cualquiera de sus argumentos es true, retorna true, de lo contrario retorna false.\nEn JavaScript, el operador es un poco más complicado y poderoso. Pero primero, veamos qué pasa con los valores booleanos.\nHay cuatro combinaciones lógicas posibles:\nalert(true || true); // true (verdadero) alert(false || true); // true alert(true || false); // true alert(false || false); // false (falso) Como podemos ver, el resultado es siempre true excepto cuando ambos operandos son false.\nSi un operando no es un booleano, se lo convierte a booleano para la evaluación.\nPor ejemplo, el número 1 es tratado como true, el número 0 como false:\nif (1 || 0) { // Funciona como if( true || false ) alert(\u0026#34;valor verdadero!\u0026#34;); } La mayoría de las veces, OR || es usado en una declaración if para probar si alguna de las condiciones dadas es true.\nPor ejemplo:\nlet hour = 9; *!* if (hour \u0026lt; 10 || hour \u0026gt; 18) { */!* alert( \u0026#39;La oficina esta cerrada.\u0026#39; ); } Podemos pasar mas condiciones:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert(\u0026#34;La oficina esta cerrada.\u0026#34;); // Es fin de semana } \u0026amp;\u0026amp; (AND) # El operador AND es representado con dos ampersands \u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; En la programación clásica, AND retorna true si ambos operandos son valores verdaderos y false en cualquier otro caso.\nalert(true \u0026amp;\u0026amp; true); // true alert(false \u0026amp;\u0026amp; true); // false alert(true \u0026amp;\u0026amp; false); // false alert(false \u0026amp;\u0026amp; false); // false Un ejemplo con if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert(\u0026#34;La hora es 12:30\u0026#34;); } Al igual que con OR, cualquier valor es permitido como operando de AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluado como true \u0026amp;\u0026amp; false alert( \u0026#34;no funcionará porque el resultado es un valor falso\u0026#34; ); } Más operadores en JS # Para seguir aprendiendo de estos operadores, mira el siguiente video donde reforzarás el conocimiento sobre los operadores que acabamos de ver y aprenderás algunos más que son comuness:\n","date":"23 enero 2023","permalink":"/platform/jsvanilla/introjs/","section":"Jsvanillas","summary":"Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.","title":"Introducción a JavaScript"},{"content":" Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.\n¿Qué es JavaScript? # JavaScript fue creado para “dar vida a las páginas web”.\nLos programas en este lenguaje se llaman scripts. Se pueden escribir directamente en el HTML de una página web y ejecutarse automáticamente a medida que se carga la página.\nLos scripts se proporcionan y ejecutan como texto plano. No necesitan preparación especial o compilación para correr.\nEn este aspecto, JavaScript es muy diferente a otro lenguaje llamado Java.\n¿Por qué se llama JavaScript? Cuando JavaScript fue creado, inicialmente tenía otro nombre: “LiveScript”. Pero Java era muy popular en ese momento, así que se decidió que el posicionamiento de un nuevo lenguaje como un “Hermano menor” de Java ayudaría. Pero a medida que evolucionaba, JavaScript se convirtió en un lenguaje completamente independiente con su propia especificación llamada ECMAScript, y ahora no tiene ninguna relación con Java. Hoy, JavaScript puede ejecutarse no solo en los navegadores, sino también en servidores o incluso en cualquier dispositivo que cuente con un programa especial llamado El motor o intérprete de JavaScript.\nDiferentes motores tienen diferentes “nombres en clave”. Por ejemplo:\nV8 – en Chrome, Opera y Edge. SpiderMonkey – en Firefox. …Existen otros nombres en clave como “Chakra” para IE , “JavaScriptCore”, “Nitro” y “SquirrelFish” para Safari, etc. Es bueno recordar estos términos porque son usados en artículos para desarrolladores en internet. Por ejemplo, si “la característica X es soportada por V8”, entonces probablemente funciona en Chrome, Opera y Edge.\n¿Como trabajan los motores? Los motores son complicados, pero los fundamentos son fáciles. El motor (embebido si es un navegador) lee (“analiza”) el script. Luego convierte (“compila”) el script a lenguaje de máquina. Por último, el código máquina se ejecuta, muy rápido. El motor aplica optimizaciones en cada paso del proceso. Incluso observa como el script compilado se ejecuta, analiza los datos que fluyen a través de él y aplica optimizaciones al código maquina basadas en ese conocimiento. Tipos de datos # Un valor en JavaScript siempre pertenece a un tipo de dato determinado. Por ejemplo, un string o un número.\nHay ocho tipos de datos básicos en JavaScript. En esta semana cubriremos la mayoría en general y posteriormente hablaremos de cada uno de ellos en detalle.\nPodemos almacenar un valor de cualquier tipo dentro de una variable. Por ejemplo, una variable puede contener en un momento un string y luego almacenar un número\n// no hay error let message = \u0026#34;hola\u0026#34;; message = 123456; Los lenguajes de programación que permiten estas cosas, como JavaScript, se denominan “dinámicamente tipados”, lo que significa que allí hay tipos de datos, pero las variables no están vinculadas rígidamente a ninguno de ellos.\nNumber # let n = 123; n = 12.345; El tipo number representa tanto números enteros como de punto flotante.\nHay muchas operaciones para números. Por ejemplo, multiplicación *, división /, suma +, resta -, y demás.\nString # Un string en JavaScript es una cadena de caracteres y debe colocarse entre comillas.\nlet str = \u0026#34;Hola\u0026#34;; let str2 = \u0026#39;Las comillas simples también están bien\u0026#39;; let phrase = `se puede incrustar otro ${str}`; En JavaScript, hay 3 tipos de comillas.\nComillas dobles: \u0026quot;Hola\u0026quot; . Comillas simples: 'Hola' . Backticks (comillas invertidas): `Hola` . Las comillas dobles y simples son comillas “sencillas” (es decir, funcionan igual). No hay diferencia entre ellas en JavaScript.\nLos backticks son comillas de “funcionalidad extendida”. Nos permiten incrustar variables y expresiones en una cadena de caracteres encerrándolas en ${...}, por ejemplo:\nlet name = \u0026#34;John\u0026#34;; // incrustar una variable alert( `Hola, *!*${name}*/!*!` ); // Hola, John! // incrustar una expresión alert( `el resultado es *!*${1 + 2}*/!*` ); // el resultado es 3 La expresión dentro de ${...} se evalúa y el resultado pasa a formar parte de la cadena. Podemos poner cualquier cosa ahí dentro: una variable como name, una expresión aritmética como 1 + 2, o algo más complejo.\nToma en cuenta que esto sólo se puede hacer con los backticks. ¡Las otras comillas no tienen esta capacidad de incrustación!\nalert( \u0026#34;el resultado es ${1 + 2}\u0026#34; ); // el resultado es ${1 + 2} // (las comillas dobles no hacen nada) Boolean (tipo lógico) # El tipo boolean tiene sólo dos valores posibles: true y false.\nEste tipo se utiliza comúnmente para almacenar valores de sí/no: true significa “sí, correcto, verdadero”, y false significa “no, incorrecto, falso”.\nPor ejemplo:\nlet nameFieldChecked = true; // sí, el campo name está marcado let ageFieldChecked = false; // no, el campo age no está marcado Los valores booleanos también son el resultado de comparaciones:\nlet isGreater = 4 \u0026gt; 1; alert( isGreater ); // verdadero (el resultado de la comparación es \u0026#34;sí\u0026#34;) Object # El tipo object (objeto) es especial.\nTodos los demás tipos se llaman “primitivos” porque sus valores pueden contener una sola cosa (ya sea una cadena, un número o lo que sea). Por el contrario, los objetos se utilizan para almacenar colecciones de datos y entidades más complejas.\nSiendo así de importantes, los objetos merecen un trato especial. Nos ocuparemos de ellos más adelante después de aprender más sobre los primitivos.\nEl operador typeof # El operador typeof devuelve el tipo de dato del operando. Es útil cuando queremos procesar valores de diferentes tipos de forma diferente o simplemente queremos hacer una comprobación rápida.\nLa llamada a typeof x devuelve un string con el nombre del tipo:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert // \u0026#34;function\u0026#34; (3) Operadores Básicos # Conocemos varios operadores matemáticos porque nos los enseñaron en la escuela. Son cosas como la suma +, multiplicación *, resta -, etcétera.\nTérminos: “unario”, “binario”, “operando” # Antes de continuar, comprendamos la terminología común.\nUn operando – es a lo que se aplican los operadores. Por ejemplo, en la multiplicación de 5 * 2 hay dos operandos: el operando izquierdo es 5 y el operando derecho es 2. A veces, la gente los llama “argumentos” en lugar de “operandos”.\nUn operador es unario si tiene un solo operando. Por ejemplo, la negación unaria - invierte el signo de un número:\nlet x = 1; x = -x; alert( x ); // -1, se aplicó negación unaria Un operador es binario si tiene dos operandos. El mismo negativo también existe en forma binaria:\nlet x = 1, y = 3; alert( y - x ); // 2, binario negativo resta valores Formalmente, estamos hablando de dos operadores distintos: la negación unaria (un operando: revierte el símbolo) y la resta binaria (dos operandos: resta).\nMatemáticas # Están soportadas las siguientes operaciones:\nSuma +, Resta -, Multiplicación *, División /, Resto %, Exponenciación **. Los primeros cuatro son conocidos mientras que % y ** deben ser explicados más ampliamente.\nResto % # El operador resto %, a pesar de su apariencia, no está relacionado con porcentajes.\nEl resultado de a % b es el resto de la división entera de a por b.\nPor ejemplo:\nalert( 5 % 2 ); // 1, es el resto de 5 dividido por 2 alert( 8 % 3 ); // 2, es el resto de 8 dividido por 3 alert( 8 % 4 ); // 0, es el resto de 8 dividido por 4 Exponenciación ** # El operador exponenciación a ** b eleva a a la potencia de b.\nEn matemáticas de la escuela, lo escribimos como ab.\nPor ejemplo:\nalert( 2 ** 2 ); // 2² = 4 alert( 2 ** 3 ); // 2³ = 8 alert( 2 ** 4 ); // 2⁴ = 16 Matemáticamente, la exponenciación está definida para operadores no enteros también.\nPor ejemplo, la raíz cuadrada es el exponente ½:\nalert( 4 ** (1/2) ); // 2 (potencia de 1/2 es lo mismo que raíz cuadrada) alert( 8 ** (1/3) ); // 2 (potencia de 1/3 es lo mismo que raíz cúbica) Concatenación de cadenas con el binario + # Ahora veamos las características de los operadores de JavaScript que van más allá de la aritmética escolar.\nNormalmente el operador + suma números.\nPero si se aplica el + binario a una cadena, los une (concatena):\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; alert(s); // mystring Tenga presente que si uno de los operandos es una cadena, el otro es convertido a una cadena también.\nPor ejemplo:\nalert( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; alert( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; Vieron, no importa si el primer operando es una cadena o el segundo.\nAquí hay un ejemplo algo más complejo:\nalert(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; y no \u0026#34;221\u0026#34; Aquí, los operadores trabajan uno después de otro. El primer + suma dos números entonces devuelve 4, luego el siguiente + le agrega la cadena 1, así que se evalúa como 4 + '1' = 41.\nalert(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34;, no es \u0026#34;14\u0026#34; Aquí el primer operando es una cadena, el compilador trata los otros dos operandos como cadenas también. El 2 es concatenado a '1', entonces es como '1' + 2 = \u0026quot;12\u0026quot; y \u0026quot;12\u0026quot; + 2 = \u0026quot;122\u0026quot;.\nEl binario + es el único operador que soporta cadenas en esa forma. Otros operadores matemáticos trabajan solamente con números y siempre convierten sus operandos a números.\nPor ejemplo, resta y división:\nalert( 2 - \u0026#39;1\u0026#39; ); // 1 alert( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3 Operadores Lógicos # Hay cuatro operadores lógicos en JavaScript: || (O), \u0026amp;\u0026amp; (Y), ! (NO), ?? (Fusión de nulos). Aquí cubrimos los primeros tres, el operador ?? se verá más adelante.\nAunque sean llamados lógicos, pueden ser aplicados a valores de cualquier tipo, no solo booleanos. El resultado también puede ser de cualquier tipo.\nVeamos los detalles.\n|| (OR) # El operador OR se representa con dos símbolos de linea vertical:\nresult = a || b; En la programación clásica, el OR lógico esta pensado para manipular solo valores booleanos. Si cualquiera de sus argumentos es true, retorna true, de lo contrario retorna false.\nEn JavaScript, el operador es un poco más complicado y poderoso. Pero primero, veamos qué pasa con los valores booleanos.\nHay cuatro combinaciones lógicas posibles:\nalert(true || true); // true (verdadero) alert(false || true); // true alert(true || false); // true alert(false || false); // false (falso) Como podemos ver, el resultado es siempre true excepto cuando ambos operandos son false.\nSi un operando no es un booleano, se lo convierte a booleano para la evaluación.\nPor ejemplo, el número 1 es tratado como true, el número 0 como false:\nif (1 || 0) { // Funciona como if( true || false ) alert(\u0026#34;valor verdadero!\u0026#34;); } La mayoría de las veces, OR || es usado en una declaración if para probar si alguna de las condiciones dadas es true.\nPor ejemplo:\nlet hour = 9; *!* if (hour \u0026lt; 10 || hour \u0026gt; 18) { */!* alert( \u0026#39;La oficina esta cerrada.\u0026#39; ); } Podemos pasar mas condiciones:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert(\u0026#34;La oficina esta cerrada.\u0026#34;); // Es fin de semana } \u0026amp;\u0026amp; (AND) # El operador AND es representado con dos ampersands \u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; En la programación clásica, AND retorna true si ambos operandos son valores verdaderos y false en cualquier otro caso.\nalert(true \u0026amp;\u0026amp; true); // true alert(false \u0026amp;\u0026amp; true); // false alert(true \u0026amp;\u0026amp; false); // false alert(false \u0026amp;\u0026amp; false); // false Un ejemplo con if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert(\u0026#34;La hora es 12:30\u0026#34;); } Al igual que con OR, cualquier valor es permitido como operando de AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluado como true \u0026amp;\u0026amp; false alert( \u0026#34;no funcionará porque el resultado es un valor falso\u0026#34; ); } Más operadores en JS # Para seguir aprendiendo de estos operadores, mira el siguiente video donde reforzarás el conocimiento sobre los operadores que acabamos de ver y aprenderás algunos más que son comuness:\n","date":"23 enero 2023","permalink":"/platform/levels/level1_2023/dia2/introjs/","section":"Levels","summary":"Una introducción a JavaScript # Veamos qué tiene de especial JavaScript, qué podemos lograr con este lenguaje y qué otras tecnologías se integran bien con él.","title":"JavaScript"},{"content":"Que es CSS? # Como HTML, CSS (Cascading Style Sheets) u Hojas de estilo en cascada en español, no es realmente un lenguaje de programación, tampoco es un lenguaje de marcado. Es un lenguaje de hojas de estilo, es decir, te permite aplicar estilos de manera selectiva a elementos en documentos HTML. Por ejemplo, para seleccionar todos los elementos de párrafo en una página HTML y volver el texto dentro de ellos de color rojo, has de escribir este CSS:\nCSS nos ayuda a generar un gran cambio en nuestras páginas web y su sintáxis es distintia a HTML.\nSintáxis # El selector nos ayuda a identificar a que elemento(s) se le aplicarán los estilos. El bloque de declaración es donde se escriben los estilos, tener en cuenta que se inicia y culmina con llaves {}. La declaración es donde ajustamos una cosa de el/los elemento(s), se compone por la propiedad que representa lo que vamos a ajustar y el valor que representa como lo vamos a cambiar (Cambiaremos los elementos p, le cambiaremos el color a rojo).\nDonde escribir CSS # Hay 3 lugares o formas de escribir CSS: inline, internal y external (en línea, interno y externo).\nInline # dentro de las etiquetas de apertura HTML podemos añadir el atributo style y como parte de su valor, podemos indicar las declaraciones CSS separadas por ;\nInternal # dentro de la \u0026lt;head\u0026gt; podemos insertar la etiqueta \u0026lt;style\u0026gt; donde podremos ingresar nuestro codigo css. Esto trae la ventaja de usar los selectores a diferencia de los estilos inline, que se aplican a cada elemento.\nExternal # External hace referencia a escribir CSS en un archivo aparte donde solo irá este código. la forma de escribir aquí sigue siendo en bloque sin la necesidad de una etiqueta \u0026lt;style\u0026gt;, aunque necesitamos enlazar el archivo HTML con este, por medio de una etiqueta link dentro del head similar a esta:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./css/main.css\u0026#34;\u0026gt; Selectores CSS # Un selector nos permite asociar una o más declaraciones a uno o más elementos de la página.\nSelectores Básicos # Podemos apuntar a ese elemento usando este selector p, que apunta a todos los elementos que usan la etiqueta p en la página. Una regla CSS simple para lograr lo que queremos es:\nCada etiqueta HTML tiene un selector correspondiente, por ejemplo: div, span, img.\nSi un selector coincide con varios elementos, todos los elementos de la página se verán afectados por el cambio.\nLos elementos HTML tienen 2 atributos que se utilizan con mucha frecuencia en CSS para asociar el estilo a un elemento específico de la página: class y id.\nHay una gran diferencia entre esos dos: dentro de un documento HTML puede repetir el mismo valor class en varios elementos, pero solo puede usar id una vez. Asimismo, usando clases puedes seleccionar un elemento con 2 o más nombres de clase específicos, algo que no es posible usando ids.\nLas clases se identifican mediante el símbolo \u0026lsquo;.\u0026rsquo; , mientras que los identificadores utilizan el símbolo \u0026lsquo;#\u0026rsquo; (numeral, hash tag).\nEjemplo usando una clase:\n\u0026lt;!-- HTML --\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;!--Usamos el atributo class --\u0026gt; /* CSS */ .dog-name { color: yellow; } Ejemplo usando un ID:\n\u0026lt;!-- HTML --\u0026gt; \u0026lt;p id=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;!--Usamos el atributo id --\u0026gt; /* CSS */ #dog-name { color: yellow; } Complejidad de Selectores Lo que viene a continuación son conceptos más complejos de CSS, pero no es necesario que los entiendas para comenzar a usar CSS. Sin embargo, te aconsejo que le des un vistazo para que veas hasta donde puede llegar el uso de los selectores. Combinando Selectores # Hasta ahora hemos visto cómo apuntar a un elemento, una clase o una identificación. Introduzcamos selectores más potentes.\nSeleccionar Elemento con clase o ID # Puede apuntar a un elemento específico que tenga una clase o una identificación adjunta.\nEjemplo usando una clase:\n\u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Mauricio\u0026lt;/p\u0026gt; p.dog-name { /* Solo seleccionamos el elemento p que tiene la clase dog-name */ color: yellow; } ¿Por qué querría hacer eso, si la clase o la identificación ya proporciona una forma de apuntar a ese elemento? Puede que tengas que hacer eso para tener más especificidad. Veremos qué significa eso más tarde.\nApuntando a múltiples clases # Puedes apuntar a un elemento con una clase específica usando .class-name, como vio anteriormente. Puedes apuntar a un elemento con 2 (o más) clases combinando los nombres de clase separados por un punto, sin espacios.\nEjemplo:\n\u0026lt;p class=\u0026#34;dog-name roger\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34;\u0026gt;Mauricio\u0026lt;/p\u0026gt; .dog-name.roger { /* Solo seleccionamos el elemento que tiene la clase dog-name y la clase roger */ color: yellow; } Combinando clases e id\u0026rsquo;s # De la misma manera, puede combinar una clase y una identificación.\nEjemplo:\n\u0026lt;p class=\u0026#34;dog-name\u0026#34; id=\u0026#34;roger\u0026#34;\u0026gt;Roger\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dog-name\u0026#34; id=\u0026#34;mauricio\u0026#34;\u0026gt;Mauricio\u0026lt;/p\u0026gt; .dog-name#roger { /* Seleccionamos el elemento que tiene la clase dog-name y el id roger */ color: yellow; } Especificidad # Lo que acabamos de ver tiene un propósito importante y esto es para que evitemos aplicar estilos a elementos que no deseamos, a medida que nuestra página crezca, comenzaremos a usar estas combinaciones para tener un mejor orden en los estilos que aplicamos. Sin embargo al aplicar estos selectores, la forma en la que se aplica los estilos puede romper el orden en cascada que conocemos por un concepto llamado especificidad.\nPara entender ese concepto mira el siguiente video donde entendemos que es la especificidad y como afecta los estilos que aplicamos a los elementos.\nAquí te dejo una tabla donde podrás ver la especificidad entre elementos y selectores:\nMás Selectores # Hay muchas más formas de combinar los selectores, aquí tienes una lista con más selectores, puedes apoyarte en el traductor de google para entender algunos terminos que vienen en ingles en las siguientes imágenes:\n","date":"23 enero 2023","permalink":"/platform/levels/level1_2023/dia2/estiloscss/","section":"Levels","summary":"Que es CSS?","title":"Estilos base de CSS y Selectores"},{"content":"Estamos trabajando para añadir información en esta seccion 😀\n","date":"19 enero 2023","permalink":"/platform/tags/","section":"Tags","summary":"Estamos trabajando para añadir información en esta seccion 😀","title":"Tags"},{"content":"Estamos trabajando para añadir información en esta seccion 😀\n","date":"19 enero 2023","permalink":"/platform/categories/","section":"Categories","summary":"Estamos trabajando para añadir información en esta seccion 😀","title":"Categories"},{"content":"DDL # lenguaje de definición de datos (DDL) de MySQL. El DDL se utiliza para crear, modificar y eliminar estructuras de base de datos, como tablas, índices y restricciones. A continuación, te mostraré los comandos más comunes en MySQL DDL.\nCrear una base de datos: CREATE DATABASE nombre_base_de_datos; Seleccionar una base de datos: USE nombre_base_de_datos; Crear una tabla: CREATE TABLE nombre_tabla ( columna1 tipo_dato_restricciones, columna2 tipo_dato_restricciones, ... ); Por ejemplo:\nCREATE TABLE usuarios ( id INT PRIMARY KEY, nombre VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, fecha_nacimiento DATE ); Modificar una tabla (agregar columna): ALTER TABLE nombre_tabla ADD COLUMN nombre_columna tipo_dato_restricciones; Por ejemplo:\nALTER TABLE usuarios ADD COLUMN telefono VARCHAR(20); Modificar una tabla (modificar columna): ALTER TABLE nombre_tabla MODIFY COLUMN nombre_columna tipo_dato_restricciones; Por ejemplo:\nALTER TABLE usuarios MODIFY COLUMN email VARCHAR(150); Modificar una tabla (eliminar columna): ALTER TABLE nombre_tabla DROP COLUMN nombre_columna; Por ejemplo:\nALTER TABLE usuarios DROP COLUMN telefono; Eliminar una tabla: DROP TABLE nombre_tabla; Por ejemplo:\nDROP TABLE usuarios; PRIMARY KEY # En una base de datos relacional, una clave primaria se utiliza para identificar de manera única cada fila de una tabla. Esto asegura que no haya duplicados y permite un acceso rápido y eficiente a los datos. En MySQL, puedes definir una clave primaria al crear una tabla o agregarla más tarde mediante la modificación de la estructura de la tabla.\nAquí tienes dos formas de definir una clave primaria en MySQL:\nDefinir una clave primaria durante la creación de la tabla: CREATE TABLE nombre_tabla ( columna1 tipo_dato_restricciones, columna2 tipo_dato_restricciones, ... PRIMARY KEY (columna1) ); En este ejemplo, la columna1 se define como clave primaria.\nAgregar una clave primaria a una tabla existente: ALTER TABLE nombre_tabla ADD PRIMARY KEY (columna1); En este ejemplo, la columna1 se agrega como clave primaria a una tabla existente.\nEs importante destacar que una clave primaria puede estar compuesta por una o más columnas. Si deseas utilizar una clave primaria compuesta, simplemente incluye varias columnas dentro del paréntesis PRIMARY KEY.\nAquí tienes un ejemplo de una clave primaria compuesta:\nCREATE TABLE productos ( id_categoria INT, id_producto INT, nombre VARCHAR(100), PRIMARY KEY (id_categoria, id_producto) ); En este ejemplo, la clave primaria está compuesta por las columnas id_categoria e id_producto.\nRecuerda que solo puedes tener una clave primaria por tabla y no puede contener valores nulos (NULL). Además, MySQL crea automáticamente un índice en la clave primaria para mejorar el rendimiento de las consultas.\nEspero que esta lección te haya sido útil. Si tienes más preguntas sobre claves primarias en MySQL o cualquier otro tema relacionado con bases de datos, no dudes en preguntar.\n","date":"17 enero 2023","permalink":"/platform/mysql/ddl/","section":"Mysqls","summary":"DDL # lenguaje de definición de datos (DDL) de MySQL.","title":"DDL"},{"content":"Leccion DML MYSQL # lección completa sobre el lenguaje de manipulación de datos (DML) en MySQL. El DML se utiliza para realizar operaciones de inserción, actualización, eliminación y consulta en una base de datos. Aquí tienes una descripción general de las principales declaraciones DML en MySQL:\nINSERT: Se utiliza para insertar datos en una tabla.\nSintaxis básica:\nINSERT INTO nombre_tabla (columna1, columna2, ...) VALUES (valor1, valor2, ...); Ejemplo:\nINSERT INTO clientes (nombre, apellido, edad) VALUES (\u0026#39;John\u0026#39;, \u0026#39;Doe\u0026#39;, 30); UPDATE: Se utiliza para modificar datos existentes en una tabla.\nSintaxis básica:\nUPDATE nombre_tabla SET columna1 = valor1, columna2 = valor2, ... WHERE condición; Ejemplo:\nUPDATE productos SET precio = 100 WHERE id = 1; DELETE: Se utiliza para eliminar filas de una tabla.\nSintaxis básica:\nDELETE FROM nombre_tabla WHERE condición; Ejemplo:\nDELETE FROM usuarios WHERE id = 1; SELECT: Se utiliza para consultar datos de una o varias tablas.\nSintaxis básica:\nSELECT columnas FROM nombre_tabla WHERE condición; Ejemplo:\nSELECT * FROM clientes WHERE edad \u0026gt;= 18; SELECT \u0026hellip; ORDER BY: Se utiliza para ordenar los resultados de una consulta en función de una o más columnas.\nSintaxis básica:\nSELECT columnas FROM nombre_tabla ORDER BY columna ASC/DESC; Ejemplo:\nSELECT * FROM registros ORDER BY fecha DESC; Estas son las declaraciones DML más utilizadas en MySQL. Recuerda que hay muchas más opciones y cláusulas disponibles en el lenguaje SQL para personalizar y ajustar tus consultas según tus necesidades.\nJOIN MYSQL # lección completa sobre las diferentes formas de realizar joins en MySQL. El join es una operación que combina filas de dos o más tablas en función de una columna relacionada entre ellas. Aquí tienes una descripción de los tipos de join más comunes en MySQL:\nINNER JOIN: Devuelve solo las filas que tienen coincidencias en ambas tablas.\nSintaxis básica:\nSELECT columnas FROM tabla1 INNER JOIN tabla2 ON tabla1.columna = tabla2.columna; Ejemplo:\nSELECT pedidos.numero, clientes.nombre FROM pedidos INNER JOIN clientes ON pedidos.cliente_id = clientes.id; LEFT JOIN: Devuelve todas las filas de la tabla izquierda y las coincidencias de la tabla derecha. Si no hay coincidencias, se devuelve NULL en las columnas de la tabla derecha.\nSintaxis básica:\nSELECT columnas FROM tabla1 LEFT JOIN tabla2 ON tabla1.columna = tabla2.columna; Ejemplo:\nSELECT clientes.nombre, pedidos.numero FROM clientes LEFT JOIN pedidos ON clientes.id = pedidos.cliente_id; RIGHT JOIN: Devuelve todas las filas de la tabla derecha y las coincidencias de la tabla izquierda. Si no hay coincidencias, se devuelve NULL en las columnas de la tabla izquierda.\nSintaxis básica:\nSELECT columnas FROM tabla1 RIGHT JOIN tabla2 ON tabla1.columna = tabla2.columna; Ejemplo:\nSELECT clientes.nombre, pedidos.numero FROM clientes RIGHT JOIN pedidos ON clientes.id = pedidos.cliente_id; FULL JOIN: Devuelve todas las filas de ambas tablas, incluidas las coincidencias y las no coincidencias. Si no hay coincidencias, se devuelve NULL en las columnas correspondientes.\nNota: MySQL no admite la sintaxis de FULL JOIN de forma nativa, pero se puede emular mediante UNION de LEFT JOIN y RIGHT JOIN.\nSintaxis básica:\nSELECT columnas FROM tabla1 LEFT JOIN tabla2 ON tabla1.columna = tabla2.columna UNION SELECT columnas FROM tabla1 RIGHT JOIN tabla2 ON tabla1.columna = tabla2.columna; Ejemplo:\nSELECT clientes.nombre, pedidos.numero FROM clientes LEFT JOIN pedidos ON clientes.id = pedidos.cliente_id UNION SELECT clientes.nombre, pedidos.numero FROM clientes RIGHT JOIN pedidos ON clientes.id = pedidos.cliente_id; Count, sum, Group by y sort by # Estos son los tipos de joins más utilizados en MySQL. Recuerda que el join te permite combinar tablas en función de una relación específica, lo que te permite realizar consultas más complejas y obtener resultados más significativos.\n¡Por supuesto! Aquí tienes una lección completa sobre las funciones de agregación COUNT, SUM, el uso de GROUP BY y ORDER BY en MySQL:\nCOUNT: Esta función de agregación cuenta el número de filas que cumplen una condición específica.\nSintaxis básica:\nSELECT COUNT(columna) FROM tabla WHERE condición; Ejemplo:\nSELECT COUNT(id) FROM clientes WHERE estado = \u0026#39;activo\u0026#39;; SUM: Esta función de agregación calcula la suma de los valores de una columna específica.\nSintaxis básica:\nSELECT SUM(columna) FROM tabla WHERE condición; Ejemplo:\nSELECT SUM(total) FROM ventas WHERE fecha = \u0026#39;2023-06-13\u0026#39;; GROUP BY: Esta cláusula se utiliza para agrupar filas en función de una o más columnas y aplicar funciones de agregación a cada grupo.\nSintaxis básica:\nSELECT columna1, columna2, ..., función_agregación(columna) FROM tabla GROUP BY columna1, columna2, ...; Ejemplo:\nSELECT categoría, COUNT(*) FROM productos GROUP BY categoría; ORDER BY: Esta cláusula se utiliza para ordenar los resultados de una consulta en función de una o más columnas, ya sea en orden ascendente (ASC) o descendente (DESC).\nSintaxis básica:\nSELECT columnas FROM tabla ORDER BY columna1 ASC/DESC, columna2 ASC/DESC, ...; Ejemplo:\nSELECT nombre, edad FROM usuarios ORDER BY edad DESC; Estas funciones y cláusulas son muy útiles para realizar operaciones de agregación, agrupación y ordenación en MySQL. Puedes combinarlas con otras declaraciones DML para obtener resultados más precisos y personalizados en tus consultas.\n","date":"17 enero 2023","permalink":"/platform/mysql/dml/","section":"Mysqls","summary":"Leccion DML MYSQL # lección completa sobre el lenguaje de manipulación de datos (DML) en MySQL.","title":"DML parte 2"},{"content":"Organizar HTML # Durante el proceso de inducción aprendiste las bases de HTML, hoy vamos a repasar algunas cosas de este lenguaje.\nAnatomía HTML # Anatomía HTML\nLos elementos HTML que siempre encontrarás luego de \u0026lt;!DOCTYPE html\u0026gt; son:\n\u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;: El elemento \u0026lt;html\u0026gt; envuelve todo el contenido de la página. A veces se le conoce como el elemento raíz. \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;: Es la cabecera de la página y no la verá el cliente. Aquí pondrás información e instrucciones de tu página que sólo deberá interpretar el navegador. \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;: las etiquetas meta sirven para dar diferentes instrucciones al navegador, esta configuración en concreto le dice al navegador que tu página usará la configuración de caracteres UTF-8 que incluye la mayoría de caracteres de todos los lenguajes humanos escritos. Esta etiqueta va dentro de la etiqueta \u0026lt;head\u0026gt;. \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt;: Aquí se establece el título de la página, este aparecerá en la pestaña del navegador. También se utiliza para describir la página. Esta etiqueta va dentro de la etiqueta \u0026lt;head\u0026gt;. \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;: El elemento \u0026lt;body\u0026gt; contiene todo el contenido que quieres mostrar a los usuarios cuando visitan tu página, ya sea texto, imágenes, vídeos, juegos, pistas de audio reproducibles o cualquier otra cosa. index.html # Cuando trabajamos con archivos HTML debemos comenzar teniendo en cuenta el nombre de nuestro archivo. como convención, cuando se crea un sitio web, el archivo principal se llama index.html . Esto es porque los navegadores por defecto, al ingresar en una dirección web, buscan el archivo HTML que tenga este nombre, y será la primera página que se visita.\nLos demás archivos HTML pueden tener otro nombre según sea necesario.\nAsimismo, si tenemos archivos HTML dentro de una carpeta, debemos ponerle de nombre index.html al archivo HTML principal de esa carpeta.\nIndentación # Cuando tenemos nuestros archivos HTML, habrás notado que algunos elementos están más a la derecha que otros:\nEn este ejemplo, los elementos \u0026lt;meta\u0026gt; y \u0026lt;title\u0026gt; se encuentran indentados. Es decir, están separados del margen izquierdo por una tabulación haciendo la lectura más sencilla. Con esto entendemos que los elementos \u0026lt;meta\u0026gt; y \u0026lt;title\u0026gt; son elementos \u0026ldquo;hijo\u0026rdquo; del elemento \u0026lt;head\u0026gt;.\nEsta estructura ayuda a la legibilidad del código y es de uso común en los lenguajes de programación. Te recomendamos seguir esta buena práctica a fin de que tu código sea legible y evitar que se convierta en un caos.\nCSS3: Box Model # Ya que entendemos las cosas básicas de HTML y CSS debemos tener presente lo sigiuente: Cada elemento en el diseño web es una caja rectangular. Este punto es importante para comprender como trabajamos con CSS y lograr el diseño que queremos lgrar. Si bien es cierto podemos posicionar los elementos y darles estilos con CSS, es importante que entendamos como funciona esa caja en sí.\nEl Box model (modelo de caja) explica el tamaño de los elementos en función de algunas propiedades de CSS.\nDesde el interior hacia el exterior, tenemos:\nContent (contenido) padding (relleno) border (borde o frontera) margin (margen) La mejor manera de visualizar el modelo de caja es abrir el navegador DevTools y comprobar cómo se muestra:\nAquí puedes ver cómo Firefox me dice las propiedades de un elemento span que destaqué. Hice clic con el botón derecho en él, presioné Inspeccionar elemento y fui al panel Diseño de DevTools.\nMira, el espacio azul claro es el área de content. Rodeándolo está el padding, luego el border y finalmente el margin. De forma predeterminada, si estableces un ancho (o alto) en el elemento, se aplicará al área de content . Todos los cálculos de padding, border y margin se realizan fuera del valor, por lo que debes tener esto en cuenta cuando realices el cálculo. Se puede cambiar este comportamiento utilizando Box-sizing (puedes buscar más información de esta propiedad aqui).\nEntender este punto, te puede ayudar a realizar diseño con CSS de manera más sencilla, por lo que mira el siguiente video y toma nota entre las diferencias entre cada una de las partes del box model:\nDisplay # Ahora que entiendes un poco mejor lo que es el box model, es importante que sepas que las cajas en CSS pueden comportarse de manera distinta de acuerdo a una propiedad conocida como display. Esta propiedad nos indica la forma en la que el elemento será representado en el navegador y usar alguno de estos display, alterará considerablemente el comportamiento del navegador con el elemento y sus hijos.\nEn esta sección analizaremos los más importantes no cubiertos en otra parte:\nblock inline inline-block none en el siguiente video aprenderás la diferencia entre cada uno de estos y como afectan al modelo de caja:\nAprendiendo con Práctica # A lo largo de esta primera semana, te dejaremos unos enlaces de los que puedes aprender a aplicar HTML y CSS dede el portal FreeCodeCamp. Te recomendamos que los realices en orden, ya que cada uno de ellos te enseñará algo nuevo y te ayudará a reforzar lo aprendido en esta semana, comenzando por el segmento de HTML y al finalizarlo, empezar con el de CSS, sin embargo eres libre realizarlos en el orden que desees.\nHTML - Aplicacion de fotos de gatos\nCSS - Menú de Cafetería\n","date":"17 enero 2023","permalink":"/platform/html/anatomia/","section":"Htmls","summary":"Organizar HTML # Durante el proceso de inducción aprendiste las bases de HTML, hoy vamos a repasar algunas cosas de este lenguaje.","title":"HTML 5 y CSS3"},{"content":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás. Toma apuntes de lo que consideres mas relevante y anota los temas que sean más complicados de entender para que puedas resolver tus dudas posteriormente. Sin mas rodeos, comencemos 😉.\nFundamentos de la Programación # La programación en pocas palabras, es darle datos e instrucciones a una computadora para que procese esos datos siguiendo las instrucciones que le dimos para que nos devuelva un resultado. ¿Y para qué? para resolver problemas de nuestra vida como hacer operaciones matemáticas, sacar estadísticas, automatizar procesos, etcétera.\nPero esos problemas se pueden resolver de diferentes maneras, algunas más rápidas y eficientes y otras no tanto. Pero todas con el fin de encontrar la solución al problema.\n¿Qué es la Programación? # Es un término común que se puede describir según la Real Academia de la Lengua como \u0026ldquo;Acción o efecto de programar\u0026rdquo;. ¿Y programar? se define como Idear y ordenar las acciones necesarias para realizar un proyecto.\nTodo esto en términos generales, no se refiere específicamente a la programación de lenguajes informáticos, pero nos da una idea de lo que es.\nPara ejecutar lo que el usuario desea hacer en su computadora, o bien para resolver un problema específico, este precisa buscar un software que realice o ejecute con exactitud la tarea que se ha planteado o elaborar y desarrollar (escribir) un programa que la realice. El trabajo de elaboración de un programa se denomina “programación”. Pero la programación no es solo el trabajo de escritura del código, sino todo un conjunto de tareas que se deben cumplir, a fin de que el código que se escribió resulte correcto, robusto, y cumpla con el objetivo o los objetivos para los que fue creado.\nLas afirmaciones que se derivan de lo anterior son varias:\nConocer las herramientas, los formalismos y los métodos para transformar un problema en un programa escrito en un lenguaje (que posiblemente no será el lenguaje máquina), y para qué dicho programa pueda ser transformado en un código ejecutable.\nSaber transformar el problema inicial en un algoritmo y luego en un programa.\nLa primera afirmación es genérica y se considera para varias categorías de problemas para resolver. Por su parte, la segunda es específica de un problema determinado que se tiene que resolver, para lo cual existen diversas metodologías específicas de resolución para este tipo de problemas.\nPara los casos de problemas muy generales, en ocasiones existen métodos conocidos que solo se adaptan a un problema en particular. El método es, por lo general, un algoritmo o una técnica de programación.\nDesarrollo Web # Web Developing ¿Y el Desarrollo Web?\nLa aplicación de la programación y la lógica son muchos: Inteligencia Artificial, Administración de base de datos, Desarrollo de videojuegos, Desarrollo de Sistemas operativos, etc.\nEntre todas estas ramas encontramos el Desarrollo Web.\nDesarrollo web es un término que define la creación de sitios web para Internet o una intranet.\nEl Programador Web es un profesional que trabaja con desarrolladores de páginas web, softwares, operadores de sistemas (SysOps) que ejecuta y/o desarrollar las versiones e implementaciones de códigos. El puesto requiere de personas que también posean soft skills o habilidades blandas relevantes que impacten positivamente el control de calidad de las pruebas y los equipos de operaciones; además de fomentar un entorno colaborativo.\nDentro del Desarrollo Web encontramos distintos roles:\nDesarrollador web front-end es el profesional responsable de proyectar y construir la interfaz del usuario en un proyecto web. Es quien cuida de la visualización y la interfaz gráfica.\nDesarrollador web back-end Son los que trabajan con aplicaciones haciendo código que sólo el servidor entenderá.\nDesarrollador web full-stack - Por supuesto que nada impide que un desarrollador trabaje en ambas áreas. Por eso el término full-stack se refiere a que el profesional que trabaja tanto con el back-end como el front-end.\nAquí te vamos a enseñar lo necesario para que tengas las habilidades de un desarrollador Full-Stack así que ¡preparate para aprender creando! 😁.\nComenzaremos con las habilidades de un desarrollador Front-end y seguiremos con el Back-end.\nLas primeras tecnologías que aprenderás son: HTML5, CSS3 y JavaScript. Los dos primeros tienen como objetivo darle estructura, contenido y diseño a una página web, y el último se encarga de la lógica que hay detrás de una página.\nPáginas web estáticas vs Dinámicas # Al empezar en el mundo del desarrollo web, seguro te estarás preguntando ¿Cómo inicio a hacer páginas web? Veamos primero las dos diferencias entre estos productos web.\nPáginas Estáticas # Lo primero, hay páginas estáticas y páginas dinámicas. Las páginas estáticas van a ser todos los productos web o todas las páginas que van a tener pura información para consumir, ya sea texto e imágenes, y que esta información no va a cambiar. Siempre va a ser la misma. Por ejemplo, algún blog post, si te metes algún blog de alguien, siempre vas a poder ver los blogs de esa persona.\nEsta información raramente va a cambiar. Posiblemente van a llegar personas nuevas al equipo o se van a ir personas o van a agregar cierta información distinta de la empresa o de los productos que tienen, pero gran parte de la información se va a quedar ahí de forma estática por mucho tiempo, y si tú generas esta página, posiblemente te vayan a contactar meses después para poderte decir como \u0026ldquo;oye, queremos hacer este cambio, ahora queremos agregar nuevas fotos o una nueva dirección de donde estamos nosotros\u0026rdquo;. O \u0026ldquo;hay 2 miembros nuevos del equipo, creemos que agregue su información y su foto\u0026rdquo;. Pero estas páginas siguen siendo estáticas porque la información perse nunca va a cambiar. Si tú entras, hoy vas a ver lo mismo. Si entras mañana, no va a haber algún tipo de cambio.\nLo más importante es que estas páginas no están conectadas a un servidor o a una base de datos, no necesitas generar interacción con la base de Datos porque no hay algo que generes este cambio del lado del cliente. El cliente desde el navegador no tendrá alguna interacción que le permita cambiar información de la página web, no tendrá algún login, etc.\nEjemplo de página estática # Las Landing page son un buen ejemplo de páginas estáticas. Como en este caso. La información que verán los clientes siempre es la misma y no cambiará a menos que se solicite. No hay opción de hacer login y esto es solo informativo.\nEste tipo de páginas no es menos importante, simplemente tiene un objetivo distinto a una página dinámica y son más sencillas de construir.\nPáginas Dinámicas # Las páginas dinámicas, también conocidas como web Apps, ya dejan de ser páginas y se convierten más en aplicaciones por todas las cosas que vas a poder hacer con estas mismas.\nEstas sí están conectadas a una base de Datos, por lo que el usuario, o sea nosotros a través del navegador, si podemos generar una interacción con la página o con la aplicación. Ahora se tiene que guardar cierta información o estado de lo que estemos haciendo, se esperaría poder tener un login para yo tener mi cuenta y poder guardar información. Se esperaría poder interactuar ya sea con productos si quiero comprar algo, si es que estoy viendo algo de mis seguidores en las redes, o si quiero ver a las personas que sigo.\nEjemplo de página dinámica # En páginas como Twitter, tú si puedes interactuar. Puedes dejarla de esa forma y dentro de unos 15 minutos si actualizas, la información será distinta. Esta página está en comunicación con el servidor para traer los nuevos cambios según el usuario lo solicite. La información que ves allí es específica para ti, y otro usuario podría ver twits distintos.\nRecursos Para comenzar # Antes de continuar, debemos asegurarnos de tener los siguientes programas que formarán parte de este curso:\nVSCode: Este es el editor de código que estaremos utilizando a lo largo del curso, si bien es cierto que existen varios editores y puedes usar el que te sea mas cómodo, te recomendamos este para que todos estemos trabajando en las mismas situaciones y sea más fácil poder interactuar. En caso aun no lo tengas, puedes descargarlo desde el siguiente enlace:\nDownload VS Code\nNavegadores: Es probable que ya cuentes con algunos de estos, sin embargo cuando trabajamos en desarrollo web, es importante contar con diferentes opciones ya que nuestra página web puede comportarse de manera diferente en cada uno de estos por los distintos motores de interpretación que utilizan. Algunos de los navegadores que te recomendamos tener para tus pruebas son:\nBrave Chrome Edge Firefox En cada uno de los anteriores links, tendrás una opción de descarga.\nSi tienes dificultades para instalar alguno de los recursos mencionados, puedes postear tu error o duda en el chat grupal donde podremos ayudarte 😀\nEnlaces # Al terminar la lectura anterior, revisa los siguientes artículos donde encontrarás más información de los temas:\nPáginas Estaticas vs Dinámicas - Open Webinars\n¿Qué es desarrollo web? - Articulo Tekla\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/dia1/intro/","section":"Levels","summary":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás.","title":"Introducción al Desarrollo Web"},{"content":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás. Toma apuntes de lo que consideres mas relevante y anota los temas que sean más complicados de entender para que puedas resolver tus dudas posteriormente. Sin mas rodeos, comencemos 😉.\nFundamentos de la Programación # La programación en pocas palabras, es darle datos e instrucciones a una computadora para que procese esos datos siguiendo las instrucciones que le dimos para que nos devuelva un resultado. ¿Y para qué? para resolver problemas de nuestra vida como hacer operaciones matemáticas, sacar estadísticas, automatizar procesos, etcétera.\nPero esos problemas se pueden resolver de diferentes maneras, algunas más rápidas y eficientes y otras no tanto. Pero todas con el fin de encontrar la solución al problema.\n¿Qué es la Programación? # Es un término común que se puede describir según la Real Academia de la Lengua como \u0026ldquo;Acción o efecto de programar\u0026rdquo;. ¿Y programar? se define como Idear y ordenar las acciones necesarias para realizar un proyecto.\nTodo esto en términos generales, no se refiere específicamente a la programación de lenguajes informáticos, pero nos da una idea de lo que es.\nPara ejecutar lo que el usuario desea hacer en su computadora, o bien para resolver un problema específico, este precisa buscar un software que realice o ejecute con exactitud la tarea que se ha planteado o elaborar y desarrollar (escribir) un programa que la realice. El trabajo de elaboración de un programa se denomina “programación”. Pero la programación no es solo el trabajo de escritura del código, sino todo un conjunto de tareas que se deben cumplir, a fin de que el código que se escribió resulte correcto, robusto, y cumpla con el objetivo o los objetivos para los que fue creado.\nLas afirmaciones que se derivan de lo anterior son varias:\nConocer las herramientas, los formalismos y los métodos para transformar un problema en un programa escrito en un lenguaje (que posiblemente no será el lenguaje máquina), y para qué dicho programa pueda ser transformado en un código ejecutable.\nSaber transformar el problema inicial en un algoritmo y luego en un programa.\nLa primera afirmación es genérica y se considera para varias categorías de problemas para resolver. Por su parte, la segunda es específica de un problema determinado que se tiene que resolver, para lo cual existen diversas metodologías específicas de resolución para este tipo de problemas.\nPara los casos de problemas muy generales, en ocasiones existen métodos conocidos que solo se adaptan a un problema en particular. El método es, por lo general, un algoritmo o una técnica de programación.\nDesarrollo Web # Web Developing ¿Y el Desarrollo Web?\nLa aplicación de la programación y la lógica son muchos: Inteligencia Artificial, Administración de base de datos, Desarrollo de videojuegos, Desarrollo de Sistemas operativos, etc.\nEntre todas estas ramas encontramos el Desarrollo Web.\nDesarrollo web es un término que define la creación de sitios web para Internet o una intranet.\nEl Programador Web es un profesional que trabaja con desarrolladores de páginas web, softwares, operadores de sistemas (SysOps) que ejecuta y/o desarrollar las versiones e implementaciones de códigos. El puesto requiere de personas que también posean soft skills o habilidades blandas relevantes que impacten positivamente el control de calidad de las pruebas y los equipos de operaciones; además de fomentar un entorno colaborativo.\nDentro del Desarrollo Web encontramos distintos roles:\nDesarrollador web front-end es el profesional responsable de proyectar y construir la interfaz del usuario en un proyecto web. Es quien cuida de la visualización y la interfaz gráfica.\nDesarrollador web back-end Son los que trabajan con aplicaciones haciendo código que sólo el servidor entenderá.\nDesarrollador web full-stack - Por supuesto que nada impide que un desarrollador trabaje en ambas áreas. Por eso el término full-stack se refiere a que el profesional que trabaja tanto con el back-end como el front-end.\nAquí te vamos a enseñar lo necesario para que tengas las habilidades de un desarrollador Full-Stack así que ¡preparate para aprender creando! 😁.\nComenzaremos con las habilidades de un desarrollador Front-end y seguiremos con el Back-end.\nLas primeras tecnologías que aprenderás son: HTML5, CSS3 y JavaScript. Los dos primeros tienen como objetivo darle estructura, contenido y diseño a una página web, y el último se encarga de la lógica que hay detrás de una página.\nPáginas web estáticas vs Dinámicas # Al empezar en el mundo del desarrollo web, seguro te estarás preguntando ¿Cómo inicio a hacer páginas web? Veamos primero las dos diferencias entre estos productos web.\nPáginas Estáticas # Lo primero, hay páginas estáticas y páginas dinámicas. Las páginas estáticas van a ser todos los productos web o todas las páginas que van a tener pura información para consumir, ya sea texto e imágenes, y que esta información no va a cambiar. Siempre va a ser la misma. Por ejemplo, algún blog post, si te metes algún blog de alguien, siempre vas a poder ver los blogs de esa persona.\nEsta información raramente va a cambiar. Posiblemente van a llegar personas nuevas al equipo o se van a ir personas o van a agregar cierta información distinta de la empresa o de los productos que tienen, pero gran parte de la información se va a quedar ahí de forma estática por mucho tiempo, y si tú generas esta página, posiblemente te vayan a contactar meses después para poderte decir como \u0026ldquo;oye, queremos hacer este cambio, ahora queremos agregar nuevas fotos o una nueva dirección de donde estamos nosotros\u0026rdquo;. O \u0026ldquo;hay 2 miembros nuevos del equipo, creemos que agregue su información y su foto\u0026rdquo;. Pero estas páginas siguen siendo estáticas porque la información perse nunca va a cambiar. Si tú entras, hoy vas a ver lo mismo. Si entras mañana, no va a haber algún tipo de cambio.\nLo más importante es que estas páginas no están conectadas a un servidor o a una base de datos, no necesitas generar interacción con la base de Datos porque no hay algo que generes este cambio del lado del cliente. El cliente desde el navegador no tendrá alguna interacción que le permita cambiar información de la página web, no tendrá algún login, etc.\nEjemplo de página estática # Las Landing page son un buen ejemplo de páginas estáticas. Como en este caso. La información que verán los clientes siempre es la misma y no cambiará a menos que se solicite. No hay opción de hacer login y esto es solo informativo.\nEste tipo de páginas no es menos importante, simplemente tiene un objetivo distinto a una página dinámica y son más sencillas de construir.\nPáginas Dinámicas # Las páginas dinámicas, también conocidas como web Apps, ya dejan de ser páginas y se convierten más en aplicaciones por todas las cosas que vas a poder hacer con estas mismas.\nEstas sí están conectadas a una base de Datos, por lo que el usuario, o sea nosotros a través del navegador, si podemos generar una interacción con la página o con la aplicación. Ahora se tiene que guardar cierta información o estado de lo que estemos haciendo, se esperaría poder tener un login para yo tener mi cuenta y poder guardar información. Se esperaría poder interactuar ya sea con productos si quiero comprar algo, si es que estoy viendo algo de mis seguidores en las redes, o si quiero ver a las personas que sigo.\nEjemplo de página dinámica # En páginas como Twitter, tú si puedes interactuar. Puedes dejarla de esa forma y dentro de unos 15 minutos si actualizas, la información será distinta. Esta página está en comunicación con el servidor para traer los nuevos cambios según el usuario lo solicite. La información que ves allí es específica para ti, y otro usuario podría ver twits distintos.\nRecursos Para comenzar # Antes de continuar, debemos asegurarnos de tener los siguientes programas que formarán parte de este curso:\nVSCode: Este es el editor de código que estaremos utilizando a lo largo del curso, si bien es cierto que existen varios editores y puedes usar el que te sea mas cómodo, te recomendamos este para que todos estemos trabajando en las mismas situaciones y sea más fácil poder interactuar. En caso aun no lo tengas, puedes descargarlo desde el siguiente enlace:\nDownload VS Code\nNavegadores: Es probable que ya cuentes con algunos de estos, sin embargo cuando trabajamos en desarrollo web, es importante contar con diferentes opciones ya que nuestra página web puede comportarse de manera diferente en cada uno de estos por los distintos motores de interpretación que utilizan. Algunos de los navegadores que te recomendamos tener para tus pruebas son:\nBrave Chrome Edge Firefox En cada uno de los anteriores links, tendrás una opción de descarga.\nSi tienes dificultades para instalar alguno de los recursos mencionados, puedes postear tu error o duda en el chat grupal donde podremos ayudarte 😀\nEnlaces # Al terminar la lectura anterior, revisa los siguientes artículos donde encontrarás más información de los temas:\nPáginas Estaticas vs Dinámicas - Open Webinars\n¿Qué es desarrollo web? - Articulo Tekla\n","date":"17 enero 2023","permalink":"/platform/logica/intro_web/","section":"Logicas","summary":"Bienvenido a Funval Este es tu primer día en el camino a convertirte en un Desarrollador Web Full Stack, por lo que te invitamos a prestar mucha atención a todo lo que aprenderás.","title":"Introducción al Desarrollo Web"},{"content":"I\u0026rsquo;m doing tests # ","date":"17 enero 2023","permalink":"/platform/tests/","section":"","summary":"I\u0026rsquo;m doing tests # ","title":"Introducción al Desarrollo Web"},{"content":"Introducción al Desarrollo Web # Aqui encontrarás la información que se usará dentro del Nivel 1.\n","date":"17 enero 2023","permalink":"/platform/levels/level1_2023/","section":"Levels","summary":"Introducción al Desarrollo Web # Aqui encontrarás la información que se usará dentro del Nivel 1.","title":"Nivel 1 - Intro al desarrollo web"},{"content":"Día 5 : Tipos de Datos y Operadores # En JavaScript trabajamos con distintos valores, cada valor pertenece a un tipo de dato determinado. Por ejemplo, un string o un número. En JavaScript hay ocho tipos de datos básicos. En esta sección aprenderemos sobre algunos de ellos.\nRecuerda que podemos almacenar cualquier tipo de dato en una variable, incluso podemos reasignar el valor de una variable con un tipo de dato distinto:\n// Sin error let number = \u0026#34;3\u0026#34;; // variable que contiene un string number = 6; // cambiamos el valor a un dato tipo number Cadenas de Texto (Strings) # En esta seccion te recomendamos ver hasta el minuto 10, donde se aprenden las bases de este tipo de dato. La información que viene despues no se incluirá en el examen pero podría serte util dentro del curso.\nNúmeros # En este tutorial, dentro de los primeros 5 minutos se cubre los aspectos básicos de este tipo de dato. La información que viene despues no se incluirá en el examen pero podría serte util dentro del curso.\nBooleanos # Tipos de Operadores # Hasta este punto, hemos visto los tipos de datos más básicos dentro del lenguaje, conocidos como primitivos. Existen otros tipos de datos llamados compuestos como: Objetos, Arrays, Functions y Classes; los cuales por ahora no cubriremos. Con los tipos de datos primitivos tenemos una base para entender más conceptos de JavaScript.\nEn este video solo mira los 10 primeros minutos donde se varios de los operadores que usarás al trabajar con JavaScript y los necesarios para el examen. La información que viene despues no se incluirá en el examen pero podría serte util dentro del curso.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_5/","section":"Levels","summary":"Día 5 : Tipos de Datos y Operadores # En JavaScript trabajamos con distintos valores, cada valor pertenece a un tipo de dato determinado.","title":"Día 5"},{"content":"Día 4 : JavaScript # Introducción a JavaScript # JavaScript es actualmente el lenguaje de programación más utilizado dentro del desarrollo web, su popularidad ha crecido a lo largo de los años hasta posicionarlo como uno de los lenguajes mas queridos, en el siguiente video aprenderás un poco más de sus origenes y su utilidad.\nEs importante recordar que JavaScript es un lenguaje de alto nivel. Un lenguaje de programación de alto nivel es un tipo de lenguaje de programación que es más fácil de leer y escribir para los humanos que los lenguajes de bajo nivel. Estos lenguajes están diseñados para ser más cercanos a la forma en que las personas piensan y hablan y tienen una sintaxis más simple y abstracciones más elevadas. Algunos ejemplos de lenguajes de programación de alto nivel incluyen Python, Java, C# y Ruby.\nGramática y Caracteristicas del lenguaje # Todo lenguaje de programación cuenta con una forma de escribir en particular, aunque muchos de los lenguajes de programación guardan similitudes, también tienen diferencias que es importante que conozcamos. Así como HTML tiene una forma especial de escribir, JavaScript tambien cuenta con una sintáxis especial y una serie de reglas que aprenderemos antes que empecemos a escribir código de manera apresurada.\nVariables dentro de JavaScript: Var vs Let # Teniendo ya una noción mas clara de lo que es Javascript, hablemos de la unidad de almacenamiento mas comun en este lenguaje, las variables.\nConstantes y otros tipos de datos # En JavaScript tambien existe un tipo de dato similar a las variables llamado constante, en el siguiente video aprenderás de este dato y haremos un primer vistazo a otros tipos de dato más complejos. Respecto a estos ultimos, es importante que conozcas de su existencia, sin embargo para esta parte del proceso no es necesario que aprendas a manejarlos, pero si que entiendas a nivel teorico sus funciones basicas.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_4/","section":"Levels","summary":"Día 4 : JavaScript # Introducción a JavaScript # JavaScript es actualmente el lenguaje de programación más utilizado dentro del desarrollo web, su popularidad ha crecido a lo largo de los años hasta posicionarlo como uno de los lenguajes mas queridos, en el siguiente video aprenderás un poco más de sus origenes y su utilidad.","title":"Día 4"},{"content":"Día 3 : Más estilos CSS # Hoy profundizaremos en los estilos de CSS. El siguiente video creado por el canal de youtube Hola Mundo explican de manera clara más estilos que debes tener en cuenta al momento de desarrollar para la web. Antes de ello, te menciono 3 formas comunes de escribir estilos CSS: inline, internal y external.\nInline # Son los estilos CSS que se indican dentro del atributo style de la etiqueta HTML\n\u0026lt;p style=\u0026#34;color: red;\u0026#34;\u0026gt;Hola mundo\u0026lt;/p\u0026gt; Internal # Son los estilos CSS que se colocan dentro de la etiqueta \u0026lt;style\u0026gt; ubicada dentro del head de la estructura HTML.\n\u0026lt;head\u0026gt; ... \u0026lt;style\u0026gt; p { color: red; } \u0026lt;/style\u0026gt; ... \u0026lt;/head\u0026gt; External # La forma de escribir estos estilos es similar a Internal con la diferencia que se escriben dentro de un archivo .css aparte, el cual se une al archivo HTML por medio de la etiqueta \u0026lt;link\u0026gt;, de esta forma, los estilos serán aplicados aunque sean dos archivos distintos.\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;!-- Dentro del atributo `href` indicamos la ruta del archivo CSS--\u0026gt; CSS con Hola Mundo # En este tutorial, Puedes aprender desde el inicio hasta la seccion en la que aprendes de background(minuto 56:10). En caso sientas que puedes ir un poco más alla, puedes ir a la seccion siguiente donde se habla de box model (termina en 1:04:55) pero esta ultima no se incluirá dentro del examen.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_3/","section":"Levels","summary":"Día 3 : Más estilos CSS # Hoy profundizaremos en los estilos de CSS.","title":"Día 3"},{"content":"Día 2 : Introducción a HTML y CSS # Al comenzar tu camino como Web Developer (Desarrollador Web) vas a tener que aprender varias tecnologías. vamos a empezar por la base de la web.\nHTML # HTML (Lenguaje de Marcas de Hipertexto, del inglés HyperText Markup Language) es el componente más básico de la Web. Define el significado y la estructura del contenido web. Además de HTML, generalmente se utilizan otras tecnologías para describir la apariencia/presentación de una página web (CSS) o la funcionalidad/comportamiento (JavaScript).\n\u0026ldquo;Hipertexto\u0026rdquo; hace referencia a los enlaces que conectan páginas web entre sí, ya sea dentro de un único sitio web o entre sitios web. Los enlaces son un aspecto fundamental de la Web. Al subir contenido a Internet y vincularlo a las páginas creadas por otras personas, te conviertes en un participante activo en la «World Wide Web» (Red Informática Mundial).\nHTML ha ido evolucionando a través del tiempo y hoy nos encontramos en la versión 5 (HTML5). Este lenguaje se basa en una estructura de etiquetas, las cuales tienen la siguiente forma:\nEs más facil aprender esto haciendo, así que dejemos por un momento la teoría.\nKhan Academy : HTML\nIngresa al enlace de arriba e intenta completar las lecciónes antes de pasar al siguiente tutorial.\nMás etiquetas de HTML # Una vez que realizaste el tutorial de Khan academy, te recomiendo seguir con el tutorial que verás a continuación. Toma nota de los conceptos que consideres más importantes, no es necesario que mires todo el video pero si por lo menos la mitad de este tutorial donde se explican los conceptos básicos dentro de este lenguaje. La seccion donde se explica los formularios (minuto 35:27 hasta 51:34) puedes saltarla ya que no se incluirá en la evaluación. Si ya viste como crear listas en el tutorial de Khan academy, puedes saltarte el resto del video, sino continua hasta aprender de las listas y con eso puedes concluir.\nHTML es la base de las páginas web, tener una idea de lo que representa y como usarlo de manera básica, te ayudará a que en un futuro puedas construir páginas web modernas y prácticas.\n","date":"16 diciembre 2022","permalink":"/platform/levels/level_0/dia_2/","section":"Levels","summary":"Día 2 : Introducción a HTML y CSS # Al comenzar tu camino como Web Developer (Desarrollador Web) vas a tener que aprender varias tecnologías.","title":"Día 2"},{"content":"Lógica de Programación # Bienvenidos a la clase de Lógica de Programación. Esta clase está diseñada para aquellos que nunca han programado antes y están interesados en aprender los conceptos básicos de la lógica de programación. La lógica de programación es una habilidad crucial para cualquier persona interesada en desarrollar software o aplicaciones, y esta clase le proporcionará una base sólida sobre la que puede construir sus habilidades de programación.\nEn esta clase, aprenderá cómo pensar y solucionar problemas de manera lógica.\nPara esta clase estaremos viendo una serie de videos del canal de youtube CodigoCompilado donde se explica claramente los conceptos de la lógica de programacion. Te recomendamos que puedas tomar nota de las ideas que logres entender y las preguntas que puedan surgir.\nAsí que, si estás interesado en aprender a programar y desarrollar software, este es el lugar perfecto para empezar. Estamos emocionados de acompañarte en este viaje y ayudarte a adquirir habilidades valiosas que lo ayudarán a lograr tus metas. ¡Empecemos!\nLógica de Programación: Princios básicos # ¿Qué necesito para programar? # Tipos de dato (entero, flotante y caracter) # Antes de ver este video debes tener en cuenta lo siguiente:\nSi bien es cierto aquí el tipo de dato numérico está representado en dos partes, entero y flotante, esto puede no cumplirse en todos los lenguajes como en JavaScript, donde ambos se consideran tipo de dato numérico. Aun así, en muchos otros lenguajes si se hace la distinción entre estos dos.\nEsto tambien es similar con el dato caracter y cadena de caracteres el cual en JavaScript solo se considera como string (cadena de caracteres) para cualquiera de los dos casos.\nVariables y Constantes # Qué es un Algoritmo? # Desición y Algoritmo # Diagrama de Flujo # Ejercicios # Ahora que tienes un poco de noción sobre lo que es la lógica de programación, te dejamos un video donde podrás ver algunos ejercicios donde estos conceptos se aplican para llegar a una solución. Estos ejercicios te ayudarán a comprender mejor como resolver problemas de manera lógica así que no dudes en pausar el video antes de que presenta cada solución para que primero hagas tú solución y luego lo compares con la solución brindada.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/dia_1/","section":"Levels","summary":"Lógica de Programación # Bienvenidos a la clase de Lógica de Programación.","title":"Día 1"},{"content":"Seccion creada para insertar la información del Nivel inductivo.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/","section":"Levels","summary":"This is an example of summary","title":"Induccion a Nivel 0"},{"content":"Una guia para la vida # Este es un sitio de prueba\nme interesa aprender a usar markdown to create nuevos sitios\n","date":"15 diciembre 2022","permalink":"/platform/contacto/","section":"","summary":"Una guia para la vida # Este es un sitio de prueba","title":"Contacto"},{"content":"Inducción a la Programación # Instrucciones para postular al programa de Desarrollo Web en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollo Web que ofrece la Fundacion FUNVAL. Para lograr esto te explicaré brevemente como funciona el proceso de inducción y el material que usarás.\nAcerca del proceso # Durante el proceso de inducción, estarás estudiando los principios básicos de la programación. Para desarrollar páginas web, se debe escribir en lenguajes especiales para esta labor. Los más usados en el desarrollo web son : HTML5, CSS3 y JavaScript, este ultimo sirve para implementar la lógica de programación dentro de la web, mientras los anteriores sirven tanto para el maquetaado como para el diseño(estilos) respectivamente.\nEste proceso está estructurado para funcionar de la siguiente forma:\n5 días de aprendizaje 3 horas de estudio en cada día aprox. (15 horas en total) un día de evaluación Acerca del material # Durante cada día de estudio, tendrás material para que puedas aprender las bases de estos lenguajes, si bien es cierto que tendrás 3 horas cada día, puedes dedicar mas tiempo en caso consideres necesario profundizar o practicar sobre un tema en particular.\nEl material disponible, en su mayoría es de recursos externos (páginas web, videos, blogs, etc.). La progrmación en la actualidad cuenta con una comunidad muy grande, quienes desean que más personas aprendan sobre este mundo, sin embargo hay tanta información que es dificil en ocasiones indagar por nuestra propia cuenta, aquí te daremos el material necesario para que aprendas las bases en el tiempo previsto, el cual ha sido previamente revisado y con el que sabemos, podrás aprender estas tecnologías de manera práctica y sencilla.\nAsimismo te invitamos a tomar nota de lo que vayas aprendiendo para que puedas repasarlo luego de las clase 😄\nImportancia de los temas que aprenderás Si bien es cierto que estos temas te ayudarán a prepararte para el exámen de admisión, esperamos que puedas analizarlo y prácticar de la mano con los tutoriales que hemos añadido. Al ingresar al programa, esta información será de gran ayuda para empezar tu camino como programador, recuerda que esperamos que llegues a entender de forma básica los temas que aprenderás y al iniciar el curso, podremos profundizar en ellos. También, tendremos en cuenta que leiste estos temas y partiremos de ahí para avanzar en el curso. Acerca de la evaluación # Luego de aprender lo necesario, necesitamos poner a prueba tu conocimiento para evaluar que cuentas con el conocimiento minimo antes de empezar el curso, por lo que la evaluación de Programación tendrá un puntaje sobre 100 pts. Es necesario que logres un mínimo de 75pts sobre promedio final para lograr ingresar al programa.\nDesde Funval te deseamos los mejores éxitos en este proceso, si tienes dudas sobre alguno de los puntos mencionados o del material que encontrarás, puedes contactar a tu reclutador.\n","date":"15 diciembre 2022","permalink":"/platform/levels/level_0/temario/","section":"Levels","summary":"Inducción a la Programación # Instrucciones para postular al programa de Desarrollo Web en Funval 😃 Bienvenido a Funval, si estás en esta página es porque deseas postular al programa de Desarrollo Web que ofrece la Fundacion FUNVAL.","title":"Temario"},{"content":"Finding a new way to build pages prueba about # ","date":"1 enero 0001","permalink":"/platform/about/","section":"","summary":"Finding a new way to build pages prueba about # ","title":""},{"content":"Blog de Funval # Estamos trabajando para añadir información en esta seccion 😀\n","date":"1 enero 0001","permalink":"/platform/posts/","section":"","summary":"Blog de Funval # Estamos trabajando para añadir información en esta seccion 😀","title":""}]